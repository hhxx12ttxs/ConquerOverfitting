package org.eighthpence.sudokusolver;

import java.util.HashMap;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class SudokuView extends JFrame {

	    /**
	 * 
	 */
	private static final long serialVersionUID = -7413362438417752505L;
		/**
	     * Creates new form SudokuView
	     * Initialises the components (automatically generated by netbeans)
	     * Creates a hashmap for easy manipulation
	     * Creates a sample grid
	     */
	    public SudokuView() {
	        initComponents();
	        createMap();
	        // Setting a grid. Can remove this later
	        cell11.setText("1");
	        cell41.setText("3");
	        cell91.setText("8");
	        cell22.setText("9");
	        cell52.setText("4");
	        cell82.setText("7");
	        cell23.setText("4");
	        cell53.setText("2");
	        cell83.setText("3");
	        cell34.setText("5");
	        cell64.setText("4");
	        cell74.setText("9");
	        cell36.setText("8");
	        cell46.setText("1");
	        cell76.setText("6");
	        cell27.setText("5");
	        cell57.setText("6");
	        cell87.setText("9");
	        cell28.setText("8");
	        cell58.setText("9");
	        cell88.setText("5");
	        cell19.setText("4");
	        cell69.setText("8");
	        cell99.setText("2");
	    }

	    /**
	     * Create a hashmap of components. Would have liked to do this differently
	     * but couldn't really due to the way netbeans sets up the components. Might
	     * redo the class another time.
	     */
	    private void createMap() {
	        this.cellMap = new HashMap<String, JTextField>();

	        cellMap.put("cell11", cell11);
	        cellMap.put("cell12", cell12);
	        cellMap.put("cell13", cell13);
	        cellMap.put("cell14", cell14);
	        cellMap.put("cell15", cell15);
	        cellMap.put("cell16", cell16);
	        cellMap.put("cell17", cell17);
	        cellMap.put("cell18", cell18);
	        cellMap.put("cell19", cell19);

	        cellMap.put("cell21", cell21);
	        cellMap.put("cell22", cell22);
	        cellMap.put("cell23", cell23);
	        cellMap.put("cell24", cell24);
	        cellMap.put("cell25", cell25);
	        cellMap.put("cell26", cell26);
	        cellMap.put("cell27", cell27);
	        cellMap.put("cell28", cell28);
	        cellMap.put("cell29", cell29);

	        cellMap.put("cell31", cell31);
	        cellMap.put("cell32", cell32);
	        cellMap.put("cell33", cell33);
	        cellMap.put("cell34", cell34);
	        cellMap.put("cell35", cell35);
	        cellMap.put("cell36", cell36);
	        cellMap.put("cell37", cell37);
	        cellMap.put("cell38", cell38);
	        cellMap.put("cell39", cell39);

	        cellMap.put("cell41", cell41);
	        cellMap.put("cell42", cell42);
	        cellMap.put("cell43", cell43);
	        cellMap.put("cell44", cell44);
	        cellMap.put("cell45", cell45);
	        cellMap.put("cell46", cell46);
	        cellMap.put("cell47", cell47);
	        cellMap.put("cell48", cell48);
	        cellMap.put("cell49", cell49);

	        cellMap.put("cell51", cell51);
	        cellMap.put("cell52", cell52);
	        cellMap.put("cell53", cell53);
	        cellMap.put("cell54", cell54);
	        cellMap.put("cell55", cell55);
	        cellMap.put("cell56", cell56);
	        cellMap.put("cell57", cell57);
	        cellMap.put("cell58", cell58);
	        cellMap.put("cell59", cell59);

	        cellMap.put("cell61", cell61);
	        cellMap.put("cell62", cell62);
	        cellMap.put("cell63", cell63);
	        cellMap.put("cell64", cell64);
	        cellMap.put("cell65", cell65);
	        cellMap.put("cell66", cell66);
	        cellMap.put("cell67", cell67);
	        cellMap.put("cell68", cell68);
	        cellMap.put("cell69", cell69);

	        cellMap.put("cell71", cell71);
	        cellMap.put("cell72", cell72);
	        cellMap.put("cell73", cell73);
	        cellMap.put("cell74", cell74);
	        cellMap.put("cell75", cell75);
	        cellMap.put("cell76", cell76);
	        cellMap.put("cell77", cell77);
	        cellMap.put("cell78", cell78);
	        cellMap.put("cell79", cell79);

	        cellMap.put("cell81", cell81);
	        cellMap.put("cell82", cell82);
	        cellMap.put("cell83", cell83);
	        cellMap.put("cell84", cell84);
	        cellMap.put("cell85", cell85);
	        cellMap.put("cell86", cell86);
	        cellMap.put("cell87", cell87);
	        cellMap.put("cell88", cell88);
	        cellMap.put("cell89", cell89);

	        cellMap.put("cell91", cell91);
	        cellMap.put("cell92", cell92);
	        cellMap.put("cell93", cell93);
	        cellMap.put("cell94", cell94);
	        cellMap.put("cell95", cell95);
	        cellMap.put("cell96", cell96);
	        cellMap.put("cell97", cell97);
	        cellMap.put("cell98", cell98);
	        cellMap.put("cell99", cell99);
	    }

	    /** This method is called from within the constructor to
	     * initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is
	     * always regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	    private void initComponents() {
	        java.awt.GridBagConstraints gridBagConstraints;

	        cell11 = new javax.swing.JTextField();
	        cell21 = new javax.swing.JTextField();
	        cell31 = new javax.swing.JTextField();
	        cell41 = new javax.swing.JTextField();
	        cell51 = new javax.swing.JTextField();
	        cell61 = new javax.swing.JTextField();
	        cell71 = new javax.swing.JTextField();
	        cell81 = new javax.swing.JTextField();
	        cell91 = new javax.swing.JTextField();
	        cell14 = new javax.swing.JTextField();
	        cell24 = new javax.swing.JTextField();
	        cell34 = new javax.swing.JTextField();
	        cell44 = new javax.swing.JTextField();
	        cell54 = new javax.swing.JTextField();
	        cell64 = new javax.swing.JTextField();
	        cell74 = new javax.swing.JTextField();
	        cell84 = new javax.swing.JTextField();
	        cell94 = new javax.swing.JTextField();
	        cell16 = new javax.swing.JTextField();
	        cell26 = new javax.swing.JTextField();
	        cell36 = new javax.swing.JTextField();
	        cell46 = new javax.swing.JTextField();
	        cell56 = new javax.swing.JTextField();
	        cell67 = new javax.swing.JTextField();
	        cell76 = new javax.swing.JTextField();
	        cell86 = new javax.swing.JTextField();
	        cell96 = new javax.swing.JTextField();
	        cell12 = new javax.swing.JTextField();
	        cell22 = new javax.swing.JTextField();
	        cell32 = new javax.swing.JTextField();
	        cell42 = new javax.swing.JTextField();
	        cell52 = new javax.swing.JTextField();
	        cell62 = new javax.swing.JTextField();
	        cell72 = new javax.swing.JTextField();
	        cell82 = new javax.swing.JTextField();
	        cell92 = new javax.swing.JTextField();
	        cell15 = new javax.swing.JTextField();
	        cell25 = new javax.swing.JTextField();
	        cell35 = new javax.swing.JTextField();
	        cell45 = new javax.swing.JTextField();
	        cell55 = new javax.swing.JTextField();
	        cell65 = new javax.swing.JTextField();
	        cell75 = new javax.swing.JTextField();
	        cell85 = new javax.swing.JTextField();
	        cell95 = new javax.swing.JTextField();
	        cell18 = new javax.swing.JTextField();
	        cell29 = new javax.swing.JTextField();
	        cell38 = new javax.swing.JTextField();
	        cell48 = new javax.swing.JTextField();
	        cell58 = new javax.swing.JTextField();
	        cell68 = new javax.swing.JTextField();
	        cell78 = new javax.swing.JTextField();
	        cell88 = new javax.swing.JTextField();
	        cell98 = new javax.swing.JTextField();
	        cell13 = new javax.swing.JTextField();
	        cell23 = new javax.swing.JTextField();
	        cell33 = new javax.swing.JTextField();
	        cell43 = new javax.swing.JTextField();
	        cell53 = new javax.swing.JTextField();
	        cell63 = new javax.swing.JTextField();
	        cell73 = new javax.swing.JTextField();
	        cell83 = new javax.swing.JTextField();
	        cell93 = new javax.swing.JTextField();
	        cell17 = new javax.swing.JTextField();
	        cell27 = new javax.swing.JTextField();
	        cell37 = new javax.swing.JTextField();
	        cell47 = new javax.swing.JTextField();
	        cell57 = new javax.swing.JTextField();
	        cell66 = new javax.swing.JTextField();
	        cell77 = new javax.swing.JTextField();
	        cell87 = new javax.swing.JTextField();
	        cell97 = new javax.swing.JTextField();
	        cell19 = new javax.swing.JTextField();
	        cell28 = new javax.swing.JTextField();
	        cell39 = new javax.swing.JTextField();
	        cell49 = new javax.swing.JTextField();
	        cell59 = new javax.swing.JTextField();
	        cell69 = new javax.swing.JTextField();
	        cell79 = new javax.swing.JTextField();
	        cell89 = new javax.swing.JTextField();
	        cell99 = new javax.swing.JTextField();
	        solveButton = new javax.swing.JButton();
	        clearButton = new javax.swing.JButton();

	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
	        setTitle("Sudoku Solver");
	        setMinimumSize(new java.awt.Dimension(210, 300));
	        setResizable(false);
	        getContentPane().setLayout(new java.awt.GridBagLayout());

	        cell11.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 0;
	        getContentPane().add(cell11, gridBagConstraints);

	        cell21.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 1;
	        gridBagConstraints.gridy = 0;
	        getContentPane().add(cell21, gridBagConstraints);

	        cell31.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 2;
	        gridBagConstraints.gridy = 0;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
	        getContentPane().add(cell31, gridBagConstraints);

	        cell41.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 3;
	        gridBagConstraints.gridy = 0;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
	        getContentPane().add(cell41, gridBagConstraints);

	        cell51.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 4;
	        gridBagConstraints.gridy = 0;
	        getContentPane().add(cell51, gridBagConstraints);

	        cell61.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 5;
	        gridBagConstraints.gridy = 0;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
	        getContentPane().add(cell61, gridBagConstraints);

	        cell71.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 6;
	        gridBagConstraints.gridy = 0;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
	        getContentPane().add(cell71, gridBagConstraints);

	        cell81.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = 0;
	        getContentPane().add(cell81, gridBagConstraints);

	        cell91.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 8;
	        gridBagConstraints.gridy = 0;
	        getContentPane().add(cell91, gridBagConstraints);

	        cell14.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(cell14, gridBagConstraints);

	        cell24.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 1;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(cell24, gridBagConstraints);

	        cell34.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 2;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
	        getContentPane().add(cell34, gridBagConstraints);

	        cell44.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 3;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
	        getContentPane().add(cell44, gridBagConstraints);

	        cell54.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 4;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(cell54, gridBagConstraints);

	        cell64.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 5;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
	        getContentPane().add(cell64, gridBagConstraints);

	        cell74.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 6;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
	        getContentPane().add(cell74, gridBagConstraints);

	        cell84.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(cell84, gridBagConstraints);

	        cell94.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 8;
	        gridBagConstraints.gridy = 3;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(cell94, gridBagConstraints);

	        cell16.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 5;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell16, gridBagConstraints);

	        cell26.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 1;
	        gridBagConstraints.gridy = 5;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell26, gridBagConstraints);

	        cell36.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 2;
	        gridBagConstraints.gridy = 5;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
	        getContentPane().add(cell36, gridBagConstraints);

	        cell46.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 3;
	        gridBagConstraints.gridy = 5;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
	        getContentPane().add(cell46, gridBagConstraints);

	        cell56.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 4;
	        gridBagConstraints.gridy = 5;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell56, gridBagConstraints);

	        cell67.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 5;
	        gridBagConstraints.gridy = 6;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
	        getContentPane().add(cell67, gridBagConstraints);

	        cell76.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 6;
	        gridBagConstraints.gridy = 5;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
	        getContentPane().add(cell76, gridBagConstraints);

	        cell86.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = 5;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell86, gridBagConstraints);

	        cell96.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 8;
	        gridBagConstraints.gridy = 5;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell96, gridBagConstraints);

	        cell12.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 1;
	        getContentPane().add(cell12, gridBagConstraints);

	        cell22.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 1;
	        gridBagConstraints.gridy = 1;
	        getContentPane().add(cell22, gridBagConstraints);

	        cell32.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 2;
	        gridBagConstraints.gridy = 1;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
	        getContentPane().add(cell32, gridBagConstraints);

	        cell42.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 3;
	        gridBagConstraints.gridy = 1;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
	        getContentPane().add(cell42, gridBagConstraints);

	        cell52.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 4;
	        gridBagConstraints.gridy = 1;
	        getContentPane().add(cell52, gridBagConstraints);

	        cell62.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 5;
	        gridBagConstraints.gridy = 1;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
	        getContentPane().add(cell62, gridBagConstraints);

	        cell72.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 6;
	        gridBagConstraints.gridy = 1;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
	        getContentPane().add(cell72, gridBagConstraints);

	        cell82.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = 1;
	        getContentPane().add(cell82, gridBagConstraints);

	        cell92.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 8;
	        gridBagConstraints.gridy = 1;
	        getContentPane().add(cell92, gridBagConstraints);

	        cell15.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 4;
	        getContentPane().add(cell15, gridBagConstraints);

	        cell25.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 1;
	        gridBagConstraints.gridy = 4;
	        getContentPane().add(cell25, gridBagConstraints);

	        cell35.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 2;
	        gridBagConstraints.gridy = 4;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
	        getContentPane().add(cell35, gridBagConstraints);

	        cell45.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 3;
	        gridBagConstraints.gridy = 4;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
	        getContentPane().add(cell45, gridBagConstraints);

	        cell55.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 4;
	        gridBagConstraints.gridy = 4;
	        getContentPane().add(cell55, gridBagConstraints);

	        cell65.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 5;
	        gridBagConstraints.gridy = 4;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
	        getContentPane().add(cell65, gridBagConstraints);

	        cell75.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 6;
	        gridBagConstraints.gridy = 4;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
	        getContentPane().add(cell75, gridBagConstraints);

	        cell85.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = 4;
	        getContentPane().add(cell85, gridBagConstraints);

	        cell95.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 8;
	        gridBagConstraints.gridy = 4;
	        getContentPane().add(cell95, gridBagConstraints);

	        cell18.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 7;
	        getContentPane().add(cell18, gridBagConstraints);

	        cell29.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 1;
	        gridBagConstraints.gridy = 8;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell29, gridBagConstraints);

	        cell38.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 2;
	        gridBagConstraints.gridy = 7;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
	        getContentPane().add(cell38, gridBagConstraints);

	        cell48.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 3;
	        gridBagConstraints.gridy = 7;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
	        getContentPane().add(cell48, gridBagConstraints);

	        cell58.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 4;
	        gridBagConstraints.gridy = 7;
	        getContentPane().add(cell58, gridBagConstraints);

	        cell68.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 5;
	        gridBagConstraints.gridy = 7;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
	        getContentPane().add(cell68, gridBagConstraints);

	        cell78.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 6;
	        gridBagConstraints.gridy = 7;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
	        getContentPane().add(cell78, gridBagConstraints);

	        cell88.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = 7;
	        getContentPane().add(cell88, gridBagConstraints);

	        cell98.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 8;
	        gridBagConstraints.gridy = 7;
	        getContentPane().add(cell98, gridBagConstraints);

	        cell13.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 2;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell13, gridBagConstraints);

	        cell23.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 1;
	        gridBagConstraints.gridy = 2;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell23, gridBagConstraints);

	        cell33.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 2;
	        gridBagConstraints.gridy = 2;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
	        getContentPane().add(cell33, gridBagConstraints);

	        cell43.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 3;
	        gridBagConstraints.gridy = 2;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
	        getContentPane().add(cell43, gridBagConstraints);

	        cell53.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 4;
	        gridBagConstraints.gridy = 2;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell53, gridBagConstraints);

	        cell63.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 5;
	        gridBagConstraints.gridy = 2;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
	        getContentPane().add(cell63, gridBagConstraints);

	        cell73.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 6;
	        gridBagConstraints.gridy = 2;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
	        getContentPane().add(cell73, gridBagConstraints);

	        cell83.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = 2;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell83, gridBagConstraints);

	        cell93.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 8;
	        gridBagConstraints.gridy = 2;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell93, gridBagConstraints);

	        cell17.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 6;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(cell17, gridBagConstraints);

	        cell27.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 1;
	        gridBagConstraints.gridy = 6;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(cell27, gridBagConstraints);

	        cell37.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 2;
	        gridBagConstraints.gridy = 6;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
	        getContentPane().add(cell37, gridBagConstraints);

	        cell47.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 3;
	        gridBagConstraints.gridy = 6;
	        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
	        getContentPane().add(cell47, gridBagConstraints);

	        cell57.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 4;
	        gridBagConstraints.gridy = 6;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(cell57, gridBagConstraints);

	        cell66.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 5;
	        gridBagConstraints.gridy = 5;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
	        getContentPane().add(cell66, gridBagConstraints);

	        cell77.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 6;
	        gridBagConstraints.gridy = 6;
	        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
	        getContentPane().add(cell77, gridBagConstraints);

	        cell87.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = 6;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(cell87, gridBagConstraints);

	        cell97.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 8;
	        gridBagConstraints.gridy = 6;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(cell97, gridBagConstraints);

	        cell19.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 8;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell19, gridBagConstraints);

	        cell28.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 1;
	        gridBagConstraints.gridy = 7;
	        getContentPane().add(cell28, gridBagConstraints);

	        cell39.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 2;
	        gridBagConstraints.gridy = 8;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
	        getContentPane().add(cell39, gridBagConstraints);

	        cell49.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 3;
	        gridBagConstraints.gridy = 8;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
	        getContentPane().add(cell49, gridBagConstraints);

	        cell59.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 4;
	        gridBagConstraints.gridy = 8;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell59, gridBagConstraints);

	        cell69.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 5;
	        gridBagConstraints.gridy = 8;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
	        getContentPane().add(cell69, gridBagConstraints);

	        cell79.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 6;
	        gridBagConstraints.gridy = 8;
	        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
	        getContentPane().add(cell79, gridBagConstraints);

	        cell89.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 7;
	        gridBagConstraints.gridy = 8;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell89, gridBagConstraints);

	        cell99.setColumns(1);
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 8;
	        gridBagConstraints.gridy = 8;
	        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
	        getContentPane().add(cell99, gridBagConstraints);

	        solveButton.setText("Solve");
	        solveButton.addMouseListener(new java.awt.event.MouseAdapter() {
	            public void mousePressed(java.awt.event.MouseEvent evt) {
	                solveButtonMousePressed(evt);
	            }
	        });
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 5;
	        gridBagConstraints.gridy = 9;
	        gridBagConstraints.gridwidth = 4;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(solveButton, gridBagConstraints);

	        clearButton.setText("Clear");
	        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
	            public void mousePressed(java.awt.event.MouseEvent evt) {
	                clearButtonMousePressed(evt);
	            }
	        });
	        gridBagConstraints = new java.awt.GridBagConstraints();
	        gridBagConstraints.gridx = 0;
	        gridBagConstraints.gridy = 9;
	        gridBagConstraints.gridwidth = 4;
	        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
	        getContentPane().add(clearButton, gridBagConstraints);

	        pack();
	    }// </editor-fold>//GEN-END:initComponents

	    private void solveButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solveButtonMousePressed
	        // TODO add your handling code here:
	    	long startTime = System.currentTimeMillis();
	        int[][] knownValues = new int[9][9];

	        for (int i = 0; i < 9; i++) {
	            for (int j = 0; j < 9; j++) {
	                JTextField currentCell = cellMap.get("cell" + (i + 1) + (j + 1));
	                if (currentCell.getText().length() != 0) {
	                    knownValues[i][j] = Integer.parseInt(currentCell.getText());
	                }
	            }
	        }

	        Solver solver = new Solver();
	        solver.applyKnownValues(knownValues);
	        if (solver.solve()) {
	            int[][] gridValues = solver.getGridValues();
	            for (int i = 0; i < 9; i++) {
	                for (int j = 0; j < 9; j++) {
	                    JTextField currentCell = cellMap.get("cell" + (i + 1) + (j + 1));
	                    currentCell.setText(gridValues[i][j] + "");
	                }
	            }
	            JOptionPane.showMessageDialog(this, "Solved in " + ((double)(System.currentTimeMillis() - startTime)/1000) + " seconds via logic!");
	        } else {
	            JOptionPane.showMessageDialog(this, "Not Solved!");
	        }
	    }//GEN-LAST:event_solveButtonMousePressed

	    private void clearButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMousePressed
	            for (int i = 0; i < 9; i++) {
	                for (int j = 0; j < 9; j++) {
	                    JTextField currentCell = cellMap.get("cell" + (i + 1) + (j + 1));
	                    currentCell.setText("");
	                }
	            }
	    }//GEN-LAST:event_clearButtonMousePressed

	    // Variables declaration - do not modify//GEN-BEGIN:variables
	    private javax.swing.JTextField cell11;
	    private javax.swing.JTextField cell12;
	    private javax.swing.JTextField cell13;
	    private javax.swing.JTextField cell14;
	    private javax.swing.JTextField cell15;
	    private javax.swing.JTextField cell16;
	    private javax.swing.JTextField cell17;
	    private javax.swing.JTextField cell18;
	    private javax.swing.JTextField cell19;
	    private javax.swing.JTextField cell21;
	    private javax.swing.JTextField cell22;
	    private javax.swing.JTextField cell23;
	    private javax.swing.JTextField cell24;
	    private javax.swing.JTextField cell25;
	    private javax.swing.JTextField cell26;
	    private javax.swing.JTextField cell27;
	    private javax.swing.JTextField cell28;
	    private javax.swing.JTextField cell29;
	    private javax.swing.JTextField cell31;
	    private javax.swing.JTextField cell32;
	    private javax.swing.JTextField cell33;
	    private javax.swing.JTextField cell34;
	    private javax.swing.JTextField cell35;
	    private javax.swing.JTextField cell36;
	    private javax.swing.JTextField cell37;
	    private javax.swing.JTextField cell38;
	    private javax.swing.JTextField cell39;
	    private javax.swing.JTextField cell41;
	    private javax.swing.JTextField cell42;
	    private javax.swing.JTextField cell43;
	    private javax.swing.JTextField cell44;
	    private javax.swing.JTextField cell45;
	    private javax.swing.JTextField cell46;
	    private javax.swing.JTextField cell47;
	    private javax.swing.JTextField cell48;
	    private javax.swing.JTextField cell49;
	    private javax.swing.JTextField cell51;
	    private javax.swing.JTextField cell52;
	    private javax.swing.JTextField cell53;
	    private javax.swing.JTextField cell54;
	    private javax.swing.JTextField cell55;
	    private javax.swing.JTextField cell56;
	    private javax.swing.JTextField cell57;
	    private javax.swing.JTextField cell58;
	    private javax.swing.JTextField cell59;
	    private javax.swing.JTextField cell61;
	    private javax.swing.JTextField cell62;
	    private javax.swing.JTextField cell63;
	    private javax.swing.JTextField cell64;
	    private javax.swing.JTextField cell65;
	    private javax.swing.JTextField cell66;
	    private javax.swing.JTextField cell67;
	    private javax.swing.JTextField cell68;
	    private javax.swing.JTextField cell69;
	    private javax.swing.JTextField cell71;
	    private javax.swing.JTextField cell72;
	    private javax.swing.JTextField cell73;
	    private javax.swing.JTextField cell74;
	    private javax.swing.JTextField cell75;
	    private javax.swing.JTextField cell76;
	    private javax.swing.JTextField cell77;
	    private javax.swing.JTextField cell78;
	    private javax.swing.JTextField cell79;
	    private javax.swing.JTextField cell81;
	    private javax.swing.JTextField cell82;
	    private javax.swing.JTextField cell83;
	    private javax.swing.JTextField cell84;
	    private javax.swing.JTextField cell85;
	    private javax.swing.JTextField cell86;
	    private javax.swing.JTextField cell87;
	    private javax.swing.JTextField cell88;
	    private javax.swing.JTextField cell89;
	    private javax.swing.JTextField cell91;
	    private javax.swing.JTextField cell92;
	    private javax.swing.JTextField cell93;
	    private javax.swing.JTextField cell94;
	    private javax.swing.JTextField cell95;
	    private javax.swing.JTextField cell96;
	    private javax.swing.JTextField cell97;
	    private javax.swing.JTextField cell98;
	    private javax.swing.JTextField cell99;
	    private javax.swing.JButton clearButton;
	    private javax.swing.JButton solveButton;
	    // End of variables declaration//GEN-END:variables
	    // Custom variable declaration
	    HashMap<String, JTextField> cellMap;
}

