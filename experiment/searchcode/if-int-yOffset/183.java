/**
 *   Copyright 2004-2005 Sun Microsystems, Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package org.acre.visualizer.ui;

import org.acre.common.AcreException;
import org.acre.config.ConfigService;
import org.acre.dao.PatternQueryRepository;
import org.acre.dao.PatternRepository;
import org.acre.dao.AcreDbDAO;
import org.acre.lang.pql.pdbc.PQLArtifact;
import org.acre.pdmengine.SearchContext;
import org.acre.server.AcreDelegate;
import org.acre.server.UserContextObject;
import org.acre.visualizer.ui.components.Editor;
import org.acre.visualizer.ui.components.AcreAbout;
import org.acre.visualizer.ui.components.SwingWorker;
import org.acre.visualizer.ui.config.ConfigurationPanel;
import org.acre.visualizer.ui.config.LogFileViewer;

import org.acre.visualizer.ui.pqleditor.AcreQueryPanel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.util.List;
import java.util.logging.Logger;

/**
 * Sample Panel to show how vizualizer will interact with the PQL engine.
 *
 * @author Syed Ali
 * @author Deepak Alur - Refactored to remove hacks
 *
 */
public class Main extends JFrame implements MainMDIFrameInterface {
    private static Main mainFrame;
    private static MainMDIFrameInterface mainFrameInterface;

    ConfigService config;
    PatternRepository patternRepository;
    PatternQueryRepository patternQueryRepository;
    private JMenuItem settingsMenuItem;
    private JMenuItem logViewerMenuItem;
    private JDialog configDialog;
    private JDialog aboutDialog;
    private static int currentProgress = 0;
    private AcreAbout aboutPanel;
    private JDialog logFileDialog;
    private LogFileViewer logFileViewer;
    private Logger logger;
    //private AcrePDMPanel salsaPDMComposer;
//    private DashboardPanel dashboardPanel;
//    private AcrePDMExplorerPanel salsaPDMComposer;
    private AcreQueryPanel acreQueryEditor;
    private JTabbedPane salsaTabPane;
    private JLayeredPane backgroundPanel;

    private AcreDelegate delegate;
    private List globalPatternQueryModels;
    private List globalPatternModels;
    private UserContextObject user;

    /**
     * Creates new form MainMDIFrame
     */
    public Main() {
        // TODO: UI to provide support for individual users
        user = new UserContextObject( "User", "Pass");
        delegate = new AcreDelegate(user);
        initComponents();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        this.setIconImage(AcreUIUtils.createImage(AcreIconConstants.MDI_BIG_ICON));

        desktopPane = new javax.swing.JDesktopPane();
        statusPanel = new StatusPanel();
        //statusLabel = new JLabel("Ready ");
        menuBar = new javax.swing.JMenuBar();

        setTitle(AcreUIConstants.APP_NAME);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        //        getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);
        //statusPanel.setLayout(new java.awt.BorderLayout());
        //statusPanel.setBorder(new javax.swing.border.EtchedBorder());
        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);
        //statusPanel.add(statusLabel, java.awt.BorderLayout.WEST);

        setupConfigPanel();

        setupAboutPanel();

        setupFileMenu();
        //setupEditMenu();

        setupDashboardMenu();

        setupPDMMenu();
        setupPQLMenu();

        setupToolsMenu();

        setupDatabaseMenu();

        setupHelpMenu();


        setJMenuBar(menuBar);

        setupBackground();

        statusPanel.initUpdater();
        statusPanel.startUpdater();

        acreProgressBar = new AcreProgressBar(getParentFrame());

        pack();
    }//GEN-END:initComponents


    private void setupAboutPanel() {
        aboutPanel = new AcreAbout();
        if (aboutDialog == null) {
            aboutDialog = new JDialog(getParentFrame(), "About " + AcreUIConstants.APP_NAME, true);
            aboutDialog.getContentPane().add(aboutPanel);
            aboutPanel.setDialog(aboutDialog);
            aboutDialog.pack();
            aboutDialog.setLocationRelativeTo(this);
        }
    }

    private void setupBackground() {
        this.setBackground(Color.white);
        JLabel backgroundLabel = new JLabel();
        Icon backgroundIcon =
        new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/SalsaBackground.gif"));
        backgroundLabel.setIcon(backgroundIcon);
        backgroundPanel = new JLayeredPane();
        backgroundPanel.setLayout(new java.awt.BorderLayout());
        backgroundPanel.setBackground(Color.white);
        backgroundPanel.setForeground(Color.white);
        backgroundPanel.add(backgroundLabel, java.awt.BorderLayout.CENTER);
        int w = Toolkit.getDefaultToolkit().getScreenSize().width;
        int h = Toolkit.getDefaultToolkit().getScreenSize().height;
        int xOffset = (w - backgroundIcon.getIconWidth()) / 2;
        int yOffset = (h - backgroundIcon.getIconHeight()) / 2;
        //        yOffset = 0; // hack
        if (xOffset < 0) {
            xOffset = 0;
        }
        if (yOffset < 0) {
            yOffset = 0;
        }
        backgroundLabel.setBounds(xOffset, yOffset, w, h);

        //        System.out.println("x=" + xOffset + " y=" + yOffset);
        backgroundPanel.setBounds(new Rectangle(xOffset, yOffset));
        backgroundPanel.setBounds(xOffset, yOffset,
                Toolkit.getDefaultToolkit().getScreenSize().width,
                Toolkit.getDefaultToolkit().getScreenSize().height);

        backgroundLabel.setHorizontalAlignment(SwingConstants.CENTER);
        backgroundPanel.setVisible(true);
        getContentPane().add(backgroundPanel, java.awt.BorderLayout.CENTER);
        //        desktopPane.add(backgroundPanel);
        //        desktopPane.setLayer(backgroundPanel, -1);
    }

    private void setupConfigPanel() {

        configPanel = new ConfigurationPanel();
        if (configDialog == null) {
            configDialog = new JDialog(getParentFrame(), AcreUIConstants.APP_NAME + " Configuration", true);
            configDialog.getContentPane().add(configPanel);
            configPanel.setParentFrame(getParentFrame());
            configPanel.setDialog(configDialog);
            configDialog.pack();
            configDialog.setLocationRelativeTo(this);
        }
    }

    private void checkConfigSetup() {
        try {
            config.checkConfig();
            enableMainMenu();
        } catch (Throwable t) {
            // configuration is not set.
            disableMainMenu();
            showError("Configuration is not set or invalid.\nPlease check your settings and retry.",
                    AcreUIConstants.APP_NAME + " Configuration Error");
            showSettings();
        }
    }

    private void setupDatabaseMenu() {
        JPanel dbSelectPanel = new JPanel();
        FlowLayout fl = new FlowLayout(FlowLayout.LEFT);
        fl.setHgap(5);
        fl.setVgap(0);
        dbSelectPanel.setLayout(fl);
        JLabel systemLabel = new JLabel("System:");
        JLabel versionLabel = new JLabel("Version:");
        systemLabel.setIcon(AcreUIUtils.createImageIcon("toolbar/DBIcon.gif"));

        systemCB = new JComboBox();
        versionCB = new JComboBox();

        systemCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSystemActionPerformed();
            }
        });

        versionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectVersionActionPerformed();
            }
        });

        dbSelectPanel.add(systemLabel);
        dbSelectPanel.add(systemCB);
        dbSelectPanel.add(versionLabel);
        dbSelectPanel.add(versionCB);

        dbSelectPanel.setBorder(BorderFactory.createEtchedBorder());

        menuBar.add(dbSelectPanel);
        menuBar.add(Box.createGlue());
    }

    private void initializeSystemVersion() {
        populateSystemCB();
        String system = config.getConfigData().getAcreDefaultSystem();
        systemCB.setSelectedItem(system);

        populateVersionCB();
        String version = config.getConfigData().getAcreDefaultVersion();
        versionCB.setSelectedItem(version);
    }

    private void populateSystemCB() {
        AcreDbDAO acreDbDAO = new AcreDbDAO();
        String [] systems = acreDbDAO.findAllSystems();

        DefaultComboBoxModel m = new DefaultComboBoxModel(systems);
        systemCB.setModel(m);

//        systemCB.setSelectedIndex(-1);
    }

    private void selectVersionActionPerformed() {
        if (versionCB.getSelectedIndex() == -1)
            return;

        config.getConfigData().setAcreDefaultVersion((String) versionCB.getSelectedItem());
    }

    private void selectSystemActionPerformed() {
        if (systemCB.getSelectedIndex() == -1)
            return;

        // todo - should i introduce a currentSelectedSystem/Version in ConfigService that is not saved to disk
        config.getConfigData().setAcreDefaultSystem((String) systemCB.getSelectedItem());

        populateVersionCB();
    }

    private void populateVersionCB() {
        if (systemCB.getSelectedIndex() == -1)
            return;

        String selectedSystem = (String) systemCB.getSelectedItem();

        AcreDbDAO acreDbDAO = new AcreDbDAO();
        String [] versions = acreDbDAO.findVersionsForSystem(selectedSystem);

        DefaultComboBoxModel m = new DefaultComboBoxModel(versions);
        versionCB.setModel(m);

        //versionCB.setSelectedIndex(-1);
    }

    private void setupToolsMenu() {
        toolsMenu = new JMenu();
        toolsMenu.setText("Tools");
        toolsMenu.setMnemonic('T');

        factExtractorMenuItem = new JMenuItem();
        factExtractorMenuItem.setText("Characteristics Extractor");
        factExtractorMenuItem.setMnemonic('C');

        factExtractorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showStatus("Launching Characteristics Extractor...");
                boolean success = new FactExtractorProjectLauncher().run();
                if (success) {
                    showStatus("Ready");
                } else {
                    showStatus("Failed ... Did you set Characteristics Extractor Java VM?");
                }
            }
        });

        toolsMenu.add(factExtractorMenuItem);

        menuBar.add(toolsMenu);
    }

    private void setupHelpMenu() {
        helpMenu = new JMenu();
        helpMenu.setText("Help");
        helpMenu.setMnemonic('H');

        contentMenuItem = new JMenuItem();
        contentMenuItem.setText("Contents");
        contentMenuItem.setMnemonic('C');

        aboutMenuItem = new JMenuItem();
        aboutMenuItem.setText("About");
        aboutMenuItem.setMnemonic('A');
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(contentMenuItem);
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);
    }

    private void setupPQLMenu() {

        pqlMenu = new JMenu();
        pqlMenu.setText("Query");
        pqlMenu.setMnemonic('Q');

        showPQLEditorMenuItem = new JMenuItem();
        showPQLEditorMenuItem.setText("Explorer");
        showPQLEditorMenuItem.setMnemonic('E');
        showPQLEditorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPQLEditorMenuItemActionPerformed(evt);
            }
        });
        pqlMenu.add(showPQLEditorMenuItem);

        menuBar.add(pqlMenu);
    }

    //    private void setupEditMenu() {
    //        editMenu = new JMenu();
    //        editMenu.setText("Edit");
    //
    //
    //        editMenu.addActionListener(new java.awt.event.ActionListener() {
    //            public void actionPerformed(java.awt.event.ActionEvent evt) {
    //                editMenuActionPerformed(evt);
    //            }
    //        });
    //
    //        menuBar.add(editMenu);
    //    }

    private void setupDashboardMenu() {
        dashboardMenu = new JMenu();
        dashboardMenu.setText("Dashboard");
        dashboardMenu.setMnemonic('D');

        showDashboardMenuItem = new JMenuItem();
        showDashboardMenuItem.setText("View");
        showDashboardMenuItem.setMnemonic('V');
        showDashboardMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                showDashboardMenuItemActionPerformed(evt);
            }
        });

        dashboardMenu.add(showDashboardMenuItem);
        menuBar.add(dashboardMenu);
    }

    private void setupPDMMenu() {
        if (true) return;

//        pdmMenu = new JMenu();
//        pdmMenu.setText("Patterns");
//        pdmMenu.setMnemonic('P');
//
//        showPDMExplorerMenuItem = new JMenuItem();
//        showPDMExplorerMenuItem.setText("Analyzer");
//        showPDMExplorerMenuItem.setMnemonic('A');
//        showPDMExplorerMenuItem.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                showPDMExplorerMenuItemActionPerformed(evt);
//            }
//        });
//
//        pdmExecMenuItem = new JMenuItem();
//        pdmExecMenuItem.setText("Execute All");
//        pdmExecMenuItem.setMnemonic('E');
//        pdmExecMenuItem.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                executeAllPDMMenuItemActionPerformed(evt);
//            }
//        });
//
//        //        showPDMComposerMenuItem = new JMenuItem();
//        //        showPDMComposerMenuItem.setText("Composer");
//        //        showPDMComposerMenuItem.setMnemonic('C');
//        //        showPDMComposerMenuItem.addActionListener(
//        //          new ActionListener() {
//        //              public void actionPerformed(ActionEvent e) {
//        //                  showPDMComposer();
//        //              }
//        //          }
//        //        );
//
//        pdmMenu.add(showPDMExplorerMenuItem);
//        pdmMenu.add(pdmExecMenuItem);
//        //        pdmMenu.add(showPDMComposerMenuItem);
//
//        menuBar.add(pdmMenu);
    }

    private void setupFileMenu() {


        fileMenu = new javax.swing.JMenu();
        fileMenu.setText("File");
        fileMenu.setMnemonic('F');

        /* disable projects for now
        newProjectMenuItem = new javax.swing.JMenuItem();
        newProjectMenuItem.setText("New Project");
        newProjectMenuItem.setMnemonic('N');
        newProjectMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                newProjectMenuItemActionPerformed(evt);
            }
        });
        openProjectMenuItem = new javax.swing.JMenuItem();
        openProjectMenuItem.setText("Open Project");
        openProjectMenuItem.setMnemonic('O');
        openProjectMenuItem.addActionListener(
          new java.awt.event.ActionListener() {
              public void actionPerformed(ActionEvent e) {
                  showNotImplemented();
              }
          }
        );
        saveProjectMenuItem = new javax.swing.JMenuItem();
        saveProjectMenuItem.setText("Save Project");
        saveProjectMenuItem.setMnemonic('S');
        saveProjectMenuItem.addActionListener(
          new java.awt.event.ActionListener() {
              public void actionPerformed(ActionEvent e) {
                  showNotImplemented();
              }
          }
        );
        saveProjectAsMenuItem = new javax.swing.JMenuItem();
        saveProjectAsMenuItem.setText("Save Project As ...");
        saveProjectAsMenuItem.setMnemonic('A');
        saveProjectAsMenuItem.addActionListener(
          new java.awt.event.ActionListener() {
              public void actionPerformed(ActionEvent e) {
                  showNotImplemented();
              }
          }
        );
        */

        settingsMenuItem = new JMenuItem();
        settingsMenuItem.setText("Settings...");
        settingsMenuItem.setMnemonic('S');
        settingsMenuItem.addActionListener(
                new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                showSettings();
            }
        }
        );

        logViewerMenuItem = new JMenuItem();
        logViewerMenuItem.setText("View Error Log");
        logViewerMenuItem.setMnemonic('V');
        logViewerMenuItem.addActionListener(
                new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                showLogViewer();
            }
        }
        );

        exitMenuItem = new javax.swing.JMenuItem();
        exitMenuItem.setText("Exit");
        exitMenuItem.setMnemonic('x');
        exitMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        //        fileMenu.add(newProjectMenuItem);
        //        fileMenu.add(openProjectMenuItem);
        //        fileMenu.add(saveProjectMenuItem);
        //        fileMenu.add(saveProjectAsMenuItem);
        fileMenu.add(settingsMenuItem);
        fileMenu.add(logViewerMenuItem);
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);
    }

    public JDialog getConfigDialog() {
        return configDialog;
    }

    public void openFile(String name) {
        // TODO: Open file (Java source etc.)
    }

    public void setSettingsTitle(String title) {
        configDialog.setTitle(title);
    }

    public String getSettingsTitle() {
        return configDialog.getTitle();
    }

    public void showSettings() {
        configDialog.setVisible(true);
        checkConfigSetup();
    }

    public void runGC() {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                long beginFreeMem = 0;
                long endFreeMem = 0;
                try {
                    beginFreeMem = Runtime.getRuntime().freeMemory();

                    showStatus(
                            "Running GC: Current Free Memory = "
                                    + (beginFreeMem), true);

                    System.gc();

                    endFreeMem = Runtime.getRuntime().freeMemory();
                } catch (Throwable t) {
                    t.printStackTrace();
                } finally {
                    showStatus(
                            "Running GC: Current Free Memory = "
                                    + (endFreeMem) + " Total Memory Freed = " +
                                    (endFreeMem - beginFreeMem),
                            false);
                }
            }
        });
    }

    public void openArtifact(PQLArtifact pqlData) {
        // TODO open artifact source
    }

    public Editor getQueryEditor() {
        initPQLEditor();
        return acreQueryEditor;
    }


    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPQLEditorMenuItemActionPerformed
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_showPQLEditorMenuItemActionPerformed

    private void showPQLEditorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPQLEditorMenuItemActionPerformed
        // show PQL editor here:
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                showPQLEditor();
            }
        });

    }//GEN-LAST:event_showPQLEditorMenuItemActionPerformed


    public void showPQLEditor() {
        checkConfigSetup();
        initSalsaTab();

        if (acreQueryEditor == null) {
            showStatus("Opening Query Explorer");
            Cursor lastCursor = getCursor();
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                Icon icon = new ImageIcon(AcreUIUtils.createImage(AcreIconConstants.PQL_FRAME_ICON));

                initPQLEditor();

                salsaTabPane.addTab("PQL Explorer", icon, acreQueryEditor);
                salsaTabPane.setSelectedComponent(acreQueryEditor);
                salsaTabPane.setMnemonicAt(salsaTabPane.getSelectedIndex(), 'E');
            } finally {
                setCursor(lastCursor);
                clearStatus();
            }
        } else {
            salsaTabPane.setSelectedComponent(acreQueryEditor);
        }
    }

    private void initPQLEditor() {
        if (acreQueryEditor == null) {
            acreQueryEditor = new AcreQueryPanel(delegate);
            acreQueryEditor.setParentFrame(getParentFrame());
            try {
                acreQueryEditor.setGlobalQueriesList(delegate.getGlobalPatternQueryModels());
            } catch (AcreException e) {
                e.printStackTrace();  //TODO
            }
            acreProgressBar.addActionListener(acreQueryEditor);
            acreQueryEditor.databaseLoaded();
        }
    }

    private void maximize(JInternalFrame frame) {
        if (frame == null) {
            return;
        }

        if (!frame.isVisible()) {
            return;
        }
        //        if (frame.isMaximum())
        //            return;

        try {
            if (frame.isMaximizable()) {
                frame.setMaximum(true);
            }

            frame.moveToFront();

            if (frame.isIcon()) {
                frame.setIcon(false);
            }

            if (!frame.isSelected()) {
                frame.setSelected(true);
            }

        } catch (PropertyVetoException e) {
            System.out.println("Failed to maximize frame:" + frame);
        }
    }

    private class DashboardWorker extends SwingWorker {
        public Object construct() {
//            showBusyProgress("Loading Dashboard. Please wait...");
//            checkConfigSetup();
//            initSalsaTab();
//            if (dashboardPanel == null) {
//                showStatus("Loading Dashboard. Please wait...");
//                dashboardPanel = new DashboardPanel(user, delegate);
//                dashboardPanel.initDashboard();
//                dashboardPanel.loadMetrics();
//                Icon icon = new ImageIcon(AcreUIUtils.createImage(AcreIconConstants.DASHBOARD_FRAME_ICON));
//                salsaTabPane.addTab("Dashboard", icon, dashboardPanel);
//                salsaTabPane.setSelectedComponent(dashboardPanel);
//                salsaTabPane.setMnemonicAt(salsaTabPane.getSelectedIndex(), 'D');
//            } else {
//                salsaTabPane.setSelectedComponent(dashboardPanel);
//            }
//            hideBusyProgress();

            return null;
        }
    }

    private class ExecAllWorker extends SwingWorker {
        public Object construct() {
                long startTime = System.currentTimeMillis();

                int count = 0;
            try {
                count = delegate.getGlobalPatternModels().size();
            } catch (AcreException e) {
                e.printStackTrace();  //TODO
            }

                Main.showBusyProgress("Found " +
                            count + " Patterns. Executing...Please wait...");
                String system = ConfigService.getInstance().getConfigData().getAcreDefaultSystem();
                String version = ConfigService.getInstance().getConfigData().getAcreDefaultVersion();
                SearchContext sc = new SearchContext(system, version, SearchContext.COARSE);
            try {
                delegate.loadAllPatterns(sc, false, null);
            } catch (AcreException e) {
                e.printStackTrace();  //TODO
            }
            Main.hideBusyProgress();
                long endTime = System.currentTimeMillis();
                long totalTime = (endTime - startTime) / (1000);
                Main.showMainInfo("<HTML>Completed Pattern Execution.<BR>Total Execution Time was: "+ totalTime + " seconds</HTML>", "Execute All Patterns");
            return null;
        }
    }

    private void executeAllPDMMenuItemActionPerformed(java.awt.event.ActionEvent evt) {

        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                ExecAllWorker e = new ExecAllWorker();
                e.start();
            }
        });
    }

    private void showDashboardMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                DashboardWorker dw = new DashboardWorker();
                dw.start();
            }
        });
    }

    private void showPDMExplorerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPQLEditorMenuItemActionPerformed
        // show Pattern Explorer here:
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                showPDMExplorer();
            }
        });
    }//GEN-LAST:event_showPDMExplorerMenuItemActionPerformed

    public void initSalsaTab() {
        if (salsaTabPane == null) {
            salsaTabPane = new JTabbedPane();
            salsaTabPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
            salsaTabPane.setVisible(true);
            getContentPane().remove(backgroundPanel);
            getContentPane().add(salsaTabPane, java.awt.BorderLayout.CENTER);
        }
    }


    public void showPDMExplorer() {
        if (true) return;
        checkConfigSetup();
        initSalsaTab();
//        if (salsaPDMComposer == null) {
//            showStatus("Opening Pattern Explorer");
//            Cursor lastCursor = getCursor();
//            try {
//                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//                Icon icon = new ImageIcon(AcreUIUtils.createImage(AcreIconConstants.PDM_FRAME_ICON));
//
//                synchronized (this) {
//                     if (globalPatternModels == null) {
//                         try {
//                             globalPatternModels = delegate.getGlobalPatternModels();
//                         } catch (AcreException e) {
//                             e.printStackTrace();  // TODO
//                         }
//                     }
//                 }
//
//                salsaPDMComposer = new AcrePDMExplorerPanel();//new AcrePDMPanel();
//                salsaPDMComposer.setParentFrame(getParentFrame());
//                salsaPDMComposer.setGlobalPDMViewer(globalPatternModels);
//                acreProgressBar.addActionListener(salsaPDMComposer);
//                salsaTabPane.addTab("Pattern Analyzer", icon, salsaPDMComposer);
//                salsaTabPane.setSelectedComponent(salsaPDMComposer);
//                salsaTabPane.setMnemonicAt(salsaTabPane.getSelectedIndex(), 'A');
//            } finally {
//                setCursor(lastCursor);
//                clearStatus();
//            }
//        } else {
//            salsaTabPane.setSelectedComponent(salsaPDMComposer);
//        }
    }

    private void showNotImplemented() {
        showInfo(
                "Feature Not Implemented",
                AcreUIConstants.APP_NAME + " Feature");
    }

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        closeSalsa();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void closeSalsa() {
        ConfigService.getInstance().closeLog();
        System.exit(0);
    }

    /**
         * Exit the Application
         */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        closeSalsa();
    }//GEN-LAST:event_exitForm

    public void showError(String message, String title) {
        showMessage(message, title, JOptionPane.ERROR_MESSAGE);
    }

    public void showInfo(String message, String title) {
        showMessage(message, title, JOptionPane.INFORMATION_MESSAGE);
    }


    private void showMessage(String message, String title, int messageType) {

        JOptionPane.showMessageDialog(
                this, message,
                AcreUIConstants.APP_NAME + " - " + title,
                messageType);
    }

    public void showStatus(final String message) {
        showStatus(message, false);
    }

    public void showStatus(final String message, boolean wait) {
        try {
            if (wait) {
                //                SwingUtilities.invokeAndWait(new Runnable() {
                //                    public void run() {
                statusPanel.setMessage(message);
                //statusLabel.repaint();
                //                    }
                //                });
            } else {
                //                SwingUtilities.invokeLater(new Runnable() {
                //                    public void run() {
                statusPanel.setMessage(message);
                //statusLabel.setText(message);
                //statusLabel.repaint();
                //                    }
                //                });
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void clearStatus() {
        try {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    statusPanel.setMessage(" ");
                    //                        statusLabel.setText(" ");
                    //                        statusPanel.repaint();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static MainMDIFrameInterface getMDIFrame() {
        return mainFrameInterface;
    }

    public static void setMDIFrame(MainMDIFrameInterface f) {
        mainFrameInterface = f;
    }

    public static void showMainMDIFrame() {
        Logger log = null;
        AcreSplash splash = null;

        try {
            log = ConfigService.getInstance().getLogger(Main.class);
            splash = new AcreSplash();
            splash.setStatus("Loading " + AcreUIConstants.APP_NAME + "...");
            splash.showMe();

            Thread.sleep(1000);
            currentProgress = 10;

            splash.setStatus("Initializing " + AcreUIConstants.APP_NAME + "...");
            log.info("Initializing " + AcreUIConstants.APP_NAME + "...");
            splash.setProgress(currentProgress);
            Thread.sleep(1000);

            splash.setStatus("Loading " + AcreUIConstants.APP_NAME + " UI...");
            log.info("Loading " + AcreUIConstants.APP_NAME + " UI...");
            mainFrame = new Main();
            mainFrameInterface = mainFrame;
            mainFrame.splash = splash;
            mainFrame.setSize(Toolkit.getDefaultToolkit().getScreenSize());
            //mainFrame.disableMainMenu(); config check is disabled to let GUI startup
            currentProgress += 25;
            splash.setProgress(currentProgress);

            splash.setStatus("Loading Configuration...Please wait.");
            log.info("Loading Configuration...Please wait.");
            Thread.sleep(1000);
            currentProgress += 10;
            splash.setProgress(currentProgress);
            ConfigService c = ConfigService.getInstance();
            mainFrame.setConfig(c);
            //mainFrame.checkConfigSetup(); config check is disabled to let GUI startup

            splash.setStatus("Completed loading. " + AcreUIConstants.APP_NAME + " Ready!");
            log.info("Completed loading. " + AcreUIConstants.APP_NAME + " Ready!");
            currentProgress = 100;
            splash.setProgress(currentProgress);
            Thread.sleep(1000);
            splash.hideMe();
            currentProgress = 0;
            splash.setProgress(0);
            mainFrame.setVisible(true);
        } catch (Throwable t) {
            if (log != null) {
                log.throwing("MainMDIFrame", "showMainMDIFrame", t);
            } else {
                t.printStackTrace();
            }
            if (splash != null) {
                JOptionPane.showMessageDialog(splash, t.getMessage(), AcreUIConstants.APP_NAME + " Startup Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(splash, "Failed to Start " + AcreUIConstants.APP_NAME +".\n" +
                                "Please review and fix errors before restarting.",
                                AcreUIConstants.APP_NAME + " Startup Error", JOptionPane.ERROR_MESSAGE);
            }
            //severe error/ exit
            ConfigService.getInstance().closeLog();
            System.exit(0);

        } finally {

        }
        //mainFrame.showPQLEditor();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        showMainMDIFrame();

        //        if(args.length > 0 && args[0].equals("demo")) {
        //            //demoHack = true;
        //        }

        //System.out.println("demoHack = " + demoHack);


        //splash.show(10);
        //splash.setStatus("Ready");

        //        javax.swing.SwingUtilities.invokeLater(new Runnable() {
        //            public void run() {
        //                showMainMDIFrame();
        //            }
        //        });
    }

    private AcreSplash splash;
    JInternalFrame pqlEditorFrame;
    JInternalFrame pdmExplorerFrame;
    JInternalFrame pdmComposerFrame;
    //private PQL pql;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentMenuItem;

    private javax.swing.JDesktopPane desktopPane;
    //    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    //    private JMenu databaseMenu;
    //    private JMenuItem databaseConnectMenuItem;
    //    private JMenuItem rdbmsConnectMenuItem;
    private javax.swing.JMenuItem factExtractorMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
//    private javax.swing.JMenuItem newProjectMenuItem;
//    private javax.swing.JMenuItem openProjectMenuItem;
    //    private javax.swing.JMenuItem optionsMenuItem;

//    private javax.swing.JMenu pdmMenu;
    private javax.swing.JMenu dashboardMenu;
    private javax.swing.JMenuItem showDashboardMenuItem;

    private JComboBox systemCB;
    private JComboBox versionCB;

    private javax.swing.JMenu pqlMenu;
//    private javax.swing.JMenuItem saveProjectAsMenuItem;
//    private javax.swing.JMenuItem saveProjectMenuItem;
    private javax.swing.JMenuItem showPDMExplorerMenuItem;
    private javax.swing.JMenuItem showPQLEditorMenuItem;
    private javax.swing.JMenuItem pdmExecMenuItem;
    private StatusPanel statusPanel;
    private AcreProgressBar acreProgressBar;

    //private JLabel statusLabel;
    private javax.swing.JMenu toolsMenu;
    //    private JFileChooser dbchooser;
//    private JMenuItem showPDMComposerMenuItem;
    private ConfigurationPanel configPanel;

    // End of variables declaration//GEN-END:variables

    //public PQL getPql() {
    //    return pql;
    //}

    //    public class DBFileFilter extends FileFilter {
    //        private final Object FACTDB_EXT = "ta";
    //
    //        public boolean accept(File f) {
    //            // show dirs ok
    //            if (f.isDirectory())
    //                return true;
    //
    //            // show .ta files
    //            String ext = getExtension(f);
    //            if (ext == null)
    //                return false;
    //            if (ext.trim().length() == 0)
    //                return false;
    //            if (FACTDB_EXT.equals(ext)) {
    //                return true;
    //            }
    //            return false;
    //        }
    //
    //        public String getDescription() {
    //            return "FactDB Files";
    //        }
    //
    //        public String getExtension(File f) {
    //            String ext = null;
    //            String s = f.getName();
    //            int i = s.lastIndexOf('.');
    //
    //            if (i > 0 &&  i < s.length() - 1) {
    //                ext = s.substring(i+1).toLowerCase();
    //            }
    //            return ext;
    //        }
    //    }

    public void disableMainMenu() {
        //fileMenu.setEnabled(false);
        //editMenu.setEnabled(false);
//        pdmMenu.setEnabled(false);
        pqlMenu.setEnabled(false);
        toolsMenu.setEnabled(false);
    }

    public void enableMainMenu() {
        //fileMenu.setEnabled(true);
        //editMenu.setEnabled(true);
//        pdmMenu.setEnabled(true);
        pqlMenu.setEnabled(true);
        toolsMenu.setEnabled(true);
    }


    public ConfigService getConfig() {
        return config;
    }

    public void setConfig(ConfigService config) {
        this.config = config;
        this.logger = config.getLogger(this);
        configPanel.setConfigService(config);
        splash.setStatus("Loading Pattern Definitions...");
        logger.info("Loading Pattern Definitions...");
        currentProgress += 10;
        splash.setProgress(currentProgress);

        delegate = new AcreDelegate( user );

        splash.setStatus("Loading Query Definitions...");
        logger.info("Loading Query Definitions...");
        currentProgress += 10;
        splash.setProgress(currentProgress);

        initializeSystemVersion();
    }

    public ConfigurationPanel getConfigPanel() {
        return configPanel;
    }

    public void setConfigPanel(ConfigurationPanel configPanel) {
        this.configPanel = configPanel;
    }

    public boolean confirmOperation(String message, String title) {
        int n = JOptionPane.showConfirmDialog(
                this,
                message + "\nPlease Confirm.",
                title,
                JOptionPane.YES_NO_OPTION);

        if (n == JOptionPane.YES_OPTION) {
            return true;
        }

        return false;
    }

    public void showLogViewer() {
        if (logFileDialog == null) {
            logFileDialog = new JDialog(getParentFrame(), false);
            logFileViewer = new LogFileViewer();
            logFileViewer.setPreferredSize(new Dimension(800, 400));
            logFileViewer.setDialog(logFileDialog);
            logFileDialog.setContentPane(logFileViewer);
            logFileViewer.loadLog();
            logFileDialog.pack();
            logFileDialog.setLocationRelativeTo(this);
        } else {
            logFileViewer.loadLog();
        }
        logFileDialog.setVisible(true);
    }

    public static void showMainError(String message, String title) {
        if (Main.getMDIFrame() != null) {
            Main.getMDIFrame().showError(message, title);
        }
    }

    // todo - refactor -  move this to base class
    public static boolean showMainConfirm(Component originComponent, String message, String title) {
        if (getMDIFrame() != null) {
            return getMDIFrame().confirmOperation(message, title);
        } else {
            int n = JOptionPane.showConfirmDialog(
                    originComponent,
                    message + "\nPlease Confirm.",
                    title,
                    JOptionPane.YES_NO_OPTION);

            if (n == JOptionPane.YES_OPTION) {
                return true;
            }
        }

        return false;
    }

    // todo - refactor -  move this to base class
    public static void showMainInfo(String message, String title) {
        if (getMDIFrame() != null) {
            getMDIFrame().showInfo(message, title);
            return;
        }
    }

    public static void showBusyProgress(String message) {
        if (getMDIFrame() != null) {
            getMDIFrame().showBusyProgressBar(message);
        }
    }

    public void showBusyProgressBar(String message) {
        acreProgressBar.showProgress(message);
    }

    public static void hideBusyProgress() {
        if (getMDIFrame() != null) {
            getMDIFrame().hideBusyProgressBar();
        }
    }

    public void hideBusyProgressBar() {
        acreProgressBar.hideProgress();
    }

    //    public AcrePDMPanel getSalsaPDMComposer() {
    //        return salsaPDMComposer;
    //    }
    //
    //    public void setSalsaPDMComposer(AcrePDMPanel salsaPDMComposer) {
    //        this.salsaPDMComposer = salsaPDMComposer;
    //    }

    public AcreQueryPanel getSalsaQueryEditor() {
        return acreQueryEditor;
    }

    public void setSalsaQueryEditor(AcreQueryPanel acreQueryEditor) {
        this.acreQueryEditor = acreQueryEditor;
    }

    JFrame getParentFrame() {
        return this;
    }
}

