/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PagosMecanico.java
 *
 * Created on Apr 28, 2010, 3:01:04 PM
 */
package presentacion.mecanicos;

import controlJPA.BancosJpaController;
import controlJPA.ChequesemitidosmecanicosJpaController;
import controlJPA.MecanicosJpaController;
import controlJPA.PagosmecanicoJpaController;
import controlJPA.exceptions.PreexistingEntityException;
import entidades.Bancos;
import entidades.Chequesemitidosmecanicos;
import entidades.ChequesemitidosmecanicosPK;
import entidades.Manodeobraextejec;
import entidades.Mecanicos;
import entidades.Pagosmecanico;
import entidades.PagosmecanicoPK;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.text.JTextComponent;
import presentacion.tablas.MdlManoObraExterna;
import presentacion.tablas.MdlPagosMecanicos;
import utiles.LimitadorCaracteres;
import utiles.LimitadorNumerico;
import utiles.LimitadorNumericoDecimal;
import utiles.S09ShowPopup;

/**
 *
 * @author MigueL
 */
public class PagosMecanico extends javax.swing.JDialog {

    private MecanicosJpaController mecJPA = new MecanicosJpaController();
    private BancosJpaController bancoJPA = new BancosJpaController();
    private ChequesemitidosmecanicosJpaController chequeJPA = new ChequesemitidosmecanicosJpaController();
    private Mecanicos mecanicoSeleccionado;
    private MdlManoObraExterna mdlManoObraExterna = new MdlManoObraExterna();
    private MdlPagosMecanicos mdlPagosMecanicos = new MdlPagosMecanicos();
    private int filaBackUp = -1;

    /** Creates new form PagosMecanico */
    public PagosMecanico(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        cargarComboMecanicos();
        cargarComboBancos();

        this.txtNroCheque.setDocument(new LimitadorNumerico(txtNroCheque, 100, 0));
        this.txtMonto.setDocument(new LimitadorNumericoDecimal(txtMonto, 100, 0));


    }

    public void cargarComboMecanicos() {

        List listaMecanicos = new LinkedList();
        listaMecanicos = mecJPA.findMecanicosEntities();



        DefaultComboBoxModel theModel = (DefaultComboBoxModel) this.cmbMecanicos.getModel();
        theModel.removeAllElements();
        for (int i = 0; i < listaMecanicos.size(); i++) {
            this.cmbMecanicos.addItem(listaMecanicos.get(i));
        }

        this.cmbMecanicos.setSelectedIndex(-1);



        cmbMecanicos.setEditable(true);

        JTextComponent editor = (JTextComponent) cmbMecanicos.getEditor().getEditorComponent();
        // cambioel editor del document
        editor.setDocument(new S09ShowPopup(cmbMecanicos));

        mdlManoObraExterna.limpiar();
        mdlPagosMecanicos.limpiar();
        utiles.Validaciones.limpiarCampos(this.pnlPagos);
//        dteFecha.setDateFormatString("");
    }

    private void cargarComboBancos() {
        List listaBcos = new LinkedList();
        listaBcos = bancoJPA.findBancosEntities();



        DefaultComboBoxModel theModel = (DefaultComboBoxModel) this.cmbBanco.getModel();
        theModel.removeAllElements();
        for (int i = 0; i < listaBcos.size(); i++) {
            this.cmbBanco.addItem(listaBcos.get(i));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbMecanicos = new javax.swing.JComboBox();
        pnlTrabajos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTrabajos = new javax.swing.JTable();
        checkMostrarDeuda = new javax.swing.JCheckBox();
        pnlPagos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPagos = new javax.swing.JTable();
        lblTotalPagado = new javax.swing.JLabel();
        txtTotalPagado = new javax.swing.JTextField();
        lblSaldoPendiente = new javax.swing.JLabel();
        txtSaldoPendiente = new javax.swing.JTextField();
        pnlRegistrarPago = new javax.swing.JPanel();
        lblNroCheque = new javax.swing.JLabel();
        cmbBanco = new javax.swing.JComboBox();
        txtNroCheque = new javax.swing.JTextField();
        chkCheque = new javax.swing.JCheckBox();
        lblMonto = new javax.swing.JLabel();
        btnRegistrarPago = new javax.swing.JButton();
        txtMonto = new javax.swing.JTextField();
        dteFecha = new com.toedter.calendar.JDateChooser();
        lblFecha = new javax.swing.JLabel();
        lblMonto1 = new javax.swing.JLabel();
        txtSaldoPendienteTotal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Seleccione un mecanico");

        cmbMecanicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMecanicosActionPerformed(evt);
            }
        });

        pnlTrabajos.setBorder(javax.swing.BorderFactory.createTitledBorder("Trabajos realizados"));

        tblTrabajos.setModel(mdlManoObraExterna);
        tblTrabajos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTrabajos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTrabajosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTrabajos);

        checkMostrarDeuda.setText("Mostrar solo trabajos con deuda");
        checkMostrarDeuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMostrarDeudaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTrabajosLayout = new javax.swing.GroupLayout(pnlTrabajos);
        pnlTrabajos.setLayout(pnlTrabajosLayout);
        pnlTrabajosLayout.setHorizontalGroup(
            pnlTrabajosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTrabajosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTrabajosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkMostrarDeuda)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlTrabajosLayout.setVerticalGroup(
            pnlTrabajosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTrabajosLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkMostrarDeuda))
        );

        pnlPagos.setBorder(javax.swing.BorderFactory.createTitledBorder("Historial de Pagos"));

        tblPagos.setModel(mdlPagosMecanicos);
        tblPagos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tblPagos);

        lblTotalPagado.setText("Total Pagado");

        txtTotalPagado.setEditable(false);

        lblSaldoPendiente.setText("Saldo pendiente");

        txtSaldoPendiente.setEditable(false);

        pnlRegistrarPago.setBorder(javax.swing.BorderFactory.createTitledBorder("Registrar pago"));

        lblNroCheque.setText("N??mero de Cheque");

        cmbBanco.setEnabled(false);

        txtNroCheque.setEnabled(false);

        chkCheque.setText("Pago con Cheque");
        chkCheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkChequeActionPerformed(evt);
            }
        });

        lblMonto.setText("Monto");

        btnRegistrarPago.setText("Registrar pago");
        btnRegistrarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarPagoActionPerformed(evt);
            }
        });

        txtMonto.setName("OBLIGATORIO"); // NOI18N
        txtMonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMontoActionPerformed(evt);
            }
        });

        dteFecha.setEnabled(false);
        dteFecha.setName(""); // NOI18N

        lblFecha.setText("Fecha");

        lblMonto1.setText("Banco");

        javax.swing.GroupLayout pnlRegistrarPagoLayout = new javax.swing.GroupLayout(pnlRegistrarPago);
        pnlRegistrarPago.setLayout(pnlRegistrarPagoLayout);
        pnlRegistrarPagoLayout.setHorizontalGroup(
            pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegistrarPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlRegistrarPagoLayout.createSequentialGroup()
                        .addGroup(pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkCheque)
                            .addGroup(pnlRegistrarPagoLayout.createSequentialGroup()
                                .addGroup(pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblMonto1)
                                    .addComponent(lblMonto)
                                    .addComponent(lblNroCheque))
                                .addGap(18, 18, 18)
                                .addGroup(pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMonto, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                                    .addComponent(cmbBanco, 0, 421, Short.MAX_VALUE)
                                    .addGroup(pnlRegistrarPagoLayout.createSequentialGroup()
                                        .addComponent(txtNroCheque, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblFecha)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dteFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRegistrarPagoLayout.createSequentialGroup()
                        .addComponent(btnRegistrarPago)
                        .addGap(24, 24, 24))))
        );
        pnlRegistrarPagoLayout.setVerticalGroup(
            pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegistrarPagoLayout.createSequentialGroup()
                .addGroup(pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkCheque)
                    .addGroup(pnlRegistrarPagoLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbBanco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMonto1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNroCheque)
                        .addComponent(txtNroCheque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblFecha)
                        .addComponent(dteFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlRegistrarPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMonto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRegistrarPago)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        txtSaldoPendienteTotal.setEditable(false);

        jLabel2.setText("Saldo Pendiente Total (por todos los trabajos)");

        javax.swing.GroupLayout pnlPagosLayout = new javax.swing.GroupLayout(pnlPagos);
        pnlPagos.setLayout(pnlPagosLayout);
        pnlPagosLayout.setHorizontalGroup(
            pnlPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagosLayout.createSequentialGroup()
                .addGroup(pnlPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtSaldoPendienteTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(125, 125, 125)
                .addGroup(pnlPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotalPagado)
                    .addComponent(lblSaldoPendiente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSaldoPendiente)
                    .addComponent(txtTotalPagado, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
            .addGroup(pnlPagosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlRegistrarPago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlPagosLayout.setVerticalGroup(
            pnlPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagosLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalPagado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalPagado)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSaldoPendiente)
                    .addComponent(txtSaldoPendiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSaldoPendienteTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pnlRegistrarPago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlPagos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlTrabajos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbMecanicos, 0, 479, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbMecanicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTrabajos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPagos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkChequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkChequeActionPerformed
        // TODO add your handling code here:
        txtNroCheque.setEnabled(chkCheque.isSelected());
        cmbBanco.setEnabled(chkCheque.isSelected());
        dteFecha.setEnabled(chkCheque.isSelected());
        if (chkCheque.isSelected()) {
            this.txtNroCheque.setName("OBLIGATORIO");
            this.dteFecha.setName("OBLIGATORIO");
        } else {
            this.txtNroCheque.setName("OPCIONAL");
            this.dteFecha.setName("OPCIONAL");
        }



}//GEN-LAST:event_chkChequeActionPerformed

    private void txtMontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMontoActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtMontoActionPerformed

    private void cmbMecanicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMecanicosActionPerformed
//
//        dteFecha.setEnabled(false);

                if (cmbMecanicos.getSelectedItem() != null && !cmbMecanicos.getSelectedItem().equals("")) {
            mdlManoObraExterna.limpiar();
            mdlPagosMecanicos.limpiar();
            utiles.Validaciones.limpiarCampos(this.pnlPagos);
            dteFecha.setEnabled(false);

            if (cmbMecanicos.getSelectedItem().getClass() == Mecanicos.class) {
                mecanicoSeleccionado = (Mecanicos) cmbMecanicos.getSelectedItem();

                //cargar la tabla de trabajos
                List<Manodeobraextejec> listaMano = mecanicoSeleccionado.getManodeobraextejecList();

                if (checkMostrarDeuda.isSelected()) {
                    //eliminamos las entradas sin deuda
                    List<Manodeobraextejec> listaManoAux = new LinkedList();

                    for (int i = 0; i < listaMano.size(); i++) {
                        List<Pagosmecanico> listaPagos = listaMano.get(i).getPagosmecanicoList();
                        if (listaPagos == null) {
                            //No se le realizo ningun pago
                            listaManoAux.add(listaMano.get(i));
                        } else {
                            //vemos si los pagos realizados cubren el monto de la deuda
                            double totalPagado = 0;
                            for (int j = 0; j < listaPagos.size(); j++) {
                                totalPagado += listaPagos.get(j).getMonto();
                            }
                            if (totalPagado == listaMano.get(i).getMonto()) {
                                //todavia se adeuda una parte
                                listaManoAux.add(listaMano.get(i));
                            }
                        }
                    }

                    for (int h = 0; h < listaManoAux.size(); h++) {
                        listaMano.remove(listaManoAux.get(h));
                    }


                }
                mdlManoObraExterna.agregarListaManoDeObraExterna(listaMano);




            }

            try {
                //cargamos los pagos relacionados al primer trabajo de la tabla, si existe
                //aca tengo que hacer un get de la pos filaBackUp si es que esta no es -1   
                Manodeobraextejec trabajo;
                if (filaBackUp != -1) {
                    trabajo = mdlManoObraExterna.getManoDeObraExterna(filaBackUp);
                } else {
                    trabajo = mdlManoObraExterna.getManoDeObraExterna(0);
                }

                if (trabajo != null) {
                    mdlPagosMecanicos.limpiar();
                    mdlPagosMecanicos.agregarListaPagos(trabajo.getPagosmecanicoList());
                    //seleccionamos la primer fila de la tabla
                    if (filaBackUp != -1) {
                        tblTrabajos.addRowSelectionInterval(filaBackUp, filaBackUp);
                    } else {
                        if (tblTrabajos.getRowCount() > 0) {
                            tblTrabajos.addRowSelectionInterval(0, 0);
                        }
                    }

                    //calculamos la deuda total
                    double deudaTotal = trabajo.getMonto();
                    double totalPagado = 0;
                    List<Pagosmecanico> listaPagos = trabajo.getPagosmecanicoList();
                    for (int j = 0; j < listaPagos.size(); j++) {
                        totalPagado += listaPagos.get(j).getMonto();
                    }

                    deudaTotal = deudaTotal - totalPagado;
                    this.txtTotalPagado.setText(String.valueOf(totalPagado));
                    this.txtSaldoPendiente.setText(String.valueOf(deudaTotal));

                    if (deudaTotal > 0.0) {
                        this.txtMonto.setEnabled(true);
                        this.chkCheque.setEnabled(true);
                        this.btnRegistrarPago.setEnabled(true);
//                        this.dteFecha.setEnabled(true);
                    } else {
                        //no permitir pagos!
                        this.txtMonto.setEnabled(false);
                        this.chkCheque.setEnabled(false);
//                        this.btnRegistrarPago.setEnabled(false);
//                        this.dteFecha.setEnabled(false);
                    }

                }
            } catch (Exception ex) {
                System.out.println("no habia trabajos cargados");
            }

            double deudaTotal = 0d;
            double saldoTotal = 0d;
            for (int i = 0; i < mdlManoObraExterna.getRowCount(); i++) {
                deudaTotal = deudaTotal + mdlManoObraExterna.getManoDeObraExterna(i).getMonto();

                for (int j = 0; j < mdlManoObraExterna.getManoDeObraExterna(i).getPagosmecanicoList().size(); j++) {
                    saldoTotal = saldoTotal + ((Manodeobraextejec) mdlManoObraExterna.getManoDeObraExterna(i)).getPagosmecanicoList().get(j).getMonto();
                }
            }



            saldoTotal = deudaTotal - saldoTotal;
            this.txtSaldoPendienteTotal.setText(String.valueOf(saldoTotal));

//            if (!this.txtSaldoPendiente.getText().equals("")) {
//                if (Double.parseDouble(this.txtSaldoPendiente.getText()) == 0) {
//                    this.txtSaldoPendiente.setBackground(Color.GREEN);
//                } else {
//                    this.txtSaldoPendiente.setBackground(Color.ORANGE);
//                }
//            }
//
//            if (!this.txtSaldoPendienteTotal.getText().equals("")) {
//                if (Double.parseDouble(this.txtSaldoPendienteTotal.getText()) == 0) {
//                    this.txtSaldoPendienteTotal.setBackground(Color.GREEN);
//                } else {
//                    this.txtSaldoPendienteTotal.setBackground(Color.ORANGE);
//                }
//            }


        }
    }//GEN-LAST:event_cmbMecanicosActionPerformed

    private void tblTrabajosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTrabajosMouseClicked
        int fila = tblTrabajos.getSelectedRow();
        if (fila != -1) {
            Manodeobraextejec trabajo = mdlManoObraExterna.getManoDeObraExterna(fila);
            mdlPagosMecanicos.limpiar();
            mdlPagosMecanicos.agregarListaPagos(trabajo.getPagosmecanicoList());


            //calculamos la deuda total
            double deudaTotal = trabajo.getMonto();
            double totalPagado = 0;
            List<Pagosmecanico> listaPagos = trabajo.getPagosmecanicoList();
            for (int j = 0; j < listaPagos.size(); j++) {
                totalPagado += listaPagos.get(j).getMonto();
            }

            deudaTotal = deudaTotal - totalPagado;
            this.txtTotalPagado.setText(String.valueOf(totalPagado));
            this.txtSaldoPendiente.setText(String.valueOf(deudaTotal));

            if (deudaTotal > 0.0) {
                this.txtMonto.setEnabled(true);
                this.chkCheque.setEnabled(true);
                this.btnRegistrarPago.setEnabled(true);
//                this.dteFecha.setEnabled(true);
            } else {
                //no permitir pagos!
                this.txtMonto.setEnabled(false);
                this.chkCheque.setEnabled(false);
                this.btnRegistrarPago.setEnabled(false);
                this.dteFecha.setEnabled(false);
            }

        }
    }//GEN-LAST:event_tblTrabajosMouseClicked

    private void actualizarComboMecanico() {

        Mecanicos mec = (Mecanicos) this.cmbMecanicos.getSelectedItem();
        this.cmbMecanicos.removeItem(mec);
        mec = mecJPA.findMecanicos(mec.getNroMecanico());
        this.cmbMecanicos.addItem(mec);
        this.cmbMecanicos.setSelectedItem(mec);


    }

    private void btnRegistrarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarPagoActionPerformed

//        if (Double.parseDouble(this.txtSaldoPendiente.getText()) != 0.0) {
        //no considero el cheque todavia
        if (utiles.Validaciones.controlarCamposObligatorios(this.pnlRegistrarPago)) {
            int fila = tblTrabajos.getSelectedRow();
            filaBackUp = fila;
            if (fila != -1) {
                
                    if ((Double.parseDouble(this.txtMonto.getText()) <= Double.parseDouble(this.txtSaldoPendiente.getText())) & Double.parseDouble(this.txtMonto.getText()) > 0) {
                        Manodeobraextejec trabajo = mdlManoObraExterna.getManoDeObraExterna(fila);
                        Pagosmecanico pago = new Pagosmecanico();
                        PagosmecanicoPK pagoPK = new PagosmecanicoPK();
                        PagosmecanicoJpaController pagoJPA = new PagosmecanicoJpaController();

                        pagoPK.setNroManoDeObra(trabajo.getNroManoDeObra());
                        if (trabajo.getPagosmecanicoList() == null) {
                            pagoPK.setNroPago(1);
                        } else {
                            pagoPK.setNroPago(trabajo.getPagosmecanicoList().size() + 1);
                        }

                        pago.setPagosmecanicoPK(pagoPK);
                        pago.setFecha(new Date());
                        pago.setMonto(Double.parseDouble(this.txtMonto.getText()));
                        pago.setManodeobraextejec(trabajo);



                        try {
                            pagoJPA.create(pago);
                            Chequesemitidosmecanicos cheque = new Chequesemitidosmecanicos();
                            ChequesemitidosmecanicosPK chequePK = new ChequesemitidosmecanicosPK();

                            if (chkCheque.isSelected()) {
                                if (dteFecha.getDate() != null) {
                                chequePK.setIdCheque(pago.getChequesemitidosmecanicosList().size() + 1);
                                chequePK.setNroBanco(((Bancos) this.cmbBanco.getSelectedItem()).getNroBanco());
                                chequePK.setNroManoDeObra(pago.getPagosmecanicoPK().getNroManoDeObra());
                                chequePK.setNroPago(pago.getPagosmecanicoPK().getNroPago());

                                cheque.setChequesemitidosmecanicosPK(chequePK);
                                cheque.setBancos((Bancos) this.cmbBanco.getSelectedItem());
                                cheque.setFecha(dteFecha.getDate());
                                cheque.setPagosmecanico(pago);
                                cheque.setNroCheque(this.txtNroCheque.getText());
                                chequeJPA.create(cheque);
                      
                                } else {
                                    JOptionPane.showMessageDialog(this, "Por favor, ingrese la fecha");
                             }


                           
                  
                        }

                           JOptionPane.showMessageDialog(this, "El pago se registro con exito");
                            //hay que cargar de nuevo la tabla de pagos
                            actualizarComboMecanico();



                        } catch (PreexistingEntityException ex) {
                            Logger.getLogger(PagosMecanico.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Ha ocurrido un error, consulte con el administrador del sistema");

                        } catch (Exception ex) {
                            Logger.getLogger(PagosMecanico.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Ha ocurrido un error, consulte con el administrador del sistema");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Por favor, ingrese un monto valido");
                        this.txtMonto.setText("");
                    
                    }
            }
           
        } else {
            JOptionPane.showMessageDialog(this, "Uno o mas datos obligatorios estan en blanco\r\ncomplete los mismos y vuelva a intentar");
        }

    }//GEN-LAST:event_btnRegistrarPagoActionPerformed

    private void checkMostrarDeudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMostrarDeudaActionPerformed
        if (cmbMecanicos.getSelectedIndex() != -1) {
            this.actualizarComboMecanico();
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un mecanico primero");

        }
    }//GEN-LAST:event_checkMostrarDeudaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                PagosMecanico dialog = new PagosMecanico(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrarPago;
    private javax.swing.JCheckBox checkMostrarDeuda;
    private javax.swing.JCheckBox chkCheque;
    private javax.swing.JComboBox cmbBanco;
    private javax.swing.JComboBox cmbMecanicos;
    private com.toedter.calendar.JDateChooser dteFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblMonto;
    private javax.swing.JLabel lblMonto1;
    private javax.swing.JLabel lblNroCheque;
    private javax.swing.JLabel lblSaldoPendiente;
    private javax.swing.JLabel lblTotalPagado;
    private javax.swing.JPanel pnlPagos;
    private javax.swing.JPanel pnlRegistrarPago;
    private javax.swing.JPanel pnlTrabajos;
    private javax.swing.JTable tblPagos;
    private javax.swing.JTable tblTrabajos;
    private javax.swing.JTextField txtMonto;
    private javax.swing.JTextField txtNroCheque;
    private javax.swing.JTextField txtSaldoPendiente;
    private javax.swing.JTextField txtSaldoPendienteTotal;
    private javax.swing.JTextField txtTotalPagado;
    // End of variables declaration//GEN-END:variables
}

