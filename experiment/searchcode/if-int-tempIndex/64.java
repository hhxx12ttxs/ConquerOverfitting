/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.farindika.view.panel;

import com.farindika.calculate.BOBOTANP;
import com.farindika.calculate.util.CalculateUtil;
import com.farindika.controller.MatriksPerbandinganKriteriaController;
import com.farindika.db.entity.Kriteria;
import com.farindika.db.entity.MatriksPerbandinganKriteria;
import com.farindika.view.util.CostumTableModel;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Ultra
 */
public class PenilaianKepentinganKriteriaPanel extends javax.swing.JPanel {

    /**
     * Creates new form PenilaianKepentinganKriteriaPanel
     */
    public PenilaianKepentinganKriteriaPanel() {
        initComponents();
        controller = new MatriksPerbandinganKriteriaController();
        reModelMatriks();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelMatriks = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        periksaButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lambdaLabel = new javax.swing.JLabel();
        ciLabel = new javax.swing.JLabel();
        crLabel = new javax.swing.JLabel();
        konsistensiLabel = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        labelHeader = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        berkasCombo = new javax.swing.JComboBox();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        simpanButton = new javax.swing.JButton();
        hapusButton = new javax.swing.JButton();
        inputPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        kriteria1Combo = new javax.swing.JComboBox();
        nilaiCombo = new javax.swing.JComboBox();
        kriteria2Combo = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        tambahButton = new javax.swing.JButton();

        jLabel5.setText("jLabel5");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setText("Matriks Perbandingan Berpasangan Kriteria");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(259, 259, 259)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(316, 316, 316))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6)
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        tabelMatriks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabelMatriks);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        periksaButton.setBackground(new java.awt.Color(255, 255, 255));
        periksaButton.setText("Periksa");
        periksaButton.setToolTipText("Memeriksa Konsistensi dari Nilai - Nilai Perbandingan");
        periksaButton.setBorder(null);
        periksaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periksaButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Lamda Max");

        jLabel8.setText("CI");

        jLabel9.setText("CR");

        lambdaLabel.setText("Nilai");

        ciLabel.setText("Nilai");

        crLabel.setText("Nilai");

        konsistensiLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        konsistensiLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        konsistensiLabel.setText("Konsistensi");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(konsistensiLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(periksaButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lambdaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ciLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(crLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(periksaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lambdaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(ciLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(crLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(konsistensiLabel)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jToolBar2.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        labelHeader.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelHeader.setText("Data Penilaian Kepentingan Kriteria");
        jToolBar2.add(labelHeader);
        jToolBar2.add(jSeparator3);

        jLabel1.setText("Berkas");
        jToolBar2.add(jLabel1);

        berkasCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        berkasCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                berkasComboItemStateChanged(evt);
            }
        });
        berkasCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                berkasComboActionPerformed(evt);
            }
        });
        jToolBar2.add(berkasCombo);
        jToolBar2.add(jSeparator4);

        simpanButton.setBackground(new java.awt.Color(255, 255, 255));
        simpanButton.setText("Simpan");
        simpanButton.setToolTipText("Menyimpan atau Memperbaharui Data Penilaian Kepentingan Kriteria");
        simpanButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        simpanButton.setFocusable(false);
        simpanButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        simpanButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        simpanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(simpanButton);

        hapusButton.setBackground(new java.awt.Color(255, 255, 255));
        hapusButton.setText("Hapus");
        hapusButton.setToolTipText("Menghapus Data Peniaian Kepentingan Kriteria");
        hapusButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        hapusButton.setFocusable(false);
        hapusButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hapusButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hapusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(hapusButton);

        inputPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Kriteria 1");

        jLabel3.setText("Nilai Kepentingan");

        jLabel4.setText("Kriteria 2");

        kriteria1Combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        nilaiCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "9", "8", "7", "6", "5", "4", "3", "2", "1", "0.5", "0.333333", "0.25", "0.2", "0.1666667", "0.142857", "0.125", "0.111111" }));

        kriteria2Combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nilaiCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kriteria2Combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(kriteria1Combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(kriteria1Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nilaiCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kriteria2Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tambahButton.setBackground(new java.awt.Color(255, 255, 255));
        tambahButton.setText("Tambah");
        tambahButton.setToolTipText("Menambahkan Nilai Perbandingan Kepentingan Ke Dalam Matriks Perbandingan Berpasangan");
        tambahButton.setBorder(null);
        tambahButton.setFocusable(false);
        tambahButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tambahButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tambahButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tambahButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tambahButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tambahButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahButtonActionPerformed
        // TODO add your handling code here:
        int indeksKriteria1 = kriteria1Combo.getSelectedIndex();
        int indeksKriteria2 = kriteria2Combo.getSelectedIndex();
        Double nilai = Double.parseDouble(nilaiCombo.getSelectedItem()+"");

        if(indeksKriteria1==-1||indeksKriteria2==-1||berkasCombo.getSelectedIndex()==-1)
        {
            JOptionPane.showMessageDialog(null, "kriteria 1, kriteria 2, atau berkas belum ditentukan", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            tabelMatriks.setValueAt(nilai, indeksKriteria1, indeksKriteria2+1);
            tabelMatriks.setValueAt(1/nilai, indeksKriteria2, indeksKriteria1+1);
        }
        
    }//GEN-LAST:event_tambahButtonActionPerformed

    private void simpanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanButtonActionPerformed
        // TODO add your handling code here:
        if(berkasCombo.getSelectedIndex()==-1)
        {
            JOptionPane.showMessageDialog(null, "anda belum memilih berkas", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        }
        else if(Double.parseDouble(tabelMatriks.getValueAt(0, 2)+"")==0d)
        {
            JOptionPane.showMessageDialog(null, "Matriks Perbandingan masih memiliki nilai kosong", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            save();
        }
    }//GEN-LAST:event_simpanButtonActionPerformed

    private void hapusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusButtonActionPerformed
        // TODO add your handling code here:
       if(berkasCombo.getSelectedIndex()==-1)
        {
            JOptionPane.showMessageDialog(null, "anda belum memilih berkas", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            int retValue = JOptionPane.showConfirmDialog(null, "Apakah anda yakin?", "Konfirmasi Penghapusan" , JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(retValue == 0)
            {
                delete();
                berkasCombo.setSelectedIndex(-1);
            }
        }
    }//GEN-LAST:event_hapusButtonActionPerformed

    private void berkasComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_berkasComboItemStateChanged
        // TODO add your handling code here:
       
        reModelMatriks();
    }//GEN-LAST:event_berkasComboItemStateChanged

    private void periksaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periksaButtonActionPerformed
     
        konsistensiCheck();
    }//GEN-LAST:event_periksaButtonActionPerformed

    private void berkasComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_berkasComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_berkasComboActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox berkasCombo;
    private javax.swing.JLabel ciLabel;
    private javax.swing.JLabel crLabel;
    private javax.swing.JButton hapusButton;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JTable jTable2;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JLabel konsistensiLabel;
    private javax.swing.JComboBox kriteria1Combo;
    private javax.swing.JComboBox kriteria2Combo;
    private javax.swing.JLabel labelHeader;
    private javax.swing.JLabel lambdaLabel;
    private javax.swing.JComboBox nilaiCombo;
    private javax.swing.JButton periksaButton;
    private javax.swing.JButton simpanButton;
    private javax.swing.JTable tabelMatriks;
    private javax.swing.JButton tambahButton;
    // End of variables declaration//GEN-END:variables
    /*
     * deklarasi variable yang digunakan
     */
    private MatriksPerbandinganKriteriaController controller;
    private MatriksPerbandinganKriteria matriksPerbandinganKriteria;
    private List<MatriksPerbandinganKriteria> matriksPerbandinganKriterias;
    private List<Kriteria> kriterias;
    private boolean isSaveNew = true;
    private boolean save = false;
//    private final String[] columnNames = {"id", "kriteria1", "kriteria2", "nilai kepentingan", "berkas"};
    private String [] columnNamesMatriks;
//    private Double nilaiKepentingan[][];
//    private String [][] Matriks;
    
   /*
    * fungsi untuk memeriksa konsistensi matriks pairwise
    */
    private void konsistensiCheck() 
    {
        BOBOTANP anp = new BOBOTANP();
        double [][] initMatriks = new double[kriterias.size()][kriterias.size()];
                
        for(int row = 0; row < kriterias.size(); row++)
        {
            for(int col = 1; col < kriterias.size()+1; col++)
            {
                initMatriks[row][col-1] = Double.parseDouble(tabelMatriks.getValueAt(row, col)+"");
            }
        }
        anp.setNilaiKepentinganKriteria(initMatriks);
        anp.calculatePairwiseComparisonKriteria();
        CalculateUtil.showArray(initMatriks);
        
        lambdaLabel.setText(CalculateUtil.round(anp.getLambdaMax(), 4)+"");
        ciLabel.setText(CalculateUtil.round(anp.getCI(),4)+"");
        crLabel.setText(CalculateUtil.round(anp.getCR(),4)+"");
        if(anp.getCR()>0.1)
        {
            konsistensiLabel.setText("TIDAK KONSISTEN");
        }
        else
        {
            konsistensiLabel.setText("KONSISTEN");
        }
    }
    
    /*
     * fungsi untuk me-remodel matriks pairwise
     */
    public void reModelMatriks()
    {
        matriksPerbandinganKriterias = controller.findByBerkas(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
        CostumTableModel tableModelNilai = null;
        Object [][] datas = controller.findByBerkasAll(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
//        kriterias = controller.findKriteriaAll();
        /*
         * jika matriks pairwise kosong -> list dari matriksPerbandinganKriterias kosong
         */
        if (matriksPerbandinganKriterias == null || matriksPerbandinganKriterias.isEmpty()) 
        {
             kriterias = controller.findKriteriaAll();
             String[] kriteriaArray;
             Object[][] datass;
             kriteriaArray = controller.findKriteriaAllArray();
             datass = new Object[kriteriaArray.length][kriteriaArray.length+1];
             
             /*
              * Mengatur combo box kriteria
              */
            kriteria1Combo.setModel(new DefaultComboBoxModel(controller.findNamaKriteriaAllArray()));
            kriteria1Combo.setSelectedIndex(-1);
            
            kriteria2Combo.setModel(new DefaultComboBoxModel(controller.findNamaKriteriaAllArray()));
            kriteria2Combo.setSelectedIndex(-1);
             
             columnNamesMatriks = new String[kriterias.size()+1];
             columnNamesMatriks[0] = "Kriteria";
                          
             for(int row=1;row<=kriteriaArray.length;row++)
            {
                columnNamesMatriks[row]=kriteriaArray[row-1];
            }
            
            for(int row=0;row<datass.length;row++)
            {
                datass[row][0] = kriteriaArray[row];
                for(int col=1;col <= datass.length;col++)
                {
                    if((row-col)==-1)
                    {
                        datass[row][col] = 1;
                    }
                    else
                    {
                        datass[row][col] = 0;
                    }
                }
            }
            tableModelNilai = new CostumTableModel(datass, columnNamesMatriks);
            isSaveNew = true;
        }
        
        /*
         * jika matriksPerbandinganKriterias ditemukan isinya berdasarkan berkas.
         */
        else
        {
            kriterias = controller.findKriteriaByBerkas(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
             String[] kriteriaArray;
             Object[][] datass;
             int tempIndex =0;
             kriteriaArray = controller.findKodeKriteriaByBerkasAllArray(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
             datass = new Object[kriteriaArray.length][kriteriaArray.length+1];
             
             /*
              * Mengatur combo box kriteria
              */
          
            kriteria1Combo.setModel(new DefaultComboBoxModel(controller.findNamaKriteriaByBerkasAllArray(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()))));
            kriteria1Combo.setSelectedIndex(-1);
            
            kriteria2Combo.setModel(new DefaultComboBoxModel(controller.findNamaKriteriaByBerkasAllArray(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()))));
            kriteria2Combo.setSelectedIndex(-1);
             
             columnNamesMatriks = new String[kriterias.size()+1];
             columnNamesMatriks[0] = "Kriteria";
             
            for(int row=1;row<=kriteriaArray.length;row++)
            {
                columnNamesMatriks[row]=kriteriaArray[row-1];
            }
        
            for(int row=0;row<datass.length;row++)
            {
                datass[row][0] = kriteriaArray[row];
                for(int col=1;col <= datass.length;col++)
                {
                    datass[row][col] = datas[tempIndex][4];
                    tempIndex=tempIndex+1;
                }
            }
            tableModelNilai = new CostumTableModel(datass, columnNamesMatriks);
            isSaveNew = false;
            
             /*
              * untuk mengedit nilai pada setiap kolom
              */
            boolean[] canEdit = new boolean[kriteriaArray.length+1];
            canEdit[0]=false;
            for(int i = 1; i<kriteriaArray.length+1;i++)
            {
                canEdit[i]=true;
            }
        
            tableModelNilai.setCanEdit(canEdit);
        }
        
       tabelMatriks.setModel(tableModelNilai);
  
    }
     
    public boolean isSave() 
    {
        return save;
    }

    @Override
    public void setVisible(boolean b) 
    {
        if (b) 
        {
            berkasCombo.setModel(new DefaultComboBoxModel(controller.findBerkasAllArray()));
            berkasCombo.setSelectedIndex(-1);
            
        }
        super.setVisible(b);
    }

    /*
     * fungsi untuk mengemas data kedalam paket objek sebelum disimpan kedalam tabel bersesuaian
     */
    public void packData() 
    {
        if (isSaveNew) {
            matriksPerbandinganKriterias = new ArrayList<MatriksPerbandinganKriteria>();
            kriterias = controller.getKriterias();
                    
            for (int row = 0; row < kriterias.size(); row++) 
            {
                for(int col = 1; col < kriterias.size()+1; col++)
                {
                    matriksPerbandinganKriteria= new MatriksPerbandinganKriteria();
                    matriksPerbandinganKriteria.setBerkas(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
                    matriksPerbandinganKriteria.setNilai(Double.parseDouble(tabelMatriks.getValueAt(row, col)+""));
                    matriksPerbandinganKriteria.setKriteria1(controller.findKriteriaFromComboIndex(row));
                    matriksPerbandinganKriteria.setKriteria2(controller.findKriteriaFromComboIndex(col-1));
                    matriksPerbandinganKriterias.add(matriksPerbandinganKriteria);
                }
            }
        } 
        else 
        {
            matriksPerbandinganKriterias = controller.getMatriksPerbandinganKriterias();
            kriterias = controller.getKriteriasB();
            double [] nilai = new double[matriksPerbandinganKriterias.size()];
            int tempIndex = 0;
            
            System.out.println("nilai pada sel 1 : "+ tabelMatriks.getValueAt(0, 1) + "");
            for (int row = 0; row < kriterias.size(); row++) 
            {
                for(int col = 1; col < kriterias.size()+1; col++)
                {
                    nilai[tempIndex]= Double.valueOf(tabelMatriks.getValueAt(row, col) + "");
                    tempIndex++;
                }
            }
            
            for(int i = 0; i < matriksPerbandinganKriterias.size(); i++)
            {
                matriksPerbandinganKriterias.get(i).setNilai(nilai[i]);
            }
             
        }

    }

    public void unpackData() 
    {
        if (matriksPerbandinganKriteria == null) 
        {
            return;
        }
        berkasCombo.setSelectedItem(matriksPerbandinganKriteria.getBerkas().getNama());
        kriteria1Combo.setSelectedItem(matriksPerbandinganKriteria.getKriteria1().getNama());
        kriteria2Combo.setSelectedItem(matriksPerbandinganKriteria.getKriteria2().getNama());
        nilaiCombo.setSelectedItem(matriksPerbandinganKriteria.getNilai());

    }
    
    public void save()
    {
        packData();
        if(isSaveNew)
        {
            controller.save(matriksPerbandinganKriterias);
            JOptionPane.showMessageDialog(null, "data telah disimpan", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            berkasCombo.setSelectedIndex(-1);
        }
        else
        {
            controller.update(matriksPerbandinganKriterias);
             JOptionPane.showMessageDialog(null, "data telah diedit", "Informasi", JOptionPane.INFORMATION_MESSAGE);
             berkasCombo.setSelectedIndex(-1);
        }
    }
    
    public void delete() 
    {
        controller.delete(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
 
        reModelMatriks();
    }

     
}

