/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.farindika.view.panel;

import com.farindika.calculate.BOBOTANP;
import com.farindika.calculate.util.CalculateUtil;
import com.farindika.controller.MatriksPerbandinganKriteriaController;
import com.farindika.controller.MatriksPerbandinganPengaruhKriteriaController;
import com.farindika.controller.PenilaianRelasiKriteriaController;
import com.farindika.db.entity.*;
import com.farindika.view.util.CostumTableModel;
import java.awt.Cursor;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Ultra
 */
public class PenilaianBobotANPPanel extends javax.swing.JPanel {

    /**
     * Creates new form PenilaianBobotANPPanel
     */
    public PenilaianBobotANPPanel() 
    {
        initComponents();
        controller = new MatriksPerbandinganKriteriaController();
        controllerMatriksPerbandinganPengaruhKriteria = new MatriksPerbandinganPengaruhKriteriaController();
        controllerPenilaianRelasiKriteria = new PenilaianRelasiKriteriaController();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        berkasCombo = new javax.swing.JComboBox();
        pilihButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        ANPPanelTab = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        prioritasTanpaInterdependenceTabel = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        prioritasInterdependenceKriteria = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        prioritasDenganInterdependenceTabel = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Pembobotan Kriteria ANP");
        jToolBar1.add(jLabel2);
        jToolBar1.add(jSeparator1);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Berkas");
        jToolBar1.add(jLabel1);

        berkasCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        berkasCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                berkasComboItemStateChanged(evt);
            }
        });
        jToolBar1.add(berkasCombo);

        pilihButton.setBackground(new java.awt.Color(255, 255, 255));
        pilihButton.setText("Pilih");
        pilihButton.setToolTipText("Memilih Berkas yang akan digunakan");
        pilihButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pilihButton.setFocusable(false);
        pilihButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pilihButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pilihButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pilihButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(pilihButton);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ANPPanelTab.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        prioritasTanpaInterdependenceTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(prioritasTanpaInterdependenceTabel);

        ANPPanelTab.addTab("Bobot Prioritas Kriteria tanpa Interdependence", jScrollPane2);

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));

        prioritasInterdependenceKriteria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(prioritasInterdependenceKriteria);

        ANPPanelTab.addTab("Bobot Prioritas Interdependence Kriteria", jScrollPane3);

        jScrollPane4.setBackground(new java.awt.Color(255, 255, 255));

        prioritasDenganInterdependenceTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(prioritasDenganInterdependenceTabel);

        ANPPanelTab.addTab("Bobot Prioritas Kriteria dengan Interdependence", jScrollPane4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ANPPanelTab, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ANPPanelTab, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void berkasComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_berkasComboItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_berkasComboItemStateChanged

    private void pilihButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pilihButtonActionPerformed
        // TODO add your handling code here:
        
        Cursor hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);
        setCursor(hourglassCursor);
        calculateBobotTanpaInterdependence();
        calculateBobotInterdependeceKriteria();
        calculateBobotDenganInterdependence();
        Cursor normalCursor = new Cursor(Cursor.DEFAULT_CURSOR);
        setCursor(normalCursor);
    }//GEN-LAST:event_pilihButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane ANPPanelTab;
    private javax.swing.JComboBox berkasCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton pilihButton;
    private javax.swing.JTable prioritasDenganInterdependenceTabel;
    private javax.swing.JTable prioritasInterdependenceKriteria;
    private javax.swing.JTable prioritasTanpaInterdependenceTabel;
    // End of variables declaration//GEN-END:variables
    private MatriksPerbandinganKriteriaController controller;
    private MatriksPerbandinganPengaruhKriteriaController controllerMatriksPerbandinganPengaruhKriteria;
    private PenilaianRelasiKriteriaController controllerPenilaianRelasiKriteria;
    private List<MatriksPerbandinganKriteria> matriksPerbandinganKriterias;
    private List<Kriteria> kriterias;
    private String []columnNamesMatriks;
    public double []bobotKriterias;   
//    private MatriksPerbandinganPengaruhKriteria matriksPerbandinganPengaruhKriteria;
    private String[] columnNamesBobotInterdependence;
    private String[] columnNamesBobotKriteriaInterdependence;
    public String [][] matriksInterdependenceString;
    public double [][] matriksInterdependenceDouble;
    public static double[] bobotKriteriasDenganInterdependence;
    public static Berkas berkas;
  

    public void calculateBobotTanpaInterdependence()
    {
        berkas = controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex());
        matriksPerbandinganKriterias = controller.findByBerkas(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
        CostumTableModel tableModelNilai = null;
        Object [][] datas = controller.findByBerkasAll(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
//        kriterias = controller.findKriteriaAll();
        kriterias = controller.findKriteriaByBerkas(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
        BOBOTANP anp = new BOBOTANP();
        double [][] initMatriks = new double[kriterias.size()][kriterias.size()];
        
        /*
         * jika matriks pairwise kosong -> list dari matriksPerbandinganKriterias kosong
         */
        
        if (matriksPerbandinganKriterias == null || matriksPerbandinganKriterias.isEmpty()) 
        {
            Object[][] matriksData;
            String[] kriteriaArray;
            kriteriaArray = controller.findNamaKriteriaAllArray();
            matriksData = new Object[kriteriaArray.length][2];
            
            columnNamesMatriks = new String[1];
            columnNamesMatriks[0] = "Tabel Data";
           
             
            tableModelNilai = new CostumTableModel(matriksData, columnNamesMatriks);
            prioritasTanpaInterdependenceTabel.setModel(tableModelNilai);
            prioritasInterdependenceKriteria.setModel(tableModelNilai);
            prioritasDenganInterdependenceTabel.setModel(tableModelNilai);
                             
            for(int row = 0; row < kriterias.size(); row++)
            {
                for(int col = 0; col < 2; col++)
                {
                    if(col == 0)
                    {
                        matriksData[row][col]= kriteriaArray[row];
                    }
                    else
                    {
                        matriksData[row][col]=0;
                    }
                }
            }
            bobotKriteriasDenganInterdependence = null;
            JOptionPane.showMessageDialog(null, "Berkas yang anda pilih belum memiliki nilai kepentingan", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        }
        
         /*
         * jika matriksPerbandinganKriterias ditemukan isinya berdasarkan berkas.
         */
        else
        {
             Object[][] matriksData;
             String[] kriteriaArray;
             Object[][] datass;
             int tempIndex =0;
//             kriteriaArray = controller.findNamaKriteriaAllArray();
             kriteriaArray = controller.findNamaKriteriaByBerkasAllArray(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
             matriksData = new Object[kriteriaArray.length][2];
            
             datass = new Object[kriteriaArray.length][kriteriaArray.length];
             //columnNamesMatriks = new String[kriterias.size()+1];
             columnNamesMatriks = new String[2];
             columnNamesMatriks[0] = "Kriteria";
             columnNamesMatriks[1] = "Prioritas";
             
                  
            for(int row=0;row<datass.length;row++)
            {
                //datass[row][0] = kriteriaArray[row];
                for(int col=0;col < datass.length;col++)
                {
                    datass[row][col] = Double.parseDouble(datas[tempIndex][4]+"");
                    tempIndex=tempIndex+1;
                }
            }
            
            for(int row = 0; row < kriterias.size(); row++)
            {
                for(int col = 0; col < kriterias.size(); col++)
                {
                    initMatriks[row][col] = Double.parseDouble(datass[row][col]+"");
                }
            }
            anp.setNilaiKepentinganKriteria(initMatriks);
            anp.calculatePairwiseComparisonKriteria();
            bobotKriterias = anp.getHasilPairwiseComparisonKriteria();
                     
            for(int row = 0; row < kriterias.size(); row++)
            {
                for(int col = 0; col < 2; col++)
                {
                    if(col == 0)
                    {
                        matriksData[row][col]= kriteriaArray[row];
                    }
                    else
                    {
                        matriksData[row][col]=CalculateUtil.round(bobotKriterias[row],4)+"";
                    }
                }
            }
            
            tableModelNilai = new CostumTableModel(matriksData, columnNamesMatriks);
            prioritasTanpaInterdependenceTabel.setModel(tableModelNilai);
        }
       
    }
    
    public void calculateBobotInterdependeceKriteria()
    {
        CostumTableModel tableModel = null;
        double [] bobotInterdependence;
//        kriterias = controller.findKriteriaAll();
        kriterias = controller.findKriteriaByBerkas(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
        matriksInterdependenceString = new String[kriterias.size()][kriterias.size()+1];
        matriksInterdependenceDouble = new double[kriterias.size()][kriterias.size()];
        BOBOTANP anp = new BOBOTANP();
        int tempIndexKriteria = 0;
        
        for(int row = 0; row<kriterias.size();row++)
        {
            for(int col=0; col<kriterias.size();col++)
            {
                matriksInterdependenceDouble[row][col]=0;
                matriksInterdependenceString[row][col+1]="0";
            }
        }
            
               
        for(int i = 0; i<kriterias.size(); i++)
        {
            Object [][] datas = controllerMatriksPerbandinganPengaruhKriteria.findByBerkasKTDipengaruhiAll(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()),controller.findKriteriaBerkasFromComboIndex(i));

            System.out.println("Jumlah data "+datas.length+" index berkas "+controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex())+" index kriteria "+controller.findKriteriaBerkasFromComboIndex(i));
            
            //            String[] kriteriaArray = controller.findNamaKriteriaAllArray();             
            String[] kriteriaArray = controller.findNamaKriteriaByBerkasAllArray(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));             
            String[] kriteriaMempengaruhiArray;
            double[][] dataNilai;
            int tempIndex=0;
            kriteriaMempengaruhiArray = controllerPenilaianRelasiKriteria.findNamaKriteriaMempengaruhiAllArray(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()), controller.findKriteriaBerkasFromComboIndex(i));
        
            dataNilai = new double[kriteriaMempengaruhiArray.length][kriteriaMempengaruhiArray.length];

            try
            {
                for(int row=0;row<dataNilai.length;row++)
                {
                
                    for(int col=0;col < dataNilai.length;col++)
                    {
                        dataNilai[row][col] = Double.parseDouble(datas[tempIndex][3]+"");
                        tempIndex=tempIndex+1;
                    }
                }
            }
                      
            catch(Exception e)
            {
                System.out.println("errornya adalah "+ e.getMessage());
            }
            
            anp.setNilaiKepentinganKriteria(dataNilai);
            anp.calculatePairwiseComparisonKriteria();
            bobotInterdependence = anp.getHasilPairwiseComparisonKriteria();
            
            for(int k=0; k<kriterias.size();k++)
            {
                for(int j = 0; j<kriteriaMempengaruhiArray.length;j++)
                {
                    if(kriteriaArray[k].equalsIgnoreCase(kriteriaMempengaruhiArray[j]))
                    {
                        matriksInterdependenceDouble[k][tempIndexKriteria]=bobotInterdependence[j];
                    }
                }
            }
            tempIndexKriteria++;
        }
        
        columnNamesBobotInterdependence = new String[kriterias.size()+1];
//        String[] kriteriaArray = controller.findKriteriaAllArray();
        String[] kriteriaArray = controller.findKodeKriteriaByBerkasAllArray(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
        columnNamesBobotInterdependence[0] = "Kriteria";
        for(int i = 1; i<columnNamesBobotInterdependence.length;i++)
        {
            columnNamesBobotInterdependence[i]=kriteriaArray[i-1];
        }
        
        for(int row = 0; row < kriterias.size();row++)
        {
            matriksInterdependenceString[row][0]=kriteriaArray[row];
            for(int col = 1; col <= kriterias.size(); col++)
            {
                matriksInterdependenceString[row][col]=CalculateUtil.round(matriksInterdependenceDouble[row][col-1],4)+"";
            }
        }
       tableModel = new CostumTableModel(matriksInterdependenceString, columnNamesBobotInterdependence);
       prioritasInterdependenceKriteria.setModel(tableModel);
    }
    
    public void calculateBobotDenganInterdependence()
    {
        
        
        BOBOTANP anp = new BOBOTANP();
        kriterias = controller.findKriteriaByBerkas(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));
        CostumTableModel tableModel = null;
//        double [] bobotInterdependence;
        String [][] matriksDataKriteriaInterdependence = new String[kriterias.size()][2];
//        kriterias = controller.findKriteriaAll();
        String [] kriteriaArray = new String[kriterias.size()];
        kriteriaArray = controller.findNamaKriteriaByBerkasAllArray(controller.findBerkasFromComboIndex(berkasCombo.getSelectedIndex()));             
        bobotKriteriasDenganInterdependence = new double[kriterias.size()];
        columnNamesBobotKriteriaInterdependence = new String[2];
        columnNamesBobotKriteriaInterdependence[0]="Kriteria";
        columnNamesBobotKriteriaInterdependence[1]="Bobot dengan Interdependence";
        
        anp.setHasilPairwiseComparisonKriteria(bobotKriterias);
        anp.setBobotRelatifinterdependence(matriksInterdependenceDouble);
        
        anp.calculateBobotRelatifKriteria();
        
        bobotKriteriasDenganInterdependence = anp.getBobotRelatifKriteria();
        
        CalculateUtil.showArray(bobotKriteriasDenganInterdependence);
                
        for(int row = 0; row < kriterias.size(); row++)
            {
                for(int col = 0; col < 2; col++)
                {
                    if(col == 0)
                    {
                        matriksDataKriteriaInterdependence[row][col]= kriteriaArray[row];
                    }
                    else
                    {
                        matriksDataKriteriaInterdependence[row][col]=CalculateUtil.round(bobotKriteriasDenganInterdependence[row],4)+"";
                    }
                }
            }
        tableModel= new CostumTableModel(matriksDataKriteriaInterdependence, columnNamesBobotKriteriaInterdependence);
        prioritasDenganInterdependenceTabel.setModel(tableModel);
        
    }

    public double[] getBobotKriteriasDenganInterdependence() {
        return bobotKriteriasDenganInterdependence;
    }

    public static Berkas getBerkas() {
        return berkas;
    }
    
       
    @Override
    public void setVisible(boolean b) 
    {
        if (b) 
        {
            berkasCombo.setModel(new DefaultComboBoxModel(controller.findBerkasAllArray()));
            berkasCombo.setSelectedIndex(-1);
        }
        super.setVisible(b);
    }    
}

