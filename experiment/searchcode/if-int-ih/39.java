package groovesquid.gui.style;

import groovesquid.gui.*;
import groovesquid.*;
import groovesquid.util.Utils;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.ComboBoxUI;
import javax.swing.plaf.basic.*;



/**
 *
 * @author Maino
 */

public class Flat extends GUI {
    
    private ArrayList<String> autocompleteList = new ArrayList<String>();
    private String searchTextFieldOriginal;

    private ImageIcon minimizeButtonImage, minimizeButtonHoverImage, maximizeButtonImage, maximizeButtonHoverImage, closeButtonImage, closeButtonHoverImage, blueArrowSouth, smallBlueArrowSouth, blueArrowNorth, smallBlueArrowNorth, orangeArrowSouth, smallOrangeArrowSouth, orangeArrowNorth, smallOrangeArrowNorth, facebookIcon, twitterIcon;
    private Image blueButton, blueButtonHover, blueButtonPressed, orangeButton, orangeButtonHover, orangeButtonPressed, dividerImage;

    private static Point point = new Point();
    
    /**
     * Creates new form GUI
     */
    public Flat() {
        UIManager.put("ComboBox.selectionBackground", new ColorUIResource(76, 180, 249));
        UIManager.put("ComboBox.selectionForeground", new ColorUIResource(Color.WHITE));
        UIManager.put("ComboBox.background", new ColorUIResource(Color.WHITE));
        //UIManager.put("ComboBox.disabledBackground", new ColorUIResource(Color.WHITE));
        
        // load images
        loadResources();
        
        // initialize
        initComponents();
        
        // GUI class init
        initGui();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchTablePopupMenu = new javax.swing.JPopupMenu();
        downloadMenuItem = new javax.swing.JMenuItem();
        playMenuItem = new javax.swing.JMenuItem();
        downloadTablePopupMenu = new javax.swing.JPopupMenu();
        removeFromListMenuItem = new javax.swing.JMenuItem();
        removeFromDiskMenuItem = new javax.swing.JMenuItem();
        openFileMenuItem = new javax.swing.JMenuItem();
        openDirectoryMenuItem = new javax.swing.JMenuItem();
        airPlayPopupMenu = new javax.swing.JPopupMenu();
        playerPanel = new javax.swing.JPanel();
        playPauseButton = new javax.swing.JButton();
        currentDurationLabel = new javax.swing.JLabel();
        currentlyPlayingLabel = new javax.swing.JLabel();
        trackSlider = new javax.swing.JSlider();
        durationLabel = new javax.swing.JLabel();
        albumCoverLabel = new javax.swing.JLabel();
        volumeSlider = new javax.swing.JSlider();
        volumeOffLabel = new javax.swing.JLabel();
        volumeOnLabel = new javax.swing.JLabel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        splitPane = new javax.swing.JSplitPane();
        searchPanel = new javax.swing.JPanel();
        searchScrollPane = new javax.swing.JScrollPane();
        searchTable = new StripedTable();
        downloadButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        searchTypeComboBox = new javax.swing.JComboBox();
        searchButton = new javax.swing.JButton();
        searchTextField = new JSuggestField(this, autocompleteList);
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        downloadPanel = new javax.swing.JPanel();
        removeFromDiskButton = new javax.swing.JButton();
        removeFromListButton = new javax.swing.JButton();
        downloadScrollPane = new javax.swing.JScrollPane();
        downloadTable =  new StripedTable()
        ;
        selectComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        retryFailedDownloadsButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        titleBarPanel = new javax.swing.JPanel();
        titleBarLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        minimizeButton = new javax.swing.JButton();
        maximizeButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        twitterLabel = new javax.swing.JLabel();
        facebookLabel = new javax.swing.JLabel();
        donateLabel = new javax.swing.JLabel();
        adScrollPane = new javax.swing.JScrollPane();
        adPane = new javax.swing.JEditorPane();

        downloadMenuItem.setText("Download");
        downloadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadMenuItemActionPerformed(evt);
            }
        });
        searchTablePopupMenu.add(downloadMenuItem);

        playMenuItem.setText("Play");
        playMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playMenuItemActionPerformed(evt);
            }
        });
        searchTablePopupMenu.add(playMenuItem);

        removeFromListMenuItem.setText("Remove from list");
        removeFromListMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromListMenuItemActionPerformed(evt);
            }
        });
        downloadTablePopupMenu.add(removeFromListMenuItem);

        removeFromDiskMenuItem.setText("Remove from disk");
        removeFromDiskMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromDiskMenuItemActionPerformed(evt);
            }
        });
        downloadTablePopupMenu.add(removeFromDiskMenuItem);

        openFileMenuItem.setText("Open File");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        downloadTablePopupMenu.add(openFileMenuItem);

        openDirectoryMenuItem.setText("Open Directory");
        openDirectoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDirectoryMenuItemActionPerformed(evt);
            }
        });
        downloadTablePopupMenu.add(openDirectoryMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Groovesquid");
        setBackground(new java.awt.Color(204, 204, 204));
        setLocationByPlatform(true);
        setName("guiFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosingEvent(evt);
            }
        });

        playerPanel.setBackground(new java.awt.Color(145, 2, 146));
        playerPanel.setForeground(new java.awt.Color(255, 255, 255));
        playerPanel.setPreferredSize(new java.awt.Dimension(673, 60));

        playPauseButton.setIcon(playIcon);
        playPauseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        playPauseButton.setContentAreaFilled(false);
        playPauseButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        playPauseButton.setFocusable(false);
        playPauseButton.setRequestFocusEnabled(false);
        playPauseButton.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        playPauseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                playPauseButtonMousePressed(evt);
            }
        });
        playPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPauseButtonActionPerformed(evt);
            }
        });

        currentDurationLabel.setFont(new java.awt.Font("Lucida Grande", 0, 9)); // NOI18N
        currentDurationLabel.setForeground(new java.awt.Color(255, 255, 255));
        currentDurationLabel.setText("00:00");
        currentDurationLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 3));

        currentlyPlayingLabel.setForeground(new java.awt.Color(255, 255, 255));

        trackSlider.setUI(new SquidSliderUI(trackSlider, 11));
        trackSlider.setBackground(new java.awt.Color(145, 2, 146));
        trackSlider.setValue(0);
        trackSlider.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 6, 0));
        trackSlider.setEnabled(false);
        trackSlider.setFocusable(false);
        trackSlider.setRequestFocusEnabled(false);
        trackSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                trackSliderMouseDragged(evt);
            }
        });

        durationLabel.setFont(new java.awt.Font("Lucida Grande", 0, 9)); // NOI18N
        durationLabel.setForeground(new java.awt.Color(255, 255, 255));
        durationLabel.setText("00:00");
        durationLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 3, 0, 10));

        albumCoverLabel.setBackground(new java.awt.Color(230, 230, 230));
        albumCoverLabel.setOpaque(true);

        volumeSlider.setUI(new SquidSliderUI(volumeSlider, 7));
        volumeSlider.setBackground(new java.awt.Color(145, 2, 146));
        volumeSlider.setMaximum(0);
        volumeSlider.setMinimum(-2000);
        volumeSlider.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 5, 0));
        volumeSlider.setFocusable(false);
        volumeSlider.setRequestFocusEnabled(false);
        volumeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volumeSliderStateChanged(evt);
            }
        });

        volumeOffLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/volumeOff.png"))); // NOI18N

        volumeOnLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/volumeOn.png"))); // NOI18N

        previousButton.setIcon(previousIcon);
        previousButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        previousButton.setContentAreaFilled(false);
        previousButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        previousButton.setFocusable(false);
        previousButton.setRequestFocusEnabled(false);
        previousButton.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        previousButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                previousButtonMousePressed(evt);
            }
        });
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setIcon(nextIcon);
        nextButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        nextButton.setContentAreaFilled(false);
        nextButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        nextButton.setFocusable(false);
        nextButton.setRequestFocusEnabled(false);
        nextButton.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        nextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                nextButtonMousePressed(evt);
            }
        });
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playerPanelLayout = new javax.swing.GroupLayout(playerPanel);
        playerPanel.setLayout(playerPanelLayout);
        playerPanelLayout.setHorizontalGroup(
            playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playPauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(currentlyPlayingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(volumeOffLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(volumeOnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(currentDurationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(trackSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(durationLabel)
                .addGap(63, 63, 63)
                .addComponent(albumCoverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        playerPanelLayout.setVerticalGroup(
            playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(previousButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(playPauseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playerPanelLayout.createSequentialGroup()
                .addGroup(playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(currentDurationLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(volumeOnLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(volumeOffLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trackSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(volumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentlyPlayingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(durationLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1))
            .addComponent(albumCoverLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        splitPane.setUI(new BasicSplitPaneUI() {
            public BasicSplitPaneDivider createDefaultDivider() {
                return new BasicSplitPaneDivider(this) {
                    public void setBorder(Border b) {
                        //b = BorderFactory.createEmptyBorder(2, 0, 2, 0);
                    }

                    @Override
                    public void paint(Graphics g) {
                        int iw = dividerImage.getWidth(this);
                        int ih = dividerImage.getHeight(this);
                        if (iw > 0 && ih > 0) {
                            for (int x = 0; x < getWidth(); x += iw) {
                                for (int y = 0; y < 1; y += ih) {
                                    g.drawImage(dividerImage, x, y, iw, ih, this);
                                }
                            }
                        }
                        super.paint(g);
                    }
                };
            }
        });
        splitPane.setBorder(null);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setResizeWeight(0.5);
        splitPane.setFocusable(false);
        splitPane.setOpaque(false);
        splitPane.setRequestFocusEnabled(false);

        searchPanel.setOpaque(false);

        searchScrollPane.getVerticalScrollBar().setUI(SquidScrollBarUI.createUI(searchScrollPane, blueArrowSouth, blueArrowNorth, new ColorUIResource(52,152,219)));
        searchScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        searchScrollPane.setOpaque(false);

        searchTable.getTableHeader().setDefaultRenderer(new TableHeaderCellRenderer(searchTable.getTableHeader().getDefaultRenderer(), new Color(52, 152, 219)));
        searchTable.setAutoCreateRowSorter(true);
        searchTable.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        searchTable.setModel(new groovesquid.gui.SongSearchTableModel());
        searchTable.setFillsViewportHeight(true);
        searchTable.setGridColor(new java.awt.Color(204, 204, 204));
        searchTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        searchTable.setRowHeight(20);
        searchTable.setSelectionBackground(new java.awt.Color(15, 152, 219));
        searchTable.setShowHorizontalLines(false);
        searchTable.setShowVerticalLines(false);
        searchTable.getTableHeader().setReorderingAllowed(false);
        searchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                searchTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                searchTableMouseReleased(evt);
            }
        });
        searchScrollPane.setViewportView(searchTable);

        downloadButton.setIcon(Utils.stretchImage(blueButton, 90, 27, this));
        downloadButton.setRolloverIcon(Utils.stretchImage(blueButtonHover, 90, 27, this));
        downloadButton.setPressedIcon(Utils.stretchImage(blueButtonPressed, 90, 27, this));
        downloadButton.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        downloadButton.setForeground(new java.awt.Color(255, 255, 255));
        downloadButton.setText(Main.getLocaleString("DOWNLOAD"));
        downloadButton.setBorder(null);
        downloadButton.setBorderPainted(false);
        downloadButton.setContentAreaFilled(false);
        downloadButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        downloadButton.setEnabled(false);
        downloadButton.setFocusable(false);
        downloadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downloadButton.setRequestFocusEnabled(false);
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        playButton.setIcon(Utils.stretchImage(blueButton, 90, 27, this));
        playButton.setRolloverIcon(Utils.stretchImage(blueButtonHover, 90, 27, this));
        playButton.setPressedIcon(Utils.stretchImage(blueButtonPressed, 90, 27, this));
        playButton.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        playButton.setForeground(new java.awt.Color(255, 255, 255));
        playButton.setText(Main.getLocaleString("PLAY"));
        playButton.setBorder(null);
        playButton.setBorderPainted(false);
        playButton.setContentAreaFilled(false);
        playButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        playButton.setEnabled(false);
        playButton.setFocusable(false);
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setRequestFocusEnabled(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        searchTypeComboBox.setUI(ColorArrowUI.createUI(searchTypeComboBox, blueArrowSouth));
        DefaultComboBoxModel searchTypeComboBoxModel = new DefaultComboBoxModel();
        searchTypeComboBox.setModel(searchTypeComboBoxModel);
        searchTypeComboBoxModel.addElement(Main.getLocaleString("SONGS"));
        searchTypeComboBoxModel.addElement(Main.getLocaleString("POPULAR"));
        searchTypeComboBoxModel.addElement(Main.getLocaleString("ALBUMS"));
        searchTypeComboBoxModel.addElement(Main.getLocaleString("PLAYLISTS"));
        searchTypeComboBoxModel.addElement(Main.getLocaleString("ARTISTS"));
        searchTypeComboBox.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        searchTypeComboBox.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(52, 152, 219)), javax.swing.BorderFactory.createMatteBorder(0, 5, 0, 0, new java.awt.Color(255, 255, 255))));
        searchTypeComboBox.setEnabled(false);
        searchTypeComboBox.setFocusable(false);
        searchTypeComboBox.setPreferredSize(new java.awt.Dimension(63, 26));
        searchTypeComboBox.setRequestFocusEnabled(false);
        searchTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTypeComboBoxActionPerformed(evt);
            }
        });

        searchButton.setIcon(Utils.stretchImage(blueButton, 90, 27, this));
        searchButton.setRolloverIcon(Utils.stretchImage(blueButtonHover, 90, 27, this));
        searchButton.setPressedIcon(Utils.stretchImage(blueButtonPressed, 90, 27, this));
        searchButton.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText(Main.getLocaleString("SEARCH"));
        searchButton.setBorder(null);
        searchButton.setBorderPainted(false);
        searchButton.setContentAreaFilled(false);
        searchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchButton.setEnabled(false);
        searchButton.setFocusable(false);
        searchButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchButton.setPreferredSize(new java.awt.Dimension(90, 27));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchTextField.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        searchTextField.setText(Main.getLocaleString("LOADING"));
        searchTextField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(52, 152, 219)), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5)));
        searchTextField.setEnabled(false);
        searchTextField.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                searchTextFieldComponentResized(evt);
            }
        });
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(52, 152, 219)));
        jPanel3.setOpaque(false);

        jLabel3.setBackground(new java.awt.Color(52, 152, 219));
        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText(Main.getLocaleString("SEARCH").toUpperCase());
        jLabel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        jLabel3.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(searchTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchPanelLayout.createSequentialGroup()
                                .addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(searchTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addContainerGap())
        );

        splitPane.setTopComponent(searchPanel);

        downloadPanel.setOpaque(false);

        removeFromDiskButton.setIcon(Utils.stretchImage(orangeButton, 151, 27, this));
        removeFromDiskButton.setRolloverIcon(Utils.stretchImage(orangeButtonHover, 151, 27, this));
        removeFromDiskButton.setPressedIcon(Utils.stretchImage(orangeButtonPressed, 151, 27, this));
        removeFromDiskButton.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        removeFromDiskButton.setForeground(new java.awt.Color(255, 255, 255));
        removeFromDiskButton.setText(Main.getLocaleString("REMOVE_FROM_DISK"));
        removeFromDiskButton.setBorder(null);
        removeFromDiskButton.setBorderPainted(false);
        removeFromDiskButton.setContentAreaFilled(false);
        removeFromDiskButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        removeFromDiskButton.setEnabled(false);
        removeFromDiskButton.setFocusable(false);
        removeFromDiskButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeFromDiskButton.setRequestFocusEnabled(false);
        removeFromDiskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromDiskButtonActionPerformed(evt);
            }
        });

        removeFromListButton.setIcon(Utils.stretchImage(orangeButton, 148, 27, this));
        removeFromListButton.setRolloverIcon(Utils.stretchImage(orangeButtonHover, 148, 27, this));
        removeFromListButton.setPressedIcon(Utils.stretchImage(orangeButtonPressed, 148, 27, this));
        removeFromListButton.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        removeFromListButton.setForeground(new java.awt.Color(255, 255, 255));
        removeFromListButton.setText(Main.getLocaleString("REMOVE_FROM_LIST"));
        removeFromListButton.setBorder(null);
        removeFromListButton.setBorderPainted(false);
        removeFromListButton.setContentAreaFilled(false);
        removeFromListButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        removeFromListButton.setEnabled(false);
        removeFromListButton.setFocusable(false);
        removeFromListButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeFromListButton.setRequestFocusEnabled(false);
        removeFromListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromListButtonActionPerformed(evt);
            }
        });

        downloadScrollPane.getVerticalScrollBar().setUI(SquidScrollBarUI.createUI(downloadScrollPane, orangeArrowSouth, orangeArrowNorth, new ColorUIResource(243,156,18)));
        downloadScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        downloadScrollPane.setOpaque(false);

        downloadTable.getTableHeader().setDefaultRenderer(new TableHeaderCellRenderer(downloadTable.getTableHeader().getDefaultRenderer(), new Color(243, 156, 18)));
        downloadTable.setAutoCreateRowSorter(true);
        downloadTable.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        downloadTable.setModel(new groovesquid.gui.DownloadTableModel());
        downloadTable.getColumnModel().getColumn(5).setCellRenderer(new ProgressCellRenderer());
        downloadTable.getColumnModel().getColumn(5).setMinWidth(250);
        downloadTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        downloadTable.setFillsViewportHeight(true);
        downloadTable.setGridColor(new java.awt.Color(204, 204, 204));
        downloadTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        downloadTable.setRowHeight(20);
        downloadTable.setSelectionBackground(new java.awt.Color(243, 156, 18));
        downloadTable.setShowHorizontalLines(false);
        downloadTable.setShowVerticalLines(false);
        downloadTable.getTableHeader().setReorderingAllowed(false);
        downloadTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                downloadTableMouseReleased(evt);
            }
        });
        downloadTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                downloadTableKeyReleased(evt);
            }
        });
        downloadScrollPane.setViewportView(downloadTable);

        selectComboBox.setUI(ColorArrowUI.createUI(selectComboBox, orangeArrowSouth));
        DefaultComboBoxModel selectComboBoxModel = new DefaultComboBoxModel();
        selectComboBox.setModel(selectComboBoxModel);
        selectComboBoxModel.addElement(Main.getLocaleString("SELECT"));
        selectComboBoxModel.addElement(Main.getLocaleString("ALL"));
        selectComboBoxModel.addElement(Main.getLocaleString("COMPLETED"));
        selectComboBoxModel.addElement(Main.getLocaleString("FAILED"));
        selectComboBox.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        selectComboBox.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(243, 156, 18)), javax.swing.BorderFactory.createMatteBorder(0, 5, 0, 0, new java.awt.Color(255, 255, 255))));
        selectComboBox.setFocusable(false);
        selectComboBox.setPreferredSize(new java.awt.Dimension(74, 26));
        selectComboBox.setRequestFocusEnabled(false);
        selectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectComboBoxActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(243, 156, 18)));
        jPanel2.setOpaque(false);

        jLabel2.setBackground(new java.awt.Color(243, 156, 18));
        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText(Main.getLocaleString("DOWNLOADS").toUpperCase());
        jLabel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        jLabel2.setOpaque(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
        );

        retryFailedDownloadsButton.setIcon(Utils.stretchImage(orangeButton, 151, 27, this));
        retryFailedDownloadsButton.setRolloverIcon(Utils.stretchImage(orangeButtonHover, 151, 27, this));
        retryFailedDownloadsButton.setPressedIcon(Utils.stretchImage(orangeButtonPressed, 151, 27, this));
        retryFailedDownloadsButton.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        retryFailedDownloadsButton.setForeground(new java.awt.Color(255, 255, 255));
        retryFailedDownloadsButton.setText(Main.getLocaleString("RETRY_FAILED_DOWNLOADS"));
        retryFailedDownloadsButton.setBorder(null);
        retryFailedDownloadsButton.setBorderPainted(false);
        retryFailedDownloadsButton.setContentAreaFilled(false);
        retryFailedDownloadsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        retryFailedDownloadsButton.setFocusable(false);
        retryFailedDownloadsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        retryFailedDownloadsButton.setRequestFocusEnabled(false);
        retryFailedDownloadsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retryFailedDownloadsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout downloadPanelLayout = new javax.swing.GroupLayout(downloadPanel);
        downloadPanel.setLayout(downloadPanelLayout);
        downloadPanelLayout.setHorizontalGroup(
            downloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(downloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(downloadPanelLayout.createSequentialGroup()
                        .addComponent(removeFromListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeFromDiskButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(retryFailedDownloadsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(downloadScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        downloadPanelLayout.setVerticalGroup(
            downloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(downloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(selectComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addGroup(downloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(removeFromListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(removeFromDiskButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(retryFailedDownloadsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addContainerGap())
        );

        splitPane.setBottomComponent(downloadPanel);

        jPanel1.setBackground(new java.awt.Color(230, 230, 230));
        jPanel1.setPreferredSize(new java.awt.Dimension(892, 44));

        titleBarPanel.setBackground(new java.awt.Color(255, 255, 255));
        titleBarPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(198, 2, 196)));
        titleBarPanel.setPreferredSize(new java.awt.Dimension(0, 24));

        closeButton.setIcon(closeButtonImage);
        closeButton.setRolloverIcon(closeButtonHoverImage);
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setFocusPainted(false);
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });

        minimizeButton.setIcon(minimizeButtonImage);
        minimizeButton.setRolloverIcon(minimizeButtonHoverImage);
        minimizeButton.setBorderPainted(false);
        minimizeButton.setContentAreaFilled(false);
        minimizeButton.setFocusPainted(false);
        minimizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimizeButtonActionPerformed(evt);
            }
        });

        maximizeButton.setIcon(maximizeButtonImage);
        maximizeButton.setRolloverIcon(maximizeButtonHoverImage);
        maximizeButton.setBorderPainted(false);
        maximizeButton.setContentAreaFilled(false);
        maximizeButton.setFocusPainted(false);
        maximizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximizeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout titleBarPanelLayout = new javax.swing.GroupLayout(titleBarPanel);
        titleBarPanel.setLayout(titleBarPanelLayout);
        titleBarPanelLayout.setHorizontalGroup(
            titleBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titleBarPanelLayout.createSequentialGroup()
                .addComponent(titleBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(minimizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(maximizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        titleBarPanelLayout.setVerticalGroup(
            titleBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleBarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
            .addComponent(maximizeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(minimizeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        aboutButton.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        aboutButton.setText(Main.getLocaleString("ABOUT"));
        aboutButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0));
        aboutButton.setBorderPainted(false);
        aboutButton.setContentAreaFilled(false);
        aboutButton.setMargin(new java.awt.Insets(0, 14, 2, 14));
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        settingsButton.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        settingsButton.setText(Main.getLocaleString("SETTINGS"));
        settingsButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0));
        settingsButton.setBorderPainted(false);
        settingsButton.setContentAreaFilled(false);
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });

        twitterLabel.setIcon(Utils.stretchImage(twitterIcon, 12, 12, this));
        twitterLabel.setToolTipText("http://twitter.com/groovesquid");
        twitterLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                facebookLabelMousePressed(evt);
            }
        });

        facebookLabel.setIcon(Utils.stretchImage(facebookIcon, 12, 12, this));
        facebookLabel.setToolTipText("http://facebook.com/groovesquid");
        facebookLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                facebookLabelMousePressed(evt);
            }
        });

        donateLabel.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        donateLabel.setText("Donate");
        donateLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                donateLabelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1059, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(aboutButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(settingsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(donateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(facebookLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(twitterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(titleBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(facebookLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(donateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 13, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(aboutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(twitterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(settingsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        adScrollPane.setBackground(new java.awt.Color(204, 204, 204));
        adScrollPane.setBorder(null);
        adScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        adScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        adScrollPane.setOpaque(false);
        adScrollPane.setRequestFocusEnabled(false);

        adPane.setEditable(false);
        adPane.setBackground(new java.awt.Color(204, 204, 204));
        adPane.setBorder(null);
        adPane.setContentType("text/html"); // NOI18N
        adPane.setAlignmentY(JComponent.CENTER_ALIGNMENT);
        adPane.setMaximumSize(new java.awt.Dimension(160, 600));
        adPane.setMinimumSize(new java.awt.Dimension(160, 600));
        adPane.setOpaque(false);
        adPane.setPreferredSize(new java.awt.Dimension(160, 600));
        adPane.setSize(new java.awt.Dimension(160, 600));
        adScrollPane.setViewportView(adPane);
        new GetAdsThread(adPane).start();

        adPane.addHyperlinkListener(new HyperlinkListener() {
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if(e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        Desktop.getDesktop().browse(e.getURL().toURI());
                        // refresh
                        //adPane.setText(result);
                    } catch (Exception ex) {
                        Logger.getLogger(UpdateCheckThread.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(playerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1059, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1059, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(adScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                    .addComponent(adScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        adScrollPane.getViewport().setOpaque(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosingEvent(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosingEvent
        formWindowClosing(evt);
    }//GEN-LAST:event_formWindowClosingEvent

    // take variables from GUI class
    /*
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JEditorPane adPane;
    private javax.swing.JScrollPane adScrollPane;
    private javax.swing.JPopupMenu airPlayPopupMenu;
    private javax.swing.JLabel albumCoverLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel currentDurationLabel;
    private javax.swing.JLabel currentlyPlayingLabel;
    private javax.swing.JLabel donateLabel;
    private javax.swing.JButton downloadButton;
    private javax.swing.JMenuItem downloadMenuItem;
    private javax.swing.JPanel downloadPanel;
    private javax.swing.JScrollPane downloadScrollPane;
    private javax.swing.JTable downloadTable;
    private javax.swing.JPopupMenu downloadTablePopupMenu;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JLabel facebookLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton maximizeButton;
    private javax.swing.JButton minimizeButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openDirectoryMenuItem;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JButton playButton;
    private javax.swing.JMenuItem playMenuItem;
    private javax.swing.JButton playPauseButton;
    private javax.swing.JPanel playerPanel;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton removeFromDiskButton;
    private javax.swing.JMenuItem removeFromDiskMenuItem;
    private javax.swing.JButton removeFromListButton;
    private javax.swing.JMenuItem removeFromListMenuItem;
    private javax.swing.JButton retryFailedDownloadsButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JScrollPane searchScrollPane;
    private javax.swing.JTable searchTable;
    private javax.swing.JPopupMenu searchTablePopupMenu;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JComboBox searchTypeComboBox;
    private javax.swing.JComboBox selectComboBox;
    private javax.swing.JButton settingsButton;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JLabel titleBarLabel;
    private javax.swing.JPanel titleBarPanel;
    private javax.swing.JSlider trackSlider;
    private javax.swing.JLabel twitterLabel;
    private javax.swing.JLabel volumeOffLabel;
    private javax.swing.JLabel volumeOnLabel;
    private javax.swing.JSlider volumeSlider;
    // End of variables declaration//GEN-END:variables
    */

    private void loadResources() {
        try {
            blueButton = ImageIO.read(getClass().getResource("/groovesquid/gui/style/flat/blueButton.png"));
            blueButtonHover = ImageIO.read(getClass().getResource("/groovesquid/gui/style/flat/blueButtonHover.png"));
            blueButtonPressed = ImageIO.read(getClass().getResource("/groovesquid/gui/style/flat/blueButtonPressed.png"));
            
            orangeButton = ImageIO.read(getClass().getResource("/groovesquid/gui/style/flat/orangeButton.png"));
            orangeButtonHover = ImageIO.read(getClass().getResource("/groovesquid/gui/style/flat/orangeButtonHover.png"));
            orangeButtonPressed = ImageIO.read(getClass().getResource("/groovesquid/gui/style/flat/orangeButtonPressed.png"));
            
            minimizeButtonImage = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/minimizeButton.png"));
            minimizeButtonHoverImage = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/minimizeButtonHover.png"));
            
            maximizeButtonImage = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/maximizeButton.png"));
            maximizeButtonHoverImage = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/maximizeButtonHover.png"));
            
            closeButtonImage = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/closeButton.png"));
            closeButtonHoverImage = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/closeButtonHover.png"));
            
            playIcon = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/play.png"));
            playIconActive = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/playH.png"));
            
            pauseIcon = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/pause.png"));
            pauseIconActive = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/pauseH.png"));
            
            nextIcon = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/next.png"));
            nextIconActive = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/nextH.png"));
            
            previousIcon = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/previous.png"));
            previousIconActive = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/previousH.png"));
            
            blueArrowSouth = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/blueArrowSouth.png"));
            //smallBlueArrowSouth = Utils.stretchImage(blueArrowSouth, 11, 9, this);
            blueArrowNorth = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/blueArrowNorth.png"));
            //smallBlueArrowNorth = Utils.stretchImage(blueArrowNorth, 11, 9, this);
            orangeArrowSouth = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/orangeArrowSouth.png"));
            //smallOrangeArrowSouth = Utils.stretchImage(orangeArrowSouth, 11, 9, this);
            orangeArrowNorth = new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/orangeArrowNorth.png"));
            //smallOrangeArrowNorth = Utils.stretchImage(orangeArrowNorth, 11, 9, this);
            
            dividerImage = ImageIO.read(getClass().getResource("/groovesquid/gui/style/flat/divider.png"));
            
            facebookIcon =  new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/facebook.png"));
            twitterIcon =  new ImageIcon(getClass().getResource("/groovesquid/gui/style/flat/twitter.png"));
        } catch (IOException ex) {
            Logger.getLogger(Flat.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
}

class ColorArrowUI extends BasicComboBoxUI {

    private static ImageIcon arrowSouth;
    
    public static ComboBoxUI createUI(JComponent c, ImageIcon arrowSouth) {
        ColorArrowUI.arrowSouth = arrowSouth;
        return new ColorArrowUI();
    }

    @Override
    protected JButton createArrowButton() {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(arrowSouth);
        button.setOpaque(true);
        button.setBackground(Color.WHITE);
        return button;
    }
    
}

class SquidScrollBarUI extends BasicScrollBarUI {
    
    private static ImageIcon arrowSouth, arrowNorth;
    private static Color thumbClr;
    private static int scrollBarWdth;
    
    public static SquidScrollBarUI createUI(JComponent c,  ImageIcon arrowSouth, ImageIcon arrowNorth, Color thumbClr) {
        SquidScrollBarUI.arrowSouth = arrowSouth;
        SquidScrollBarUI.arrowNorth = arrowNorth;
        SquidScrollBarUI.thumbClr = thumbClr;
        return new SquidScrollBarUI();
    }
    
    @Override
    protected JButton createIncreaseButton(int orientation) {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(arrowSouth);
        button.setBackground(Color.WHITE);
        button.setOpaque(true);
        button.setFocusPainted(false);
        return button;
    }
    
    @Override
    protected JButton createDecreaseButton(int orientation) {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(arrowNorth);
        button.setBackground(Color.WHITE);
        button.setOpaque(true);
        button.setFocusPainted(false);
        return button;
    }
    
    @Override
    protected void configureScrollBarColors() {
        trackColor = new ColorUIResource(Color.WHITE);
        trackHighlightColor = null;
        thumbColor = thumbClr;
        thumbHighlightColor = null;
        thumbDarkShadowColor = null;
        thumbLightShadowColor = null;
        scrollbar.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0), BorderFactory.createEmptyBorder(0, 5, 0, 0)));
        scrollbar.setOpaque(false);
        scrollBarWdth = 30;
        //scrollbar.
    }
    
    @Override
    public Dimension getPreferredSize(JComponent c) {
        return (scrollbar.getOrientation() == JScrollBar.VERTICAL) ? new Dimension(scrollBarWdth, 48) : new Dimension(48, scrollBarWdth);
    }
    
    @Override
    protected Rectangle getThumbBounds() {
        return thumbRect;
    }
    
    @Override
    protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
	if(thumbBounds.isEmpty() || !scrollbar.isEnabled())	{
	    return;
	}

        int w = 11;
        int h = thumbBounds.height;		

	g.translate(thumbBounds.x, thumbBounds.y);

	g.setColor(thumbColor);
	g.fillRect(8, 0, 9, h);
        
	g.translate(-thumbBounds.x, -thumbBounds.y);
    }

}

class SquidSliderUI extends BasicSliderUI {
    
    private transient boolean isDragging;
    private final int thumbHeight;
    
    public SquidSliderUI(JSlider slider, int thumbHeight) {
        super(slider);
        this.thumbHeight = thumbHeight;
    }
    
    @Override
    protected void calculateGeometry() {
        calculateFocusRect();
        calculateContentRect();
        calculateThumbSize();
        calculateTrackBuffer();
        calculateTrackRect();
        calculateTickRect();
        calculateLabelRect();
        calculateThumbLocation();
        
        scrollTimer = new Timer(0, scrollListener);
        scrollTimer.setInitialDelay(0);
    }
    
    @Override
    protected TrackListener createTrackListener(JSlider slider) {
        return new TrackListener();
    }

    @Override
    public void paintTrack(Graphics g) {
        Rectangle r = trackRect;
        r.height = thumbHeight + 6;
        g.setColor(Color.WHITE);
        g.fillRect(0, r.y, r.width + 6, r.height);
        g.setColor(new Color(145,2,146));
        g.fillRect(1, r.y + 1, r.width + 2, r.height - 2);
    }

    @Override
    public void paintThumb(Graphics g) {
        Rectangle r = thumbRect;
        if(r.x > 2) {
            g.setColor(Color.WHITE);
            g.fillRect(3, r.y + 3, r.x - r.width - 2, r.height);
        }
    }
    
    @Override
    protected Dimension getThumbSize() {
        Dimension size = new Dimension();
        size.width = 1;
        size.height = thumbHeight;
        return size;
    }
    
    @Override
    protected void scrollDueToClickInTrack(int direction) {
        int value = slider.getValue();
        if (slider.getOrientation() == JSlider.HORIZONTAL) {
            value = this.valueForXPosition(slider.getMousePosition().x);
        } else if (slider.getOrientation() == JSlider.VERTICAL) {
            value = this.valueForYPosition(slider.getMousePosition().y);
        }
        slider.setValue(value);
    }
    
    public class TrackListener extends BasicSliderUI.TrackListener {

        @Override
        public void mousePressed(MouseEvent e) {
            if (!slider.isEnabled()) {
                return;
            }

            calculateGeometry();

            currentMouseX = e.getX();
            currentMouseY = e.getY();

            if (slider.isRequestFocusEnabled()) {
                slider.requestFocus();
            }

            // Clicked in the Thumb area?
            /*if (thumbRect.contains(currentMouseX, currentMouseY)) {
                switch (slider.getOrientation()) {
                case JSlider.VERTICAL:
                    offset = currentMouseY - thumbRect.y;
                    break;
                case JSlider.HORIZONTAL:
                    offset = currentMouseX - thumbRect.x;
                    break;
                }
                isDragging = true;
                return;
            }*/
            isDragging = true;
            slider.setValueIsAdjusting(true);

            Dimension sbSize = slider.getSize();
            int direction = POSITIVE_SCROLL;

            switch (slider.getOrientation()) {
            case JSlider.VERTICAL:
                if ( thumbRect.isEmpty() ) {
                    int scrollbarCenter = sbSize.height / 2;
                    if ( !drawInverted() ) {
                        direction = (currentMouseY < scrollbarCenter) ?
                            POSITIVE_SCROLL : NEGATIVE_SCROLL;
                    }
                    else {
                        direction = (currentMouseY < scrollbarCenter) ?
                            NEGATIVE_SCROLL : POSITIVE_SCROLL;
                    }
                }
                else {
                    int thumbY = thumbRect.y;
                    if ( !drawInverted() ) {
                        direction = (currentMouseY < thumbY) ?
                            POSITIVE_SCROLL : NEGATIVE_SCROLL;
                    }
                    else {
                        direction = (currentMouseY < thumbY) ?
                            NEGATIVE_SCROLL : POSITIVE_SCROLL;
                    }
                }
                break;
            case JSlider.HORIZONTAL:
                if ( thumbRect.isEmpty() ) {
                    int scrollbarCenter = sbSize.width / 2;
                    if ( !drawInverted() ) {
                        direction = (currentMouseX < scrollbarCenter) ?
                            NEGATIVE_SCROLL : POSITIVE_SCROLL;
                    }
                    else {
                        direction = (currentMouseX < scrollbarCenter) ?
                            POSITIVE_SCROLL : NEGATIVE_SCROLL;
                    }
                }
                else {
                    int thumbX = thumbRect.x;
                    if ( !drawInverted() ) {
                        direction = (currentMouseX < thumbX) ?
                            NEGATIVE_SCROLL : POSITIVE_SCROLL;
                    }
                    else {
                        direction = (currentMouseX < thumbX) ?
                            POSITIVE_SCROLL : NEGATIVE_SCROLL;
                    }
                }
                break;
            }

            if (shouldScroll(direction)) {
                scrollDueToClickInTrack(direction);
            }
            if (shouldScroll(direction)) {
                scrollTimer.stop();
                scrollListener.setDirection(direction);
                scrollTimer.start();
            }
        }
    
        @Override
        public void mouseDragged(MouseEvent e) {
            int thumbMiddle = 0;

            if (!slider.isEnabled()) {
                return;
            }

            currentMouseX = e.getX();
            currentMouseY = e.getY();

            if (!isDragging) {
                return;
            }

            slider.setValueIsAdjusting(true);

            switch (slider.getOrientation()) {
            case JSlider.VERTICAL:
                int halfThumbHeight = thumbRect.height / 2;
                int thumbTop = e.getY() - offset;
                int trackTop = trackRect.y;
                int trackBottom = trackRect.y + (trackRect.height - 1);
                int vMax = yPositionForValue(slider.getMaximum() -
                                            slider.getExtent());

                if (drawInverted()) {
                    trackBottom = vMax;
                }
                else {
                    trackTop = vMax;
                }
                thumbTop = Math.max(thumbTop, trackTop - halfThumbHeight);
                thumbTop = Math.min(thumbTop, trackBottom - halfThumbHeight);

                setThumbLocation(thumbRect.x, thumbTop);

                thumbMiddle = thumbTop + halfThumbHeight;
                slider.setValue( valueForYPosition( thumbMiddle ) );
                break;
            case JSlider.HORIZONTAL:
                int halfThumbWidth = thumbRect.width / 2;
                int thumbLeft = e.getX() - offset;
                int trackLeft = trackRect.x;
                int trackRight = trackRect.x + (trackRect.width - 1);
                int hMax = xPositionForValue(slider.getMaximum() -
                                            slider.getExtent());

                if (drawInverted()) {
                    trackLeft = hMax;
                }
                else {
                    trackRight = hMax;
                }
                thumbLeft = Math.max(thumbLeft, trackLeft - halfThumbWidth);
                thumbLeft = Math.min(thumbLeft, trackRight - halfThumbWidth);

                setThumbLocation(thumbLeft, thumbRect.y);

                thumbMiddle = thumbLeft + halfThumbWidth;
                slider.setValue(valueForXPosition(thumbMiddle));
                break;
            default:
            }
        }
    
    }
    
}
