package cs444.lexer;

import cs444.shared.DFA;
import cs444.shared.Kind;

/** Lexer -- reads an input line, and partitions it into a list of tokens. */
public class SimpleDFA implements DFA{
    private final CharSet ALPHABETS = new Chars("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
    private final CharSet ALPHABETS_AND_NUMBERS = new Chars("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
    private final CharSet ZERO = new Chars("0");
    private final CharSet NON_ZERO_DIGITS = new Chars("123456789");
    private final CharSet DIGITS = new Chars("0123456789");
    private final CharSet HEX_DIGITS = new Chars("0123456789abcdefABCDEF");
    private final CharSet OCTAL_DIGITS = new Chars("01234567");

    private State curState; // Current state which this dfa is in.

    /*
     * Transition structure and Transition table
     */
    private Transition[] table;
    private class Transition {
        State fromState;
        CharSet chars;
        State toState;
        Transition(State fromState, CharSet chars, State toState) {
            this.fromState = fromState;
            this.chars = chars;
            this.toState = toState;
        }
    }    

    /*
     * Constructor
     */
    public SimpleDFA() {
        curState = State.START;

        table = new Transition[] {
                //new Transition(State.START, new Chars(" \t\n"), State.WHITESPACE),

                /*
                 * Numerals
                 */
                
                // Zero
                new Transition(State.START, ZERO, State.ZERO),
                
                // Hexadecimal
                new Transition(State.ZERO, new Chars("xX"), State.ZEROX),
                new Transition(State.ZEROX, HEX_DIGITS, State.HEXADECIMAL),
                new Transition(State.HEXADECIMAL, HEX_DIGITS, State.HEXADECIMAL),
                new Transition(State.HEXADECIMAL, new Chars("lL"), State.LONGHEXADECIMAL),

                // Octal
                new Transition(State.ZERO, OCTAL_DIGITS, State.OCTAL),
                new Transition(State.OCTAL, OCTAL_DIGITS, State.OCTAL),
                new Transition(State.OCTAL, new Chars("lL"), State.LONGOCTAL),

                // Decimal
                new Transition(State.START, NON_ZERO_DIGITS, State.DECIMAL),
                new Transition(State.DECIMAL, DIGITS, State.DECIMAL),
                new Transition(State.DECIMAL, new Chars("lL"), State.LONGDECIMAL),

                // Float
                // TODO: I gave up.
                /**
                new Transition(State.DOT, DIGITS, State.DOTDIGITS),
                new Transition(State.DOTDIGITS, DIGITS, State.DOTDIGITS),
                new Transition(State.DOTDIGITS, new Chars("fFdD"), State.DOTDIGITSSUFFIX),
                new Transition(State.DOTDIGITS, new Chars("eE"), State.DOTDIGITSE),
                new Transition(State.DOTDIGITSE, DIGITS, State.DOTDIGITSEXP),
                new Transition(State.DOTDIGITSE, new Chars("+-"), State.DOTDIGITSESIGN),
                new Transition(State.DOTDIGITSESIGN, DIGITS, State.DOTDIGITSEXP),
                new Transition(State.DOTDIGITSEXP, new Chars("fFdD"), State.DOTDIGITSEXPSUFFIX),

                new Transition(State.ZERO, new Chars("."), State.DIGITSDOT),
                new Transition(State.DECIMAL, new Chars("."), State.DIGITSDOT),

                new Transition(State.DIGITSDOT, new Chars("fFdD"), State.DIGITSDOTSUFFIX),

                new Transition(State.DIGITSDOT, new Chars("eE"), State.DIGITSDOTE),
                new Transition(State.DIGITSDOTE, new Chars("+-"), State.DIGITSDOTSIGN),
                new Transition(State.DIGITSDOTESIGN, DIGITS, State.DIGITSDOTEXP),
                new Transition(State.DIGITSDOTE, DIGITS, State.DIGITSDOTEXP),
                new Transition(State.DIGITSDOTEXP, DIGITS, State.DIGITSDOTEXP),
                new Transition(State.DIGITSDOTEXP, new Chars("fFdD"), State.DIGITSDOTEXPSUFFIX),

                new Transition(State.DIGITSDOT, ZERO, State.DIGITSDOTZERO),
                new Transition(State.DIGITSDOT, NON_SERO_DIGITS, State.DIGITSDOTDIGITS),
                new Transition(State.DIGITSDOTDIGITS, DIGITS, State.DIGITSDOTDIGITS),
                new Transition(State.DIGITSDOTZERO, new Chars("eE"), State.DIGITSDOTDIGITSE),
                new Transition(State.DIGITSDOTDIGITS, new Chars("eE"), State.DIGITSDOTDIGITSE),
                new Transition(State.DIGITSDOTDIGITSE, new Chars("+-"), State.DIGITSDOTDIGITSESIGN),
                new Transition(State.DIGITSDOTDIGITSE, ZERO, State.DIGITSDOTDIGITSEZERO),
                new Transition(State.DIGITSDOTDIGITSE, NON_ZERO_DIGITS, State.DIGITSDOTDIGITSEXP),
                new Transition(State.DIGITSDOTDIGITSEXP, DIGITS, State.DIGITSDOTDIGITSEXP),
                new Transition(State.DIGITSDOTDIGITSEZERO, DIGITS, State.DIGITSDOTDIGITSEXP),
                new Transition(State.DIGITSDOTDIGITSEXP, DIGITS, State.DIGITSDOTDIGITSEXP),

                new Transition(State.DECIMAL, new Chars("eE"), State.DIGITSE),
                new Transition(State.DIGITSE, new Chars("+-"), State.DIGITSESIGN),
                new Transition(State.DIGITSESIGN, DIGITS, State.DIGITSEXP),
                new Transition(State.DIGITSE, DIGITS, State.DIGITSEXP),
                new Transition(State.DIGITSEXP, DIGITS, State.DIGITSEXP),
                new Transition(State.DIGITSEXP, new Chars("fFdD"), State.DIGITSEXPSUFFIX),
                new Transition(State.DECIMAL, new Chars("fFdD"), State.DIGITSSUFFIX),
                 */


                /*
                 * Comments
                 */

                //SINGLELINE
                new Transition(State.SLASH, new Chars("/"), State.SINGLELINENOTRETURN),
                new Transition(State.SINGLELINENOTRETURN, new Chars("\n"), State.SINGLELINE),
                new Transition(State.SINGLELINENOTRETURN, new AllChars(), State.SINGLELINENOTRETURN),

                // TRADITINAL and DOCUMENTATION
                new Transition(State.SLASH, new Chars("*"), State.TRADITIONALBEGIN),
                new Transition(State.TRADITIONALBEGIN, new Chars("*"), State.DOCUMENTATIONBEGIN),
                new Transition(State.TRADITIONALNOTSTAR, new Chars("*"), State.TRADITIONALSTAR),
                new Transition(State.TRADITIONALBEGIN, new AllChars(), State.TRADITIONALNOTSTAR),
                new Transition(State.TRADITIONALNOTSTAR, new AllChars(), State.TRADITIONALNOTSTAR),
                new Transition(State.TRADITIONALSTAR, new Chars("/"), State.TRADITIONAL),
                new Transition(State.TRADITIONALSTAR, new AllChars(), State.TRADITIONALNOTSTAR),
                new Transition(State.DOCUMENTATIONBEGIN, new Chars("*"), State.DOCUMENTATIONSTAR),
                new Transition(State.DOCUMENTATIONBEGIN, new AllChars(), State.DOCUMENTATIONNOTSTAR),
                new Transition(State.DOCUMENTATIONNOTSTAR, new Chars("*"), State.DOCUMENTATIONSTAR),
                new Transition(State.DOCUMENTATIONSTAR, new Chars("/"), State.DOCUMENTATION),
                new Transition(State.DOCUMENTATIONNOTSTAR, new AllChars(), State.DOCUMENTATIONNOTSTAR),

                /*
                 * Character literal
                 */
                new Transition(State.START, new Chars("\'"), State.SINGLEQUOTE),
                new Transition(State.SINGLEQUOTE, new AllChars(), State.CHARNOTCLOSE),
                new Transition(State.CHARNOTCLOSE, new Chars("\'"), State.CHARLITERAL),
                
                /*
                 * String literal
                 */
                new Transition(State.START, new Chars("\""), State.DBLQUOTES),
                new Transition(State.DBLQUOTES, new Chars("\""), State.STRING),
                new Transition(State.DBLQUOTES, new AllChars(), State.STRINGNOTCLOSE),
                new Transition(State.STRINGNOTCLOSE, new Chars("\""), State.STRING),
                new Transition(State.STRINGNOTCLOSE, new AllChars(), State.STRINGNOTCLOSE),
                
                
                /*
                 * Symbols and operators
                 */
                new Transition(State.START, new Chars("("), State.LPAREN),
                new Transition(State.START, new Chars(")"), State.RPAREN),
                new Transition(State.START, new Chars("{"), State.LBRACE),
                new Transition(State.START, new Chars("}"), State.RBRACE),
                new Transition(State.START, new Chars("["), State.LSQBRACE),
                new Transition(State.START, new Chars("]"), State.RSQBRACE),
                new Transition(State.START, new Chars(";"), State.SEMI),
                new Transition(State.START, new Chars(","), State.COMMA),
                new Transition(State.START, new Chars("."), State.DOT),
                new Transition(State.START, new Chars("="), State.ASSIGN),
                new Transition(State.ASSIGN, new Chars("="), State.EQ),
                new Transition(State.START, new Chars("<"), State.LT),
                new Transition(State.LT, new Chars("="), State.LE),
                new Transition(State.LT, new Chars("<"), State.LSHIFT),
                new Transition(State.LSHIFT, new Chars("="), State.LSHIFTASSIGN),
                new Transition(State.START, new Chars(">"), State.GT),
                new Transition(State.GT, new Chars("="), State.GE),
                new Transition(State.GT, new Chars(">"), State.RSHIFT),
                new Transition(State.RSHIFT, new Chars("="), State.RSHIFTASSIGN),
                new Transition(State.RSHIFT, new Chars(">"), State.URSHIFT),
                new Transition(State.START, new Chars("!"), State.NOT),
                new Transition(State.NOT, new Chars("="), State.NE),
                new Transition(State.START, new Chars("~"), State.BITCOMPL),
                new Transition(State.START, new Chars("?"), State.QUESTION),
                new Transition(State.START, new Chars(":"), State.SEMI),
                new Transition(State.START, new Chars("+"), State.PLUS),
                new Transition(State.PLUS, new Chars("+"), State.INC),
                new Transition(State.PLUS, new Chars("="), State.PLUSASSIGN),
                new Transition(State.START, new Chars("-"), State.MINUS),
                new Transition(State.MINUS, new Chars("-"), State.DEC),
                new Transition(State.MINUS, new Chars("="), State.MINUSASSIGN),
                new Transition(State.START, new Chars("*"), State.STAR),
                new Transition(State.STAR, new Chars("="), State.STARASSIGN),
                new Transition(State.START, new Chars("/"), State.SLASH),
                new Transition(State.SLASH, new Chars("="), State.SLASHASSIGN),
                new Transition(State.START, new Chars("&"), State.BITAND),
                new Transition(State.BITAND, new Chars("&"), State.LOGICALAND),
                new Transition(State.BITAND, new Chars("="), State.ANDASSIGN),
                new Transition(State.START, new Chars("|"), State.BITOR),
                new Transition(State.BITOR, new Chars("|"), State.LOGICALOR),
                new Transition(State.BITOR, new Chars("="), State.ORASSIGN),
                new Transition(State.START, new Chars("^"), State.BITXOR),
                new Transition(State.BITXOR, new Chars("="), State.XORASSIGN),
                new Transition(State.START, new Chars("%"), State.REMAIN),
                new Transition(State.REMAIN, new Chars("="), State.REMAINASSIGN),

                /*
                 * Keywords
                 */
                new Transition(State.START, new Chars("a"), State.A),
                new Transition(State.A, new Chars("b"), State.AB),
                new Transition(State.AB, new Chars("s"), State.ABS),
                new Transition(State.ABS, new Chars("t"), State.ABST),
                new Transition(State.ABST, new Chars("r"), State.ABSTR),
                new Transition(State.ABSTR, new Chars("a"), State.ABSTRA),
                new Transition(State.ABSTRA, new Chars("c"), State.ABSTRAC),
                new Transition(State.ABSTRAC, new Chars("t"), State.ABSTRACT),
                new Transition(State.ABSTRACT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.ABSTRAC, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.ABSTRA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.ABSTR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.ABST, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.ABS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.AB, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.A, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("b"), State.B),
                new Transition(State.B, new Chars("o"), State.BO),
                new Transition(State.BO, new Chars("o"), State.BOO),
                new Transition(State.BOO, new Chars("l"), State.BOOL),
                new Transition(State.BOOL, new Chars("e"), State.BOOLE),
                new Transition(State.BOOLE, new Chars("a"), State.BOOLEA),
                new Transition(State.BOOLEA, new Chars("n"), State.BOOLEAN),
                new Transition(State.BOOLEAN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.BOOLEA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.BOOLE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.BOOL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.BOO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.BO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.B, new Chars("r"), State.BR),
                new Transition(State.BR, new Chars("e"), State.BRE),
                new Transition(State.BRE, new Chars("a"), State.BREA),
                new Transition(State.BREA, new Chars("k"), State.BREAK),
                new Transition(State.BREAK, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.BREA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.BRE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.BR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.B, new Chars("y"), State.BY),
                new Transition(State.BY, new Chars("t"), State.BYT),
                new Transition(State.BYT, new Chars("e"), State.BYTE),
                new Transition(State.BYTE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.BYT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.BY, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.B, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("c"), State.C),
                new Transition(State.C, new Chars("a"), State.CA),
                new Transition(State.CA, new Chars("s"), State.CAS),
                new Transition(State.CAS, new Chars("e"), State.CASE),
                new Transition(State.CASE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CAS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CA, new Chars("t"), State.CAT),
                new Transition(State.CAT, new Chars("c"), State.CATC),
                new Transition(State.CATC, new Chars("h"), State.CATCH),
                new Transition(State.CATCH, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CATC, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CAT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.C, new Chars("h"), State.CH),
                new Transition(State.CH, new Chars("a"), State.CHA),
                new Transition(State.CHA, new Chars("r"), State.CHAR),
                new Transition(State.CHAR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CHA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CH, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.C, new Chars("l"), State.CL),
                new Transition(State.CL, new Chars("a"), State.CLA),
                new Transition(State.CLA, new Chars("s"), State.CLAS),
                new Transition(State.CLAS, new Chars("s"), State.CLASS),
                new Transition(State.CLASS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CLAS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CLA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.C, new Chars("o"), State.CO),
                new Transition(State.CO, new Chars("n"), State.CON),
                new Transition(State.CON, new Chars("s"), State.CONS),
                new Transition(State.CONS, new Chars("t"), State.CONST),
                new Transition(State.CONST, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CONS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CON, new Chars("t"), State.CONT),
                new Transition(State.CONT, new Chars("i"), State.CONTI),
                new Transition(State.CONTI, new Chars("n"), State.CONTIN),
                new Transition(State.CONTIN, new Chars("u"), State.CONTINU),
                new Transition(State.CONTINU, new Chars("e"), State.CONTINUE),
                new Transition(State.CONTINUE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CONTINU, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CONTIN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CONTI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CONT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CON, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.CO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.C, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("d"), State.D),
                new Transition(State.D, new Chars("e"), State.DE),
                new Transition(State.DE, new Chars("f"), State.DEF),
                new Transition(State.DEF, new Chars("a"), State.DEFA),
                new Transition(State.DEFA, new Chars("u"), State.DEFAU),
                new Transition(State.DEFAU, new Chars("l"), State.DEFAUL),
                new Transition(State.DEFAUL, new Chars("t"), State.DEFAULT),
                new Transition(State.DEFAULT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.DEFAUL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.DEFAU, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.DEFA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.DEF, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.DE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.D, new Chars("o"), State.DO),
                new Transition(State.DO, new Chars("u"), State.DOU),
                new Transition(State.DOU, new Chars("b"), State.DOUB),
                new Transition(State.DOUB, new Chars("l"), State.DOUBL),
                new Transition(State.DOUBL, new Chars("e"), State.DOUBLE),
                new Transition(State.DOUBLE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.DOUBL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.DOUB, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.DOU, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.DO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.D, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("e"), State.E),
                new Transition(State.E, new Chars("l"), State.EL),
                new Transition(State.EL, new Chars("s"), State.ELS),
                new Transition(State.ELS, new Chars("e"), State.ELSE),
                new Transition(State.ELSE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.ELS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.EL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.E, new Chars("x"), State.EX),
                new Transition(State.EX, new Chars("t"), State.EXT),
                new Transition(State.EXT, new Chars("e"), State.EXTE),
                new Transition(State.EXTE, new Chars("n"), State.EXTEN),
                new Transition(State.EXTEN, new Chars("d"), State.EXTEND),
                new Transition(State.EXTEND, new Chars("s"), State.EXTENDS),
                new Transition(State.EXTENDS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.EXTEND, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.EXTEN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.EXTE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.EXT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.EX, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.E, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("f"), State.F),
                new Transition(State.F, new Chars("a"), State.FA),
                new Transition(State.FA, new Chars("l"), State.FAL),
                new Transition(State.FAL, new Chars("s"), State.FALS),
                new Transition(State.FALS, new Chars("e"), State.FALSE),
                new Transition(State.FALSE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FALS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FAL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.F, new Chars("i"), State.FI),
                new Transition(State.FI, new Chars("n"), State.FIN),
                new Transition(State.FIN, new Chars("a"), State.FINA),
                new Transition(State.FINA, new Chars("l"), State.FINAL),
                new Transition(State.FINAL, new Chars("l"), State.FINALL),
                new Transition(State.FINALL, new Chars("y"), State.FINALLY),
                new Transition(State.FINALLY, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FINALL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FINAL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FINA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FIN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.F, new Chars("l"), State.FL),
                new Transition(State.FL, new Chars("o"), State.FLO),
                new Transition(State.FLO, new Chars("a"), State.FLOA),
                new Transition(State.FLOA, new Chars("t"), State.FLOAT),
                new Transition(State.FLOAT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FLOA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FLO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.F, new Chars("o"), State.FO),
                new Transition(State.FO, new Chars("r"), State.FOR),
                new Transition(State.FOR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.FO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.F, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("g"), State.G),
                new Transition(State.G, new Chars("o"), State.GO),
                new Transition(State.GO, new Chars("t"), State.GOT),
                new Transition(State.GOT, new Chars("o"), State.GOTO),
                new Transition(State.GOTO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.GOT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.GO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.G, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("i"), State.I),
                new Transition(State.I, new Chars("f"), State.IF),
                new Transition(State.IF, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.I, new Chars("m"), State.IM),
                new Transition(State.IM, new Chars("p"), State.IMP),
                new Transition(State.IMP, new Chars("l"), State.IMPL),
                new Transition(State.IMPL, new Chars("e"), State.IMPLE),
                new Transition(State.IMPLE, new Chars("m"), State.IMPLEM),
                new Transition(State.IMPLEM, new Chars("e"), State.IMPLEME),
                new Transition(State.IMPLEME, new Chars("n"), State.IMPLEMEN),
                new Transition(State.IMPLEMEN, new Chars("t"), State.IMPLEMENT),
                new Transition(State.IMPLEMENT, new Chars("s"), State.IMPLEMENTS),
                new Transition(State.IMPLEMENTS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IMPLEMENT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IMPLEMEN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IMPLEME, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IMPLEM, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IMPLE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IMPL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IMP, new Chars("o"), State.IMPO),
                new Transition(State.IMPO, new Chars("r"), State.IMPOR),
                new Transition(State.IMPOR, new Chars("t"), State.IMPORT),
                new Transition(State.IMPORT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IMPOR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IMPO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IMP, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IM, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.I, new Chars("n"), State.IN),
                new Transition(State.IN, new Chars("s"), State.INS),
                new Transition(State.INS, new Chars("t"), State.INST),
                new Transition(State.INST, new Chars("a"), State.INSTA),
                new Transition(State.INSTA, new Chars("n"), State.INSTAN),
                new Transition(State.INSTAN, new Chars("c"), State.INSTANC),
                new Transition(State.INSTANC, new Chars("e"), State.INSTANCE),
                new Transition(State.INSTANCE, new Chars("o"), State.INSTANCEO),
                new Transition(State.INSTANCEO, new Chars("f"), State.INSTANCEOF),
                new Transition(State.INSTANCEOF, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INSTANCEO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INSTANCE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INSTANC, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INSTAN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INSTA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INST, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IN, new Chars("t"), State.INT),
                new Transition(State.INT, new Chars("e"), State.INTE),
                new Transition(State.INTE, new Chars("r"), State.INTER),
                new Transition(State.INTER, new Chars("f"), State.INTERF),
                new Transition(State.INTERF, new Chars("a"), State.INTERFA),
                new Transition(State.INTERFA, new Chars("c"), State.INTERFAC),
                new Transition(State.INTERFAC, new Chars("e"), State.INTERFACE),
                new Transition(State.INTERFACE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INTERFAC, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INTERFA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INTERF, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INTER, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INTE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.INT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.IN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.I, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("l"), State.L),
                new Transition(State.L, new Chars("o"), State.LO),
                new Transition(State.LO, new Chars("n"), State.LON),
                new Transition(State.LON, new Chars("g"), State.LONG),
                new Transition(State.LONG, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.LON, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.LO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.L, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("n"), State.N),
                new Transition(State.N, new Chars("a"), State.NA),
                new Transition(State.NA, new Chars("t"), State.NAT),
                new Transition(State.NAT, new Chars("i"), State.NATI),
                new Transition(State.NATI, new Chars("v"), State.NATIV),
                new Transition(State.NATIV, new Chars("e"), State.NATIVE),
                new Transition(State.NATIVE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.NATIV, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.NATI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.NAT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.NA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.N, new Chars("e"), State.NE),
                new Transition(State.NE, new Chars("w"), State.NEW),
                new Transition(State.NEW, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.NE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.N, new Chars("u"), State.NU),
                new Transition(State.NU, new Chars("l"), State.NUL),
                new Transition(State.NUL, new Chars("l"), State.NULL),
                new Transition(State.NULL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.NUL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.NU, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.N, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("p"), State.P),
                new Transition(State.P, new Chars("a"), State.PA),
                new Transition(State.PA, new Chars("c"), State.PAC),
                new Transition(State.PAC, new Chars("k"), State.PACK),
                new Transition(State.PACK, new Chars("a"), State.PACKA),
                new Transition(State.PACKA, new Chars("g"), State.PACKAG),
                new Transition(State.PACKAG, new Chars("e"), State.PACKAGE),
                new Transition(State.PACKAGE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PACKAG, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PACKA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PACK, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PAC, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.P, new Chars("r"), State.PR),
                new Transition(State.PR, new Chars("i"), State.PRI),
                new Transition(State.PRI, new Chars("v"), State.PRIV),
                new Transition(State.PRIV, new Chars("a"), State.PRIVA),
                new Transition(State.PRIVA, new Chars("t"), State.PRIVAT),
                new Transition(State.PRIVAT, new Chars("e"), State.PRIVATE),
                new Transition(State.PRIVATE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PRIVAT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PRIVA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PRIV, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PRI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PR, new Chars("o"), State.PRO),
                new Transition(State.PRO, new Chars("t"), State.PROT),
                new Transition(State.PROT, new Chars("e"), State.PROTE),
                new Transition(State.PROTE, new Chars("c"), State.PROTEC),
                new Transition(State.PROTEC, new Chars("t"), State.PROTECT),
                new Transition(State.PROTECT, new Chars("e"), State.PROTECTE),
                new Transition(State.PROTECTE, new Chars("d"), State.PROTECTED),
                new Transition(State.PROTECTED, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PROTECTE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PROTECT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PROTEC, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PROTE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PROT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PRO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.P, new Chars("u"), State.PU),
                new Transition(State.PU, new Chars("b"), State.PUB),
                new Transition(State.PUB, new Chars("l"), State.PUBL),
                new Transition(State.PUBL, new Chars("i"), State.PUBLI),
                new Transition(State.PUBLI, new Chars("c"), State.PUBLIC),
                new Transition(State.PUBLIC, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PUBLI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PUBL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PUB, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.PU, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.P, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("r"), State.R),
                new Transition(State.R, new Chars("e"), State.RE),
                new Transition(State.RE, new Chars("t"), State.RET),
                new Transition(State.RET, new Chars("u"), State.RETU),
                new Transition(State.RETU, new Chars("r"), State.RETUR),
                new Transition(State.RETUR, new Chars("n"), State.RETURN),
                new Transition(State.RETURN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.RETUR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.RETU, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.RET, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.RE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.R, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("s"), State.S),
                new Transition(State.S, new Chars("h"), State.SH),
                new Transition(State.SH, new Chars("o"), State.SHO),
                new Transition(State.SHO, new Chars("r"), State.SHOR),
                new Transition(State.SHOR, new Chars("t"), State.SHORT),
                new Transition(State.SHORT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SHOR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SHO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SH, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.S, new Chars("t"), State.ST),
                new Transition(State.ST, new Chars("a"), State.STA),
                new Transition(State.STA, new Chars("t"), State.STAT),
                new Transition(State.STAT, new Chars("i"), State.STATI),
                new Transition(State.STATI, new Chars("c"), State.STATIC),
                new Transition(State.STATIC, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.STATI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.STAT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.STA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.ST, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.S, new Chars("u"), State.SU),
                new Transition(State.SU, new Chars("p"), State.SUP),
                new Transition(State.SUP, new Chars("e"), State.SUPE),
                new Transition(State.SUPE, new Chars("r"), State.SUPER),
                new Transition(State.SUPER, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SUPE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SUP, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SU, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.S, new Chars("w"), State.SW),
                new Transition(State.SW, new Chars("i"), State.SWI),
                new Transition(State.SWI, new Chars("t"), State.SWIT),
                new Transition(State.SWIT, new Chars("c"), State.SWITC),
                new Transition(State.SWITC, new Chars("h"), State.SWITCH),
                new Transition(State.SWITCH, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SWITC, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SWIT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SWI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SW, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.S, new Chars("y"), State.SY),
                new Transition(State.SY, new Chars("n"), State.SYN),
                new Transition(State.SYN, new Chars("c"), State.SYNC),
                new Transition(State.SYNC, new Chars("h"), State.SYNCH),
                new Transition(State.SYNCH, new Chars("r"), State.SYNCHR),
                new Transition(State.SYNCHR, new Chars("o"), State.SYNCHRO),
                new Transition(State.SYNCHRO, new Chars("n"), State.SYNCHRON),
                new Transition(State.SYNCHRON, new Chars("i"), State.SYNCHRONI),
                new Transition(State.SYNCHRONI, new Chars("z"), State.SYNCHRONIZ),
                new Transition(State.SYNCHRONIZ, new Chars("e"), State.SYNCHRONIZE),
                new Transition(State.SYNCHRONIZE, new Chars("d"), State.SYNCHRONIZED),
                new Transition(State.SYNCHRONIZED, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SYNCHRONIZE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SYNCHRONIZ, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SYNCHRONI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SYNCHRON, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SYNCHRO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SYNCHR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SYNCH, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SYNC, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SYN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.SY, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.S, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("t"), State.T),
                new Transition(State.T, new Chars("h"), State.TH),
                new Transition(State.TH, new Chars("i"), State.THI),
                new Transition(State.THI, new Chars("s"), State.THIS),
                new Transition(State.THIS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.THI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TH, new Chars("r"), State.THR),
                new Transition(State.THR, new Chars("o"), State.THRO),
                new Transition(State.THRO, new Chars("w"), State.THROW),
                new Transition(State.THROW, new Chars("s"), State.THROWS),
                new Transition(State.THROWS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.THROW, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.THRO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.THR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TH, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.T, new Chars("r"), State.TR),
                new Transition(State.TR, new Chars("a"), State.TRA),
                new Transition(State.TRA, new Chars("n"), State.TRAN),
                new Transition(State.TRAN, new Chars("s"), State.TRANS),
                new Transition(State.TRANS, new Chars("i"), State.TRANSI),
                new Transition(State.TRANSI, new Chars("e"), State.TRANSIE),
                new Transition(State.TRANSIE, new Chars("n"), State.TRANSIEN),
                new Transition(State.TRANSIEN, new Chars("t"), State.TRANSIENT),
                new Transition(State.TRANSIENT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TRANSIEN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TRANSIE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TRANSI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TRANS, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TRAN, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TRA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TR, new Chars("u"), State.TRU),
                new Transition(State.TRU, new Chars("e"), State.TRUE),
                new Transition(State.TRUE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TRU, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TR, new Chars("y"), State.TRY),
                new Transition(State.TRY, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.TR, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.T, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("v"), State.V),
                new Transition(State.V, new Chars("o"), State.VO),
                new Transition(State.VO, new Chars("i"), State.VOI),
                new Transition(State.VOI, new Chars("d"), State.VOID),
                new Transition(State.VOID, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.VOI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.VO, new Chars("l"), State.VOL),
                new Transition(State.VOL, new Chars("a"), State.VOLA),
                new Transition(State.VOLA, new Chars("t"), State.VOLAT),
                new Transition(State.VOLAT, new Chars("i"), State.VOLATI),
                new Transition(State.VOLATI, new Chars("l"), State.VOLATIL),
                new Transition(State.VOLATIL, new Chars("e"), State.VOLATILE),
                new Transition(State.VOLATILE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.VOLATIL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.VOLATI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.VOLAT, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.VOLA, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.VOL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.VO, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.V, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.START, new Chars("w"), State.W),
                new Transition(State.W, new Chars("h"), State.WH),
                new Transition(State.WH, new Chars("i"), State.WHI),
                new Transition(State.WHI, new Chars("l"), State.WHIL),
                new Transition(State.WHIL, new Chars("e"), State.WHILE),
                new Transition(State.WHILE, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.WHIL, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.WHI, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.WH, ALPHABETS_AND_NUMBERS, State.ID),
                new Transition(State.W, ALPHABETS_AND_NUMBERS, State.ID),

                new Transition(State.START, ALPHABETS, State.ID),
                new Transition(State.ID, ALPHABETS_AND_NUMBERS, State.ID),
        };
    }

    /*
     * DFA Interface methods
     */
    @Override
    public boolean nextChar(char next) {
        Transition t = findTransition(curState, next);
        if(t != null) curState = t.toState;
        return t != null;
    }
    @Override
    public boolean isAccepting() {
        return curState.isFinal();
    }
    @Override
    public boolean isStartState() {
        return curState.equals(State.START);
    }
    @Override
    public void reset() {
        curState = State.START;

    }
    @Override
    public Kind getKind() {
        return curState.kind;
    }

    ///////////////////////////////////////////////////////////////
    // END OF PUBLIC METHODS
    ///////////////////////////////////////////////////////////////

    private Transition findTransition(State state, char c) {
        for( int j = 0; j < table.length; j++ ) {
            Transition t = table[j];
            if(t.fromState == state && t.chars.contains(c)) {
                return t;
            }
        }
        return null;
    }

    private static enum State {
        // Start state
        START(null),
        
        // ID
        ID(Kind.ID),

        // Numerals
        ZERO(Kind.DECIMAL),
        ZEROX(null),
        DECIMAL(Kind.DECIMAL),
        LONGDECIMAL(Kind.LONGDECIMAL),
        HEXADECIMAL(Kind.HEXADECIMAL),
        LONGHEXADECIMAL(Kind.LONGHEXADECIMAL),
        OCTAL(Kind.OCTAL),
        LONGOCTAL(Kind.LONGOCTAL),

        // Comments
        TRADITIONALBEGIN(null),
        TRADITIONALNOTSTAR(null),
        TRADITIONALSTAR(null),
        TRADITIONAL(Kind.TRADITIONAL),
        SINGLELINENOTRETURN(null),
        SINGLELINE(Kind.SINGLELINE),
        DOCUMENTATIONBEGIN(null),
        DOCUMENTATIONNOTSTAR(null),
        DOCUMENTATIONSTAR(null),
        DOCUMENTATION(Kind.DOCUMENTATION),

        // Character literal
        SINGLEQUOTE(null),
        CHARNOTCLOSE(null),
        CHARLITERAL(Kind.CHARLITERAL),
        
        // String literal
        DBLQUOTES(null),
        STRINGNOTCLOSE(null),
        STRING(Kind.STRINGLITERAL),
        
        // Keywords
        A(Kind.ID),
        AB(Kind.ID),
        ABS(Kind.ID),
        ABST(Kind.ID),
        ABSTR(Kind.ID),
        ABSTRA(Kind.ID),
        ABSTRAC(Kind.ID),
        ABSTRACT(Kind.ABSTRACT),
        B(Kind.ID),
        BO(Kind.ID),
        BOO(Kind.ID),
        BOOL(Kind.ID),
        BOOLE(Kind.ID),
        BOOLEA(Kind.ID),
        BOOLEAN(Kind.BOOLEAN),
        BR(Kind.ID),
        BRE(Kind.ID),
        BREA(Kind.ID),
        BREAK(Kind.BREAK),
        BY(Kind.ID),
        BYT(Kind.ID),
        BYTE(Kind.BYTE),
        C(Kind.ID),
        CA(Kind.ID),
        CAS(Kind.ID),
        CASE(Kind.CASE),
        CAT(Kind.ID),
        CATC(Kind.ID),
        CATCH(Kind.CATCH),
        CH(Kind.ID),
        CHA(Kind.ID),
        CHAR(Kind.CHAR),
        CL(Kind.ID),
        CLA(Kind.ID),
        CLAS(Kind.ID),
        CLASS(Kind.CLASS),
        CO(Kind.ID),
        CON(Kind.ID),
        CONS(Kind.ID),
        CONST(Kind.CONST),
        CONT(Kind.ID),
        CONTI(Kind.ID),
        CONTIN(Kind.ID),
        CONTINU(Kind.ID),
        CONTINUE(Kind.CONTINUE),
        D(Kind.ID),
        DE(Kind.ID),
        DEF(Kind.ID),
        DEFA(Kind.ID),
        DEFAU(Kind.ID),
        DEFAUL(Kind.ID),
        DEFAULT(Kind.DEFAULT),
        DO(Kind.DO),
        DOU(Kind.ID),
        DOUB(Kind.ID),
        DOUBL(Kind.ID),
        DOUBLE(Kind.DOUBLE),
        E(Kind.ID),
        EL(Kind.ID),
        ELS(Kind.ID),
        ELSE(Kind.ELSE),
        EX(Kind.ID),
        EXT(Kind.ID),
        EXTE(Kind.ID),
        EXTEN(Kind.ID),
        EXTEND(Kind.ID),
        EXTENDS(Kind.EXTENDS),
        F(Kind.ID),
        FA(Kind.ID),
        FAL(Kind.ID),
        FALS(Kind.ID),
        FALSE(Kind.FALSE),
        FI(Kind.ID),
        FIN(Kind.ID),
        FINA(Kind.ID),
        FINAL(Kind.FINAL),
        FINALL(Kind.ID),
        FINALLY(Kind.FINALLY),
        FL(Kind.ID),
        FLO(Kind.ID),
        FLOA(Kind.ID),
        FLOAT(Kind.FLOAT),
        FO(Kind.ID),
        FOR(Kind.FOR),
        G(Kind.ID),
        GO(Kind.ID),
        GOT(Kind.ID),
        GOTO(Kind.GOTO),
        I(Kind.ID),
        IF(Kind.IF),
        IM(Kind.ID),
        IMP(Kind.ID),
        IMPL(Kind.ID),
        IMPLE(Kind.ID),
        IMPLEM(Kind.ID),
        IMPLEME(Kind.ID),
        IMPLEMEN(Kind.ID),
        IMPLEMENT(Kind.ID),
        IMPLEMENTS(Kind.IMPLEMENTS),
        IMPO(Kind.ID),
        IMPOR(Kind.ID),
        IMPORT(Kind.IMPORT),
        IN(Kind.ID),
        INS(Kind.ID),
        INST(Kind.ID),
        INSTA(Kind.ID),
        INSTAN(Kind.ID),
        INSTANC(Kind.ID),
        INSTANCE(Kind.ID),
        INSTANCEO(Kind.ID),
        INSTANCEOF(Kind.INSTANCEOF),
        INT(Kind.INT),
        INTE(Kind.ID),
        INTER(Kind.ID),
        INTERF(Kind.ID),
        INTERFA(Kind.ID),
        INTERFAC(Kind.ID),
        INTERFACE(Kind.INTERFACE),
        L(Kind.ID),
        LO(Kind.ID),
        LON(Kind.ID),
        LONG(Kind.LONG),
        N(Kind.ID),
        NA(Kind.ID),
        NAT(Kind.ID),
        NATI(Kind.ID),
        NATIV(Kind.ID),
        NATIVE(Kind.NATIVE),
        NU(Kind.ID),
        NUL(Kind.ID),
        NULL(Kind.NULL),
        NEW(Kind.NEW),
        P(Kind.ID),
        PA(Kind.ID),
        PAC(Kind.ID),
        PACK(Kind.ID),
        PACKA(Kind.ID),
        PACKAG(Kind.ID),
        PACKAGE(Kind.PACKAGE),
        PR(Kind.ID),
        PRI(Kind.ID),
        PRIV(Kind.ID),
        PRIVA(Kind.ID),
        PRIVAT(Kind.ID),
        PRIVATE(Kind.PRIVATE),
        PRO(Kind.ID),
        PROT(Kind.ID),
        PROTE(Kind.ID),
        PROTEC(Kind.ID),
        PROTECT(Kind.ID),
        PROTECTE(Kind.ID),
        PROTECTED(Kind.PROTECTED),
        PU(Kind.ID),
        PUB(Kind.ID),
        PUBL(Kind.ID),
        PUBLI(Kind.ID),
        PUBLIC(Kind.PUBLIC),
        R(Kind.ID),
        RE(Kind.ID),
        RET(Kind.ID),
        RETU(Kind.ID),
        RETUR(Kind.ID),
        RETURN(Kind.RETURN),
        S(Kind.ID),
        SH(Kind.ID),
        SHO(Kind.ID),
        SHOR(Kind.ID),
        SHORT(Kind.SHORT),
        ST(Kind.ID),
        STA(Kind.ID),
        STAT(Kind.ID),
        STATI(Kind.ID),
        STATIC(Kind.STATIC),
        SU(Kind.ID),
        SUP(Kind.ID),
        SUPE(Kind.ID),
        SUPER(Kind.SUPER),
        SW(Kind.ID),
        SWI(Kind.ID),
        SWIT(Kind.ID),
        SWITC(Kind.ID),
        SWITCH(Kind.SWITCH),
        SY(Kind.ID),
        SYN(Kind.ID),
        SYNC(Kind.ID),
        SYNCH(Kind.ID),
        SYNCHR(Kind.ID),
        SYNCHRO(Kind.ID),
        SYNCHRON(Kind.ID),
        SYNCHRONI(Kind.ID),
        SYNCHRONIZ(Kind.ID),
        SYNCHRONIZE(Kind.ID),
        SYNCHRONIZED(Kind.SYNCHRONIZED),
        T(Kind.ID),
        TH(Kind.ID),
        THI(Kind.ID),
        THIS(Kind.THIS),
        THR(Kind.ID),
        THRO(Kind.ID),
        THROW(Kind.THROW),
        THROWS(Kind.THROWS),
        TR(Kind.ID),
        TRU(Kind.ID),
        TRUE(Kind.TRUE),
        TRA(Kind.ID),
        TRAN(Kind.ID),
        TRANS(Kind.ID),
        TRANSI(Kind.ID),
        TRANSIE(Kind.ID),
        TRANSIEN(Kind.ID),
        TRANSIENT(Kind.TRANSIENT),
        TRY(Kind.TRY),
        V(Kind.ID),
        VO(Kind.ID),
        VOI(Kind.ID),
        VOID(Kind.VOID),
        VOL(Kind.ID),
        VOLA(Kind.ID),
        VOLAT(Kind.ID),
        VOLATI(Kind.ID),
        VOLATIL(Kind.ID),
        VOLATILE(Kind.VOLATILE),
        W(Kind.ID),
        WH(Kind.ID),
        WHI(Kind.ID),
        WHIL(Kind.ID),
        WHILE(Kind.WHILE),

        // Symbols
        WHITESPACE(Kind.WHITESPACE),
        LPAREN(Kind.LPAREN),
        RPAREN(Kind.RPAREN),
        LBRACE(Kind.LBRACE),
        RBRACE(Kind.RBRACE),
        LSQBRACE(Kind.LSQBRACE),
        RSQBRACE(Kind.RSQBRACE),
        SEMI(Kind.SEMI),
        COMMA(Kind.COMMA),
        DOT(Kind.DOT),
        
        // Operators
        ASSIGN(Kind.ASSIGN),
        LT(Kind.LT),
        GT(Kind.GT),
        NOT(Kind.NOT),
        BITCOMPL(Kind.BITCOMPL),
        QUESTION(Kind.QUESTION),
        COLON(Kind.COLON),
        EQ(Kind.EQ),
        LE(Kind.LE),
        GE(Kind.GE),
        NE(Kind.NE),
        LOGICALAND(Kind.LOGICALAND),
        LOGICALOR(Kind.LOGICALOR),
        INC(Kind.INC),
        DEC(Kind.DEC),
        PLUS(Kind.PLUS),
        MINUS(Kind.MINUS),
        STAR(Kind.STAR),
        SLASH(Kind.SLASH),
        BITAND(Kind.BITAND),
        BITOR(Kind.BITOR),
        BITXOR(Kind.BITXOR),
        REMAIN(Kind.REMAIN),
        LSHIFT(Kind.LSHIFT),
        RSHIFT(Kind.RSHIFT),
        URSHIFT(Kind.URSHIFT),
        PLUSASSIGN(Kind.PLUSASSIGN),
        MINUSASSIGN(Kind.MINUSASSIGN),
        STARASSIGN(Kind.STARASSIGN),
        SLASHASSIGN(Kind.SLASHASSIGN),
        ANDASSIGN(Kind.ANDASSIGN),
        ORASSIGN(Kind.ORASSIGN),
        XORASSIGN(Kind.XORASSIGN),
        REMAINASSIGN(Kind.REMAINASSIGN),
        LSHIFTASSIGN(Kind.LSHIFTASSIGN),
        RSHIFTASSIGN(Kind.RSHIFTASSIGN),
        URSHIFTASSIGN(Kind.URSHIFTASSIGN),
        ;        
        State(Kind kind) { this.kind = kind; }
        Kind kind;
        boolean isFinal() { return kind != null; }
    }

    private interface CharSet { public boolean contains(char newC); }
    private class Chars implements CharSet {
        private String chars;
        public Chars(String chars) { this.chars = chars; }
        public boolean contains(char newC) { return chars.indexOf(newC) >= 0; }
    }
    private class AllChars implements CharSet {
        public boolean contains(char newC) { return true; }
    }
}

