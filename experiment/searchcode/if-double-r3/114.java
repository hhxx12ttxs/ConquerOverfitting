/**
 * 
 */
package Utils.Vectors;

import Utils.Angles.*;

/**
 * ?????, ??????????? ????????? ???????
 * @author OstYD
 */
public final class VectorAlgebra {
	
	protected VectorAlgebra(){
		
	}
	
	/**
	 * ???????? ???????? ?????? ? ??????? ? R2
	 * @param vector ???????? ??????
	 * @return ??????? ? R2
	 */
	protected static Vector2D euclideanTo2D(EuclideanVector vector){
		return new Vector2D(vector.getCoord(0), vector.getCoord(1));
	}
	
	/**
	 * ???????? ???????? ?????? ? ??????? ? R3
	 * @param vector ???????? ??????
	 * @return ??????? ? R3
	 */
	protected static Vector3D euclideanTo3D(EuclideanVector vector){
		return new Vector3D(vector.getCoord(0), vector.getCoord(1), vector.getCoord(2));
	}
	
	/**
	 * ?????????? ????????? ???????????? ???? ???????? ? ????? ?????????? ???????????? ? ?????????? ????????????
	 * @param v1 ?????? ??????
	 * @param v2 ?????? ??????
	 * @return (v1, v2) - ????????? ????????????
	 * @throws EDimentionDifferenceException
	 */
	public static double getScalarProduct(EuclideanVector v1, EuclideanVector v2) throws EDimentionDifferenceException {
		
		if (v1.dimention() != v2.dimention())
			throw new EDimentionDifferenceException("v1", "v2");
		
		double product = 0;
		
		for(int i = 0; i < v1.dimention(); i++)
			product += v1.getCoord(i) * v2.getCoord(i);
		
		return product;
	}
	
	/**
	 * ?????????? ???? ????? ????? ????????? ? ????? ?????????? ???????????? ? ?????????? ????????????
	 * @param v1 ?????? ??????
	 * @param v2 ?????? ??????
	 * @return ???? ????? ?????????
	 * @throws EDimentionDifferenceException
	 */
	public static Angle getAngleBetweenVectors(EuclideanVector v1, EuclideanVector v2) throws EDimentionDifferenceException{
		final double DELTA = 0.00000001;
		double product =  getScalarProduct(v1, v2);
		double cosinus =  product /(v1.getNorm() * v2.getNorm());
		double angle = (Math.abs(cosinus - 1) > DELTA) ? Math.acos(cosinus) : 0; //???????? ?? ?????????? ?????????? ?????
		
		return new Angle(angle, AngleUnit.RADIAN);
	}
	
	/**
	 * @see VectorAlgebra#getAngleBetweenVectors(EuclideanVector, EuclideanVector)
	 */
	public static Angle getAngleBetweenVectors(Vector2D v1, Vector2D v2){
		try {
			return getAngleBetweenVectors((EuclideanVector) v1, (EuclideanVector) v2);
		} catch (EDimentionDifferenceException e) {
			return null;
		}
	}
	
	/**
	 * @see VectorAlgebra#getAngleBetweenVectors(EuclideanVector, EuclideanVector)
	 */
	public static Angle getAngleBetweenVectors(Vector3D v1, Vector3D v2){
		try {
			return getAngleBetweenVectors((EuclideanVector) v1, (EuclideanVector) v2);
		} catch (EDimentionDifferenceException e) {
			return null;
		}
	}
	
	/**
	 * ?????????? ????? ???? ???????? ? ????? ?????????? ???????????? ? ?????????? ????????????
	 * @param v1 ?????? ??????
	 * @param v2 ?????? ??????
	 * @return ????????? ????? ????????
	 * @throws EDimentionDifferenceException
	 */
	protected static EuclideanVector getSum(EuclideanVector v1, EuclideanVector v2) throws EDimentionDifferenceException{
		if (v1.dimention() != v2.dimention())
			throw new EDimentionDifferenceException("v1", "v2");
		
		EuclideanVector sum = new EuclideanVector(v1.dimention());
		
		for(int i = 0; i < v1.dimention(); i++)
			sum.setCoord(i, v1.getCoord(i) + v2.getCoord(i));
		
		return sum;
	}
	
	/**
	 * ?????????? ????? ???? ???????? ? R2
	 * @param v1 ?????? ??????
	 * @param v2 ?????? ??????
	 * @return ????????? ????? ???????? ? R2
	 */
	public static Vector2D getSum(Vector2D v1, Vector2D v2){
		
		try {
			return euclideanTo2D(getSum((EuclideanVector) v1, (EuclideanVector)v2));
		} catch (EDimentionDifferenceException e) {
			e.printStackTrace();
			return null;
		}		
	}
	
	/**
	 * ?????????? ????? ???? ???????? ? R3
	 * @param v1 ?????? ??????
	 * @param v2 ?????? ??????
	 * @return ????????? ????? ???????? ? R3
	 */
	public static Vector3D getSum(Vector3D v1, Vector3D v2){
		
		try {
			return euclideanTo3D(getSum((EuclideanVector) v1, (EuclideanVector) v2));
		} catch (EDimentionDifferenceException e) {
			e.printStackTrace();
			return null;
		}		
	}
	
	
	/**
	 * ?????????? ???????????? ??????? ?? ?????? ? ????? ?????????? ????????????
	 * @param vector ?????? ? ?????????? ????????????
	 * @param scale  ?????? ?? ??????? ?????????? ??????
	 * @return ???????????? ??????? ?? ?????? ? ?????????? ????????????
	 */
	protected static EuclideanVector getProduct(EuclideanVector vector, double scale){
		
		EuclideanVector product = new EuclideanVector(vector.dimention());
		
		for(int i = 0; i < vector.dimention(); i++)
			product.setCoord(i, vector.getCoord(i) * scale);
		
		return product;
	}
	
	/**
	 * ?????????? ???????????? ??????? ?? ?????? ? R2
	 * @param vector ?????? ? ?????????? ????????????
	 * @param scale  ?????? ?? ??????? ?????????? ??????
	 * @return ???????????? ??????? ?? ?????? ? R2
	 */
	public static Vector2D getProduct(Vector2D vector, double scale){
		return euclideanTo2D(getProduct((EuclideanVector) vector, scale));
	}
	
	/**
	 * ?????????? ???????????? ??????? ?? ?????? ? R3
	 * @param vector ?????? ? ?????????? ????????????
	 * @param scale  ?????? ?? ??????? ?????????? ??????
	 * @return ???????????? ??????? ?? ?????? ? R3
	 */
	public static Vector3D getProduct(Vector3D vector, double scale){
		return euclideanTo3D(getProduct((EuclideanVector) vector, scale));
	}
	
	/**
	 * ?????????? ???????? ???? ???????? ? ????? ?????????? ???????????? ? ?????????? ????????????
	 * @param v1 ?????? ??????
	 * @param v2 ?????? ??????
	 * @return ????????? ???????? ????????
	 * @throws EDimentionDifferenceException
	 */
	protected static EuclideanVector getRemainder(EuclideanVector v1, EuclideanVector v2) throws EDimentionDifferenceException{
		
		return getSum(v1, getProduct(v2, -1) );
	}
	
	/**
	 * ?????????? ???????? ???? ???????? ? R2
	 * @param v1 ?????? ??????
	 * @param v2 ?????? ??????
	 * @return ????????? ???????? ???????? ? R2
	 * @throws EDimentionDifferenceException
	 */
	public static Vector2D getRemainder(Vector2D v1, Vector2D v2){
		
		try {
			return euclideanTo2D(getRemainder((EuclideanVector) v1, (EuclideanVector) v2));
		} catch (EDimentionDifferenceException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * ?????????? ???????? ???? ???????? ? R3
	 * @param v1 ?????? ??????
	 * @param v2 ?????? ??????
	 * @return ????????? ???????? ???????? ? R3
	 * @throws EDimentionDifferenceException
	 */
	public static Vector3D getRemainder(Vector3D v1, Vector3D v2){
		
		try{ 
			return euclideanTo3D(getRemainder((EuclideanVector) v1, (EuclideanVector) v2));
		}
		catch (EDimentionDifferenceException e){
			e.printStackTrace();
			return null;
		}
		
	}


}

