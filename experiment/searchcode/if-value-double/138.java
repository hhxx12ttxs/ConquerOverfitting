/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.thrift;
/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */


import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CfDef implements org.apache.thrift.TBase<CfDef, CfDef._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CfDef");

  private static final org.apache.thrift.protocol.TField KEYSPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("keyspace", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("column_type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMPARATOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("comparator_type", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SUBCOMPARATOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("subcomparator_type", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField READ_REPAIR_CHANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("read_repair_chance", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField COLUMN_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("column_metadata", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField GC_GRACE_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("gc_grace_seconds", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALIDATION_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("default_validation_class", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MIN_COMPACTION_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("min_compaction_threshold", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MAX_COMPACTION_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("max_compaction_threshold", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField REPLICATE_ON_WRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("replicate_on_write", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField KEY_VALIDATION_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("key_validation_class", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField KEY_ALIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("key_alias", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField COMPACTION_STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("compaction_strategy", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField COMPACTION_STRATEGY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("compaction_strategy_options", org.apache.thrift.protocol.TType.MAP, (short)30);
  private static final org.apache.thrift.protocol.TField COMPRESSION_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("compression_options", org.apache.thrift.protocol.TType.MAP, (short)32);
  private static final org.apache.thrift.protocol.TField BLOOM_FILTER_FP_CHANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("bloom_filter_fp_chance", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField CACHING_FIELD_DESC = new org.apache.thrift.protocol.TField("caching", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField DCLOCAL_READ_REPAIR_CHANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("dclocal_read_repair_chance", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField MEMTABLE_FLUSH_PERIOD_IN_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("memtable_flush_period_in_ms", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField ROW_CACHE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("row_cache_size", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField KEY_CACHE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("key_cache_size", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField ROW_CACHE_SAVE_PERIOD_IN_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("row_cache_save_period_in_seconds", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField KEY_CACHE_SAVE_PERIOD_IN_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("key_cache_save_period_in_seconds", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField MEMTABLE_FLUSH_AFTER_MINS_FIELD_DESC = new org.apache.thrift.protocol.TField("memtable_flush_after_mins", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField MEMTABLE_THROUGHPUT_IN_MB_FIELD_DESC = new org.apache.thrift.protocol.TField("memtable_throughput_in_mb", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField MEMTABLE_OPERATIONS_IN_MILLIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("memtable_operations_in_millions", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField MERGE_SHARDS_CHANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_shards_chance", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField ROW_CACHE_PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("row_cache_provider", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField ROW_CACHE_KEYS_TO_SAVE_FIELD_DESC = new org.apache.thrift.protocol.TField("row_cache_keys_to_save", org.apache.thrift.protocol.TType.I32, (short)31);

  public String keyspace; // required
  public String name; // required
  public String column_type; // required
  public String comparator_type; // required
  public String subcomparator_type; // required
  public String comment; // required
  public double read_repair_chance; // required
  public List<ColumnDef> column_metadata; // required
  public int gc_grace_seconds; // required
  public String default_validation_class; // required
  public int id; // required
  public int min_compaction_threshold; // required
  public int max_compaction_threshold; // required
  public boolean replicate_on_write; // required
  public String key_validation_class; // required
  public ByteBuffer key_alias; // required
  public String compaction_strategy; // required
  public Map<String,String> compaction_strategy_options; // required
  public Map<String,String> compression_options; // required
  public double bloom_filter_fp_chance; // required
  public String caching; // required
  public double dclocal_read_repair_chance; // required
  public int memtable_flush_period_in_ms; // required
  /**
   * @deprecated
   */
  public double row_cache_size; // required
  /**
   * @deprecated
   */
  public double key_cache_size; // required
  /**
   * @deprecated
   */
  public int row_cache_save_period_in_seconds; // required
  /**
   * @deprecated
   */
  public int key_cache_save_period_in_seconds; // required
  /**
   * @deprecated
   */
  public int memtable_flush_after_mins; // required
  /**
   * @deprecated
   */
  public int memtable_throughput_in_mb; // required
  /**
   * @deprecated
   */
  public double memtable_operations_in_millions; // required
  /**
   * @deprecated
   */
  public double merge_shards_chance; // required
  /**
   * @deprecated
   */
  public String row_cache_provider; // required
  /**
   * @deprecated
   */
  public int row_cache_keys_to_save; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEYSPACE((short)1, "keyspace"),
    NAME((short)2, "name"),
    COLUMN_TYPE((short)3, "column_type"),
    COMPARATOR_TYPE((short)5, "comparator_type"),
    SUBCOMPARATOR_TYPE((short)6, "subcomparator_type"),
    COMMENT((short)8, "comment"),
    READ_REPAIR_CHANCE((short)12, "read_repair_chance"),
    COLUMN_METADATA((short)13, "column_metadata"),
    GC_GRACE_SECONDS((short)14, "gc_grace_seconds"),
    DEFAULT_VALIDATION_CLASS((short)15, "default_validation_class"),
    ID((short)16, "id"),
    MIN_COMPACTION_THRESHOLD((short)17, "min_compaction_threshold"),
    MAX_COMPACTION_THRESHOLD((short)18, "max_compaction_threshold"),
    REPLICATE_ON_WRITE((short)24, "replicate_on_write"),
    KEY_VALIDATION_CLASS((short)26, "key_validation_class"),
    KEY_ALIAS((short)28, "key_alias"),
    COMPACTION_STRATEGY((short)29, "compaction_strategy"),
    COMPACTION_STRATEGY_OPTIONS((short)30, "compaction_strategy_options"),
    COMPRESSION_OPTIONS((short)32, "compression_options"),
    BLOOM_FILTER_FP_CHANCE((short)33, "bloom_filter_fp_chance"),
    CACHING((short)34, "caching"),
    DCLOCAL_READ_REPAIR_CHANCE((short)37, "dclocal_read_repair_chance"),
    MEMTABLE_FLUSH_PERIOD_IN_MS((short)38, "memtable_flush_period_in_ms"),
    /**
     * @deprecated
     */
    ROW_CACHE_SIZE((short)9, "row_cache_size"),
    /**
     * @deprecated
     */
    KEY_CACHE_SIZE((short)11, "key_cache_size"),
    /**
     * @deprecated
     */
    ROW_CACHE_SAVE_PERIOD_IN_SECONDS((short)19, "row_cache_save_period_in_seconds"),
    /**
     * @deprecated
     */
    KEY_CACHE_SAVE_PERIOD_IN_SECONDS((short)20, "key_cache_save_period_in_seconds"),
    /**
     * @deprecated
     */
    MEMTABLE_FLUSH_AFTER_MINS((short)21, "memtable_flush_after_mins"),
    /**
     * @deprecated
     */
    MEMTABLE_THROUGHPUT_IN_MB((short)22, "memtable_throughput_in_mb"),
    /**
     * @deprecated
     */
    MEMTABLE_OPERATIONS_IN_MILLIONS((short)23, "memtable_operations_in_millions"),
    /**
     * @deprecated
     */
    MERGE_SHARDS_CHANCE((short)25, "merge_shards_chance"),
    /**
     * @deprecated
     */
    ROW_CACHE_PROVIDER((short)27, "row_cache_provider"),
    /**
     * @deprecated
     */
    ROW_CACHE_KEYS_TO_SAVE((short)31, "row_cache_keys_to_save");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEYSPACE
          return KEYSPACE;
        case 2: // NAME
          return NAME;
        case 3: // COLUMN_TYPE
          return COLUMN_TYPE;
        case 5: // COMPARATOR_TYPE
          return COMPARATOR_TYPE;
        case 6: // SUBCOMPARATOR_TYPE
          return SUBCOMPARATOR_TYPE;
        case 8: // COMMENT
          return COMMENT;
        case 12: // READ_REPAIR_CHANCE
          return READ_REPAIR_CHANCE;
        case 13: // COLUMN_METADATA
          return COLUMN_METADATA;
        case 14: // GC_GRACE_SECONDS
          return GC_GRACE_SECONDS;
        case 15: // DEFAULT_VALIDATION_CLASS
          return DEFAULT_VALIDATION_CLASS;
        case 16: // ID
          return ID;
        case 17: // MIN_COMPACTION_THRESHOLD
          return MIN_COMPACTION_THRESHOLD;
        case 18: // MAX_COMPACTION_THRESHOLD
          return MAX_COMPACTION_THRESHOLD;
        case 24: // REPLICATE_ON_WRITE
          return REPLICATE_ON_WRITE;
        case 26: // KEY_VALIDATION_CLASS
          return KEY_VALIDATION_CLASS;
        case 28: // KEY_ALIAS
          return KEY_ALIAS;
        case 29: // COMPACTION_STRATEGY
          return COMPACTION_STRATEGY;
        case 30: // COMPACTION_STRATEGY_OPTIONS
          return COMPACTION_STRATEGY_OPTIONS;
        case 32: // COMPRESSION_OPTIONS
          return COMPRESSION_OPTIONS;
        case 33: // BLOOM_FILTER_FP_CHANCE
          return BLOOM_FILTER_FP_CHANCE;
        case 34: // CACHING
          return CACHING;
        case 37: // DCLOCAL_READ_REPAIR_CHANCE
          return DCLOCAL_READ_REPAIR_CHANCE;
        case 38: // MEMTABLE_FLUSH_PERIOD_IN_MS
          return MEMTABLE_FLUSH_PERIOD_IN_MS;
        case 9: // ROW_CACHE_SIZE
          return ROW_CACHE_SIZE;
        case 11: // KEY_CACHE_SIZE
          return KEY_CACHE_SIZE;
        case 19: // ROW_CACHE_SAVE_PERIOD_IN_SECONDS
          return ROW_CACHE_SAVE_PERIOD_IN_SECONDS;
        case 20: // KEY_CACHE_SAVE_PERIOD_IN_SECONDS
          return KEY_CACHE_SAVE_PERIOD_IN_SECONDS;
        case 21: // MEMTABLE_FLUSH_AFTER_MINS
          return MEMTABLE_FLUSH_AFTER_MINS;
        case 22: // MEMTABLE_THROUGHPUT_IN_MB
          return MEMTABLE_THROUGHPUT_IN_MB;
        case 23: // MEMTABLE_OPERATIONS_IN_MILLIONS
          return MEMTABLE_OPERATIONS_IN_MILLIONS;
        case 25: // MERGE_SHARDS_CHANCE
          return MERGE_SHARDS_CHANCE;
        case 27: // ROW_CACHE_PROVIDER
          return ROW_CACHE_PROVIDER;
        case 31: // ROW_CACHE_KEYS_TO_SAVE
          return ROW_CACHE_KEYS_TO_SAVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READ_REPAIR_CHANCE_ISSET_ID = 0;
  private static final int __GC_GRACE_SECONDS_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __MIN_COMPACTION_THRESHOLD_ISSET_ID = 3;
  private static final int __MAX_COMPACTION_THRESHOLD_ISSET_ID = 4;
  private static final int __REPLICATE_ON_WRITE_ISSET_ID = 5;
  private static final int __BLOOM_FILTER_FP_CHANCE_ISSET_ID = 6;
  private static final int __DCLOCAL_READ_REPAIR_CHANCE_ISSET_ID = 7;
  private static final int __MEMTABLE_FLUSH_PERIOD_IN_MS_ISSET_ID = 8;
  private static final int __ROW_CACHE_SIZE_ISSET_ID = 9;
  private static final int __KEY_CACHE_SIZE_ISSET_ID = 10;
  private static final int __ROW_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID = 11;
  private static final int __KEY_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID = 12;
  private static final int __MEMTABLE_FLUSH_AFTER_MINS_ISSET_ID = 13;
  private static final int __MEMTABLE_THROUGHPUT_IN_MB_ISSET_ID = 14;
  private static final int __MEMTABLE_OPERATIONS_IN_MILLIONS_ISSET_ID = 15;
  private static final int __MERGE_SHARDS_CHANCE_ISSET_ID = 16;
  private static final int __ROW_CACHE_KEYS_TO_SAVE_ISSET_ID = 17;
  private BitSet __isset_bit_vector = new BitSet(18);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEYSPACE, new org.apache.thrift.meta_data.FieldMetaData("keyspace", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("column_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPARATOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("comparator_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBCOMPARATOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("subcomparator_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.READ_REPAIR_CHANCE, new org.apache.thrift.meta_data.FieldMetaData("read_repair_chance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COLUMN_METADATA, new org.apache.thrift.meta_data.FieldMetaData("column_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnDef.class))));
    tmpMap.put(_Fields.GC_GRACE_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("gc_grace_seconds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEFAULT_VALIDATION_CLASS, new org.apache.thrift.meta_data.FieldMetaData("default_validation_class", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_COMPACTION_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("min_compaction_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_COMPACTION_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("max_compaction_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLICATE_ON_WRITE, new org.apache.thrift.meta_data.FieldMetaData("replicate_on_write", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KEY_VALIDATION_CLASS, new org.apache.thrift.meta_data.FieldMetaData("key_validation_class", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_ALIAS, new org.apache.thrift.meta_data.FieldMetaData("key_alias", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.COMPACTION_STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("compaction_strategy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPACTION_STRATEGY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("compaction_strategy_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMPRESSION_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("compression_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BLOOM_FILTER_FP_CHANCE, new org.apache.thrift.meta_data.FieldMetaData("bloom_filter_fp_chance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CACHING, new org.apache.thrift.meta_data.FieldMetaData("caching", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DCLOCAL_READ_REPAIR_CHANCE, new org.apache.thrift.meta_data.FieldMetaData("dclocal_read_repair_chance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMTABLE_FLUSH_PERIOD_IN_MS, new org.apache.thrift.meta_data.FieldMetaData("memtable_flush_period_in_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROW_CACHE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("row_cache_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.KEY_CACHE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("key_cache_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ROW_CACHE_SAVE_PERIOD_IN_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("row_cache_save_period_in_seconds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KEY_CACHE_SAVE_PERIOD_IN_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("key_cache_save_period_in_seconds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMTABLE_FLUSH_AFTER_MINS, new org.apache.thrift.meta_data.FieldMetaData("memtable_flush_after_mins", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMTABLE_THROUGHPUT_IN_MB, new org.apache.thrift.meta_data.FieldMetaData("memtable_throughput_in_mb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMTABLE_OPERATIONS_IN_MILLIONS, new org.apache.thrift.meta_data.FieldMetaData("memtable_operations_in_millions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MERGE_SHARDS_CHANCE, new org.apache.thrift.meta_data.FieldMetaData("merge_shards_chance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ROW_CACHE_PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("row_cache_provider", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_CACHE_KEYS_TO_SAVE, new org.apache.thrift.meta_data.FieldMetaData("row_cache_keys_to_save", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CfDef.class, metaDataMap);
  }

  public CfDef() {
    this.column_type = "Standard";

    this.comparator_type = "BytesType";

    this.caching = "keys_only";

    this.dclocal_read_repair_chance = 0;

  }

  public CfDef(
    String keyspace,
    String name)
  {
    this();
    this.keyspace = keyspace;
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CfDef(CfDef other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetKeyspace()) {
      this.keyspace = other.keyspace;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetColumn_type()) {
      this.column_type = other.column_type;
    }
    if (other.isSetComparator_type()) {
      this.comparator_type = other.comparator_type;
    }
    if (other.isSetSubcomparator_type()) {
      this.subcomparator_type = other.subcomparator_type;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    this.read_repair_chance = other.read_repair_chance;
    if (other.isSetColumn_metadata()) {
      List<ColumnDef> __this__column_metadata = new ArrayList<ColumnDef>();
      for (ColumnDef other_element : other.column_metadata) {
        __this__column_metadata.add(new ColumnDef(other_element));
      }
      this.column_metadata = __this__column_metadata;
    }
    this.gc_grace_seconds = other.gc_grace_seconds;
    if (other.isSetDefault_validation_class()) {
      this.default_validation_class = other.default_validation_class;
    }
    this.id = other.id;
    this.min_compaction_threshold = other.min_compaction_threshold;
    this.max_compaction_threshold = other.max_compaction_threshold;
    this.replicate_on_write = other.replicate_on_write;
    if (other.isSetKey_validation_class()) {
      this.key_validation_class = other.key_validation_class;
    }
    if (other.isSetKey_alias()) {
      this.key_alias = org.apache.thrift.TBaseHelper.copyBinary(other.key_alias);
;
    }
    if (other.isSetCompaction_strategy()) {
      this.compaction_strategy = other.compaction_strategy;
    }
    if (other.isSetCompaction_strategy_options()) {
      Map<String,String> __this__compaction_strategy_options = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.compaction_strategy_options.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__compaction_strategy_options_copy_key = other_element_key;

        String __this__compaction_strategy_options_copy_value = other_element_value;

        __this__compaction_strategy_options.put(__this__compaction_strategy_options_copy_key, __this__compaction_strategy_options_copy_value);
      }
      this.compaction_strategy_options = __this__compaction_strategy_options;
    }
    if (other.isSetCompression_options()) {
      Map<String,String> __this__compression_options = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.compression_options.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__compression_options_copy_key = other_element_key;

        String __this__compression_options_copy_value = other_element_value;

        __this__compression_options.put(__this__compression_options_copy_key, __this__compression_options_copy_value);
      }
      this.compression_options = __this__compression_options;
    }
    this.bloom_filter_fp_chance = other.bloom_filter_fp_chance;
    if (other.isSetCaching()) {
      this.caching = other.caching;
    }
    this.dclocal_read_repair_chance = other.dclocal_read_repair_chance;
    this.memtable_flush_period_in_ms = other.memtable_flush_period_in_ms;
    this.row_cache_size = other.row_cache_size;
    this.key_cache_size = other.key_cache_size;
    this.row_cache_save_period_in_seconds = other.row_cache_save_period_in_seconds;
    this.key_cache_save_period_in_seconds = other.key_cache_save_period_in_seconds;
    this.memtable_flush_after_mins = other.memtable_flush_after_mins;
    this.memtable_throughput_in_mb = other.memtable_throughput_in_mb;
    this.memtable_operations_in_millions = other.memtable_operations_in_millions;
    this.merge_shards_chance = other.merge_shards_chance;
    if (other.isSetRow_cache_provider()) {
      this.row_cache_provider = other.row_cache_provider;
    }
    this.row_cache_keys_to_save = other.row_cache_keys_to_save;
  }

  public CfDef deepCopy() {
    return new CfDef(this);
  }

  @Override
  public void clear() {
    this.keyspace = null;
    this.name = null;
    this.column_type = "Standard";

    this.comparator_type = "BytesType";

    this.subcomparator_type = null;
    this.comment = null;
    setRead_repair_chanceIsSet(false);
    this.read_repair_chance = 0.0;
    this.column_metadata = null;
    setGc_grace_secondsIsSet(false);
    this.gc_grace_seconds = 0;
    this.default_validation_class = null;
    setIdIsSet(false);
    this.id = 0;
    setMin_compaction_thresholdIsSet(false);
    this.min_compaction_threshold = 0;
    setMax_compaction_thresholdIsSet(false);
    this.max_compaction_threshold = 0;
    setReplicate_on_writeIsSet(false);
    this.replicate_on_write = false;
    this.key_validation_class = null;
    this.key_alias = null;
    this.compaction_strategy = null;
    this.compaction_strategy_options = null;
    this.compression_options = null;
    setBloom_filter_fp_chanceIsSet(false);
    this.bloom_filter_fp_chance = 0.0;
    this.caching = "keys_only";

    this.dclocal_read_repair_chance = 0;

    setMemtable_flush_period_in_msIsSet(false);
    this.memtable_flush_period_in_ms = 0;
    setRow_cache_sizeIsSet(false);
    this.row_cache_size = 0.0;
    setKey_cache_sizeIsSet(false);
    this.key_cache_size = 0.0;
    setRow_cache_save_period_in_secondsIsSet(false);
    this.row_cache_save_period_in_seconds = 0;
    setKey_cache_save_period_in_secondsIsSet(false);
    this.key_cache_save_period_in_seconds = 0;
    setMemtable_flush_after_minsIsSet(false);
    this.memtable_flush_after_mins = 0;
    setMemtable_throughput_in_mbIsSet(false);
    this.memtable_throughput_in_mb = 0;
    setMemtable_operations_in_millionsIsSet(false);
    this.memtable_operations_in_millions = 0.0;
    setMerge_shards_chanceIsSet(false);
    this.merge_shards_chance = 0.0;
    this.row_cache_provider = null;
    setRow_cache_keys_to_saveIsSet(false);
    this.row_cache_keys_to_save = 0;
  }

  public String getKeyspace() {
    return this.keyspace;
  }

  public CfDef setKeyspace(String keyspace) {
    this.keyspace = keyspace;
    return this;
  }

  public void unsetKeyspace() {
    this.keyspace = null;
  }

  /** Returns true if field keyspace is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyspace() {
    return this.keyspace != null;
  }

  public void setKeyspaceIsSet(boolean value) {
    if (!value) {
      this.keyspace = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public CfDef setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getColumn_type() {
    return this.column_type;
  }

  public CfDef setColumn_type(String column_type) {
    this.column_type = column_type;
    return this;
  }

  public void unsetColumn_type() {
    this.column_type = null;
  }

  /** Returns true if field column_type is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_type() {
    return this.column_type != null;
  }

  public void setColumn_typeIsSet(boolean value) {
    if (!value) {
      this.column_type = null;
    }
  }

  public String getComparator_type() {
    return this.comparator_type;
  }

  public CfDef setComparator_type(String comparator_type) {
    this.comparator_type = comparator_type;
    return this;
  }

  public void unsetComparator_type() {
    this.comparator_type = null;
  }

  /** Returns true if field comparator_type is set (has been assigned a value) and false otherwise */
  public boolean isSetComparator_type() {
    return this.comparator_type != null;
  }

  public void setComparator_typeIsSet(boolean value) {
    if (!value) {
      this.comparator_type = null;
    }
  }

  public String getSubcomparator_type() {
    return this.subcomparator_type;
  }

  public CfDef setSubcomparator_type(String subcomparator_type) {
    this.subcomparator_type = subcomparator_type;
    return this;
  }

  public void unsetSubcomparator_type() {
    this.subcomparator_type = null;
  }

  /** Returns true if field subcomparator_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSubcomparator_type() {
    return this.subcomparator_type != null;
  }

  public void setSubcomparator_typeIsSet(boolean value) {
    if (!value) {
      this.subcomparator_type = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public CfDef setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public double getRead_repair_chance() {
    return this.read_repair_chance;
  }

  public CfDef setRead_repair_chance(double read_repair_chance) {
    this.read_repair_chance = read_repair_chance;
    setRead_repair_chanceIsSet(true);
    return this;
  }

  public void unsetRead_repair_chance() {
    __isset_bit_vector.clear(__READ_REPAIR_CHANCE_ISSET_ID);
  }

  /** Returns true if field read_repair_chance is set (has been assigned a value) and false otherwise */
  public boolean isSetRead_repair_chance() {
    return __isset_bit_vector.get(__READ_REPAIR_CHANCE_ISSET_ID);
  }

  public void setRead_repair_chanceIsSet(boolean value) {
    __isset_bit_vector.set(__READ_REPAIR_CHANCE_ISSET_ID, value);
  }

  public int getColumn_metadataSize() {
    return (this.column_metadata == null) ? 0 : this.column_metadata.size();
  }

  public java.util.Iterator<ColumnDef> getColumn_metadataIterator() {
    return (this.column_metadata == null) ? null : this.column_metadata.iterator();
  }

  public void addToColumn_metadata(ColumnDef elem) {
    if (this.column_metadata == null) {
      this.column_metadata = new ArrayList<ColumnDef>();
    }
    this.column_metadata.add(elem);
  }

  public List<ColumnDef> getColumn_metadata() {
    return this.column_metadata;
  }

  public CfDef setColumn_metadata(List<ColumnDef> column_metadata) {
    this.column_metadata = column_metadata;
    return this;
  }

  public void unsetColumn_metadata() {
    this.column_metadata = null;
  }

  /** Returns true if field column_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_metadata() {
    return this.column_metadata != null;
  }

  public void setColumn_metadataIsSet(boolean value) {
    if (!value) {
      this.column_metadata = null;
    }
  }

  public int getGc_grace_seconds() {
    return this.gc_grace_seconds;
  }

  public CfDef setGc_grace_seconds(int gc_grace_seconds) {
    this.gc_grace_seconds = gc_grace_seconds;
    setGc_grace_secondsIsSet(true);
    return this;
  }

  public void unsetGc_grace_seconds() {
    __isset_bit_vector.clear(__GC_GRACE_SECONDS_ISSET_ID);
  }

  /** Returns true if field gc_grace_seconds is set (has been assigned a value) and false otherwise */
  public boolean isSetGc_grace_seconds() {
    return __isset_bit_vector.get(__GC_GRACE_SECONDS_ISSET_ID);
  }

  public void setGc_grace_secondsIsSet(boolean value) {
    __isset_bit_vector.set(__GC_GRACE_SECONDS_ISSET_ID, value);
  }

  public String getDefault_validation_class() {
    return this.default_validation_class;
  }

  public CfDef setDefault_validation_class(String default_validation_class) {
    this.default_validation_class = default_validation_class;
    return this;
  }

  public void unsetDefault_validation_class() {
    this.default_validation_class = null;
  }

  /** Returns true if field default_validation_class is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_validation_class() {
    return this.default_validation_class != null;
  }

  public void setDefault_validation_classIsSet(boolean value) {
    if (!value) {
      this.default_validation_class = null;
    }
  }

  public int getId() {
    return this.id;
  }

  public CfDef setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getMin_compaction_threshold() {
    return this.min_compaction_threshold;
  }

  public CfDef setMin_compaction_threshold(int min_compaction_threshold) {
    this.min_compaction_threshold = min_compaction_threshold;
    setMin_compaction_thresholdIsSet(true);
    return this;
  }

  public void unsetMin_compaction_threshold() {
    __isset_bit_vector.clear(__MIN_COMPACTION_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field min_compaction_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_compaction_threshold() {
    return __isset_bit_vector.get(__MIN_COMPACTION_THRESHOLD_ISSET_ID);
  }

  public void setMin_compaction_thresholdIsSet(boolean value) {
    __isset_bit_vector.set(__MIN_COMPACTION_THRESHOLD_ISSET_ID, value);
  }

  public int getMax_compaction_threshold() {
    return this.max_compaction_threshold;
  }

  public CfDef setMax_compaction_threshold(int max_compaction_threshold) {
    this.max_compaction_threshold = max_compaction_threshold;
    setMax_compaction_thresholdIsSet(true);
    return this;
  }

  public void unsetMax_compaction_threshold() {
    __isset_bit_vector.clear(__MAX_COMPACTION_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field max_compaction_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_compaction_threshold() {
    return __isset_bit_vector.get(__MAX_COMPACTION_THRESHOLD_ISSET_ID);
  }

  public void setMax_compaction_thresholdIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_COMPACTION_THRESHOLD_ISSET_ID, value);
  }

  public boolean isReplicate_on_write() {
    return this.replicate_on_write;
  }

  public CfDef setReplicate_on_write(boolean replicate_on_write) {
    this.replicate_on_write = replicate_on_write;
    setReplicate_on_writeIsSet(true);
    return this;
  }

  public void unsetReplicate_on_write() {
    __isset_bit_vector.clear(__REPLICATE_ON_WRITE_ISSET_ID);
  }

  /** Returns true if field replicate_on_write is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicate_on_write() {
    return __isset_bit_vector.get(__REPLICATE_ON_WRITE_ISSET_ID);
  }

  public void setReplicate_on_writeIsSet(boolean value) {
    __isset_bit_vector.set(__REPLICATE_ON_WRITE_ISSET_ID, value);
  }

  public String getKey_validation_class() {
    return this.key_validation_class;
  }

  public CfDef setKey_validation_class(String key_validation_class) {
    this.key_validation_class = key_validation_class;
    return this;
  }

  public void unsetKey_validation_class() {
    this.key_validation_class = null;
  }

  /** Returns true if field key_validation_class is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_validation_class() {
    return this.key_validation_class != null;
  }

  public void setKey_validation_classIsSet(boolean value) {
    if (!value) {
      this.key_validation_class = null;
    }
  }

  public byte[] getKey_alias() {
    setKey_alias(org.apache.thrift.TBaseHelper.rightSize(key_alias));
    return key_alias == null ? null : key_alias.array();
  }

  public ByteBuffer bufferForKey_alias() {
    return key_alias;
  }

  public CfDef setKey_alias(byte[] key_alias) {
    setKey_alias(key_alias == null ? (ByteBuffer)null : ByteBuffer.wrap(key_alias));
    return this;
  }

  public CfDef setKey_alias(ByteBuffer key_alias) {
    this.key_alias = key_alias;
    return this;
  }

  public void unsetKey_alias() {
    this.key_alias = null;
  }

  /** Returns true if field key_alias is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_alias() {
    return this.key_alias != null;
  }

  public void setKey_aliasIsSet(boolean value) {
    if (!value) {
      this.key_alias = null;
    }
  }

  public String getCompaction_strategy() {
    return this.compaction_strategy;
  }

  public CfDef setCompaction_strategy(String compaction_strategy) {
    this.compaction_strategy = compaction_strategy;
    return this;
  }

  public void unsetCompaction_strategy() {
    this.compaction_strategy = null;
  }

  /** Returns true if field compaction_strategy is set (has been assigned a value) and false otherwise */
  public boolean isSetCompaction_strategy() {
    return this.compaction_strategy != null;
  }

  public void setCompaction_strategyIsSet(boolean value) {
    if (!value) {
      this.compaction_strategy = null;
    }
  }

  public int getCompaction_strategy_optionsSize() {
    return (this.compaction_strategy_options == null) ? 0 : this.compaction_strategy_options.size();
  }

  public void putToCompaction_strategy_options(String key, String val) {
    if (this.compaction_strategy_options == null) {
      this.compaction_strategy_options = new HashMap<String,String>();
    }
    this.compaction_strategy_options.put(key, val);
  }

  public Map<String,String> getCompaction_strategy_options() {
    return this.compaction_strategy_options;
  }

  public CfDef setCompaction_strategy_options(Map<String,String> compaction_strategy_options) {
    this.compaction_strategy_options = compaction_strategy_options;
    return this;
  }

  public void unsetCompaction_strategy_options() {
    this.compaction_strategy_options = null;
  }

  /** Returns true if field compaction_strategy_options is set (has been assigned a value) and false otherwise */
  public boolean isSetCompaction_strategy_options() {
    return this.compaction_strategy_options != null;
  }

  public void setCompaction_strategy_optionsIsSet(boolean value) {
    if (!value) {
      this.compaction_strategy_options = null;
    }
  }

  public int getCompression_optionsSize() {
    return (this.compression_options == null) ? 0 : this.compression_options.size();
  }

  public void putToCompression_options(String key, String val) {
    if (this.compression_options == null) {
      this.compression_options = new HashMap<String,String>();
    }
    this.compression_options.put(key, val);
  }

  public Map<String,String> getCompression_options() {
    return this.compression_options;
  }

  public CfDef setCompression_options(Map<String,String> compression_options) {
    this.compression_options = compression_options;
    return this;
  }

  public void unsetCompression_options() {
    this.compression_options = null;
  }

  /** Returns true if field compression_options is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression_options() {
    return this.compression_options != null;
  }

  public void setCompression_optionsIsSet(boolean value) {
    if (!value) {
      this.compression_options = null;
    }
  }

  public double getBloom_filter_fp_chance() {
    return this.bloom_filter_fp_chance;
  }

  public CfDef setBloom_filter_fp_chance(double bloom_filter_fp_chance) {
    this.bloom_filter_fp_chance = bloom_filter_fp_chance;
    setBloom_filter_fp_chanceIsSet(true);
    return this;
  }

  public void unsetBloom_filter_fp_chance() {
    __isset_bit_vector.clear(__BLOOM_FILTER_FP_CHANCE_ISSET_ID);
  }

  /** Returns true if field bloom_filter_fp_chance is set (has been assigned a value) and false otherwise */
  public boolean isSetBloom_filter_fp_chance() {
    return __isset_bit_vector.get(__BLOOM_FILTER_FP_CHANCE_ISSET_ID);
  }

  public void setBloom_filter_fp_chanceIsSet(boolean value) {
    __isset_bit_vector.set(__BLOOM_FILTER_FP_CHANCE_ISSET_ID, value);
  }

  public String getCaching() {
    return this.caching;
  }

  public CfDef setCaching(String caching) {
    this.caching = caching;
    return this;
  }

  public void unsetCaching() {
    this.caching = null;
  }

  /** Returns true if field caching is set (has been assigned a value) and false otherwise */
  public boolean isSetCaching() {
    return this.caching != null;
  }

  public void setCachingIsSet(boolean value) {
    if (!value) {
      this.caching = null;
    }
  }

  public double getDclocal_read_repair_chance() {
    return this.dclocal_read_repair_chance;
  }

  public CfDef setDclocal_read_repair_chance(double dclocal_read_repair_chance) {
    this.dclocal_read_repair_chance = dclocal_read_repair_chance;
    setDclocal_read_repair_chanceIsSet(true);
    return this;
  }

  public void unsetDclocal_read_repair_chance() {
    __isset_bit_vector.clear(__DCLOCAL_READ_REPAIR_CHANCE_ISSET_ID);
  }

  /** Returns true if field dclocal_read_repair_chance is set (has been assigned a value) and false otherwise */
  public boolean isSetDclocal_read_repair_chance() {
    return __isset_bit_vector.get(__DCLOCAL_READ_REPAIR_CHANCE_ISSET_ID);
  }

  public void setDclocal_read_repair_chanceIsSet(boolean value) {
    __isset_bit_vector.set(__DCLOCAL_READ_REPAIR_CHANCE_ISSET_ID, value);
  }

  public int getMemtable_flush_period_in_ms() {
    return this.memtable_flush_period_in_ms;
  }

  public CfDef setMemtable_flush_period_in_ms(int memtable_flush_period_in_ms) {
    this.memtable_flush_period_in_ms = memtable_flush_period_in_ms;
    setMemtable_flush_period_in_msIsSet(true);
    return this;
  }

  public void unsetMemtable_flush_period_in_ms() {
    __isset_bit_vector.clear(__MEMTABLE_FLUSH_PERIOD_IN_MS_ISSET_ID);
  }

  /** Returns true if field memtable_flush_period_in_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetMemtable_flush_period_in_ms() {
    return __isset_bit_vector.get(__MEMTABLE_FLUSH_PERIOD_IN_MS_ISSET_ID);
  }

  public void setMemtable_flush_period_in_msIsSet(boolean value) {
    __isset_bit_vector.set(__MEMTABLE_FLUSH_PERIOD_IN_MS_ISSET_ID, value);
  }

  /**
   * @deprecated
   */
  public double getRow_cache_size() {
    return this.row_cache_size;
  }

  /**
   * @deprecated
   */
  public CfDef setRow_cache_size(double row_cache_size) {
    this.row_cache_size = row_cache_size;
    setRow_cache_sizeIsSet(true);
    return this;
  }

  public void unsetRow_cache_size() {
    __isset_bit_vector.clear(__ROW_CACHE_SIZE_ISSET_ID);
  }

  /** Returns true if field row_cache_size is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_cache_size() {
    return __isset_bit_vector.get(__ROW_CACHE_SIZE_ISSET_ID);
  }

  public void setRow_cache_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__ROW_CACHE_SIZE_ISSET_ID, value);
  }

  /**
   * @deprecated
   */
  public double getKey_cache_size() {
    return this.key_cache_size;
  }

  /**
   * @deprecated
   */
  public CfDef setKey_cache_size(double key_cache_size) {
    this.key_cache_size = key_cache_size;
    setKey_cache_sizeIsSet(true);
    return this;
  }

  public void unsetKey_cache_size() {
    __isset_bit_vector.clear(__KEY_CACHE_SIZE_ISSET_ID);
  }

  /** Returns true if field key_cache_size is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_cache_size() {
    return __isset_bit_vector.get(__KEY_CACHE_SIZE_ISSET_ID);
  }

  public void setKey_cache_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__KEY_CACHE_SIZE_ISSET_ID, value);
  }

  /**
   * @deprecated
   */
  public int getRow_cache_save_period_in_seconds() {
    return this.row_cache_save_period_in_seconds;
  }

  /**
   * @deprecated
   */
  public CfDef setRow_cache_save_period_in_seconds(int row_cache_save_period_in_seconds) {
    this.row_cache_save_period_in_seconds = row_cache_save_period_in_seconds;
    setRow_cache_save_period_in_secondsIsSet(true);
    return this;
  }

  public void unsetRow_cache_save_period_in_seconds() {
    __isset_bit_vector.clear(__ROW_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID);
  }

  /** Returns true if field row_cache_save_period_in_seconds is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_cache_save_period_in_seconds() {
    return __isset_bit_vector.get(__ROW_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID);
  }

  public void setRow_cache_save_period_in_secondsIsSet(boolean value) {
    __isset_bit_vector.set(__ROW_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID, value);
  }

  /**
   * @deprecated
   */
  public int getKey_cache_save_period_in_seconds() {
    return this.key_cache_save_period_in_seconds;
  }

  /**
   * @deprecated
   */
  public CfDef setKey_cache_save_period_in_seconds(int key_cache_save_period_in_seconds) {
    this.key_cache_save_period_in_seconds = key_cache_save_period_in_seconds;
    setKey_cache_save_period_in_secondsIsSet(true);
    return this;
  }

  public void unsetKey_cache_save_period_in_seconds() {
    __isset_bit_vector.clear(__KEY_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID);
  }

  /** Returns true if field key_cache_save_period_in_seconds is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_cache_save_period_in_seconds() {
    return __isset_bit_vector.get(__KEY_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID);
  }

  public void setKey_cache_save_period_in_secondsIsSet(boolean value) {
    __isset_bit_vector.set(__KEY_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID, value);
  }

  /**
   * @deprecated
   */
  public int getMemtable_flush_after_mins() {
    return this.memtable_flush_after_mins;
  }

  /**
   * @deprecated
   */
  public CfDef setMemtable_flush_after_mins(int memtable_flush_after_mins) {
    this.memtable_flush_after_mins = memtable_flush_after_mins;
    setMemtable_flush_after_minsIsSet(true);
    return this;
  }

  public void unsetMemtable_flush_after_mins() {
    __isset_bit_vector.clear(__MEMTABLE_FLUSH_AFTER_MINS_ISSET_ID);
  }

  /** Returns true if field memtable_flush_after_mins is set (has been assigned a value) and false otherwise */
  public boolean isSetMemtable_flush_after_mins() {
    return __isset_bit_vector.get(__MEMTABLE_FLUSH_AFTER_MINS_ISSET_ID);
  }

  public void setMemtable_flush_after_minsIsSet(boolean value) {
    __isset_bit_vector.set(__MEMTABLE_FLUSH_AFTER_MINS_ISSET_ID, value);
  }

  /**
   * @deprecated
   */
  public int getMemtable_throughput_in_mb() {
    return this.memtable_throughput_in_mb;
  }

  /**
   * @deprecated
   */
  public CfDef setMemtable_throughput_in_mb(int memtable_throughput_in_mb) {
    this.memtable_throughput_in_mb = memtable_throughput_in_mb;
    setMemtable_throughput_in_mbIsSet(true);
    return this;
  }

  public void unsetMemtable_throughput_in_mb() {
    __isset_bit_vector.clear(__MEMTABLE_THROUGHPUT_IN_MB_ISSET_ID);
  }

  /** Returns true if field memtable_throughput_in_mb is set (has been assigned a value) and false otherwise */
  public boolean isSetMemtable_throughput_in_mb() {
    return __isset_bit_vector.get(__MEMTABLE_THROUGHPUT_IN_MB_ISSET_ID);
  }

  public void setMemtable_throughput_in_mbIsSet(boolean value) {
    __isset_bit_vector.set(__MEMTABLE_THROUGHPUT_IN_MB_ISSET_ID, value);
  }

  /**
   * @deprecated
   */
  public double getMemtable_operations_in_millions() {
    return this.memtable_operations_in_millions;
  }

  /**
   * @deprecated
   */
  public CfDef setMemtable_operations_in_millions(double memtable_operations_in_millions) {
    this.memtable_operations_in_millions = memtable_operations_in_millions;
    setMemtable_operations_in_millionsIsSet(true);
    return this;
  }

  public void unsetMemtable_operations_in_millions() {
    __isset_bit_vector.clear(__MEMTABLE_OPERATIONS_IN_MILLIONS_ISSET_ID);
  }

  /** Returns true if field memtable_operations_in_millions is set (has been assigned a value) and false otherwise */
  public boolean isSetMemtable_operations_in_millions() {
    return __isset_bit_vector.get(__MEMTABLE_OPERATIONS_IN_MILLIONS_ISSET_ID);
  }

  public void setMemtable_operations_in_millionsIsSet(boolean value) {
    __isset_bit_vector.set(__MEMTABLE_OPERATIONS_IN_MILLIONS_ISSET_ID, value);
  }

  /**
   * @deprecated
   */
  public double getMerge_shards_chance() {
    return this.merge_shards_chance;
  }

  /**
   * @deprecated
   */
  public CfDef setMerge_shards_chance(double merge_shards_chance) {
    this.merge_shards_chance = merge_shards_chance;
    setMerge_shards_chanceIsSet(true);
    return this;
  }

  public void unsetMerge_shards_chance() {
    __isset_bit_vector.clear(__MERGE_SHARDS_CHANCE_ISSET_ID);
  }

  /** Returns true if field merge_shards_chance is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_shards_chance() {
    return __isset_bit_vector.get(__MERGE_SHARDS_CHANCE_ISSET_ID);
  }

  public void setMerge_shards_chanceIsSet(boolean value) {
    __isset_bit_vector.set(__MERGE_SHARDS_CHANCE_ISSET_ID, value);
  }

  /**
   * @deprecated
   */
  public String getRow_cache_provider() {
    return this.row_cache_provider;
  }

  /**
   * @deprecated
   */
  public CfDef setRow_cache_provider(String row_cache_provider) {
    this.row_cache_provider = row_cache_provider;
    return this;
  }

  public void unsetRow_cache_provider() {
    this.row_cache_provider = null;
  }

  /** Returns true if field row_cache_provider is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_cache_provider() {
    return this.row_cache_provider != null;
  }

  public void setRow_cache_providerIsSet(boolean value) {
    if (!value) {
      this.row_cache_provider = null;
    }
  }

  /**
   * @deprecated
   */
  public int getRow_cache_keys_to_save() {
    return this.row_cache_keys_to_save;
  }

  /**
   * @deprecated
   */
  public CfDef setRow_cache_keys_to_save(int row_cache_keys_to_save) {
    this.row_cache_keys_to_save = row_cache_keys_to_save;
    setRow_cache_keys_to_saveIsSet(true);
    return this;
  }

  public void unsetRow_cache_keys_to_save() {
    __isset_bit_vector.clear(__ROW_CACHE_KEYS_TO_SAVE_ISSET_ID);
  }

  /** Returns true if field row_cache_keys_to_save is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_cache_keys_to_save() {
    return __isset_bit_vector.get(__ROW_CACHE_KEYS_TO_SAVE_ISSET_ID);
  }

  public void setRow_cache_keys_to_saveIsSet(boolean value) {
    __isset_bit_vector.set(__ROW_CACHE_KEYS_TO_SAVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEYSPACE:
      if (value == null) {
        unsetKeyspace();
      } else {
        setKeyspace((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case COLUMN_TYPE:
      if (value == null) {
        unsetColumn_type();
      } else {
        setColumn_type((String)value);
      }
      break;

    case COMPARATOR_TYPE:
      if (value == null) {
        unsetComparator_type();
      } else {
        setComparator_type((String)value);
      }
      break;

    case SUBCOMPARATOR_TYPE:
      if (value == null) {
        unsetSubcomparator_type();
      } else {
        setSubcomparator_type((String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case READ_REPAIR_CHANCE:
      if (value == null) {
        unsetRead_repair_chance();
      } else {
        setRead_repair_chance((Double)value);
      }
      break;

    case COLUMN_METADATA:
      if (value == null) {
        unsetColumn_metadata();
      } else {
        setColumn_metadata((List<ColumnDef>)value);
      }
      break;

    case GC_GRACE_SECONDS:
      if (value == null) {
        unsetGc_grace_seconds();
      } else {
        setGc_grace_seconds((Integer)value);
      }
      break;

    case DEFAULT_VALIDATION_CLASS:
      if (value == null) {
        unsetDefault_validation_class();
      } else {
        setDefault_validation_class((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case MIN_COMPACTION_THRESHOLD:
      if (value == null) {
        unsetMin_compaction_threshold();
      } else {
        setMin_compaction_threshold((Integer)value);
      }
      break;

    case MAX_COMPACTION_THRESHOLD:
      if (value == null) {
        unsetMax_compaction_threshold();
      } else {
        setMax_compaction_threshold((Integer)value);
      }
      break;

    case REPLICATE_ON_WRITE:
      if (value == null) {
        unsetReplicate_on_write();
      } else {
        setReplicate_on_write((Boolean)value);
      }
      break;

    case KEY_VALIDATION_CLASS:
      if (value == null) {
        unsetKey_validation_class();
      } else {
        setKey_validation_class((String)value);
      }
      break;

    case KEY_ALIAS:
      if (value == null) {
        unsetKey_alias();
      } else {
        setKey_alias((ByteBuffer)value);
      }
      break;

    case COMPACTION_STRATEGY:
      if (value == null) {
        unsetCompaction_strategy();
      } else {
        setCompaction_strategy((String)value);
      }
      break;

    case COMPACTION_STRATEGY_OPTIONS:
      if (value == null) {
        unsetCompaction_strategy_options();
      } else {
        setCompaction_strategy_options((Map<String,String>)value);
      }
      break;

    case COMPRESSION_OPTIONS:
      if (value == null) {
        unsetCompression_options();
      } else {
        setCompression_options((Map<String,String>)value);
      }
      break;

    case BLOOM_FILTER_FP_CHANCE:
      if (value == null) {
        unsetBloom_filter_fp_chance();
      } else {
        setBloom_filter_fp_chance((Double)value);
      }
      break;

    case CACHING:
      if (value == null) {
        unsetCaching();
      } else {
        setCaching((String)value);
      }
      break;

    case DCLOCAL_READ_REPAIR_CHANCE:
      if (value == null) {
        unsetDclocal_read_repair_chance();
      } else {
        setDclocal_read_repair_chance((Double)value);
      }
      break;

    case MEMTABLE_FLUSH_PERIOD_IN_MS:
      if (value == null) {
        unsetMemtable_flush_period_in_ms();
      } else {
        setMemtable_flush_period_in_ms((Integer)value);
      }
      break;

    case ROW_CACHE_SIZE:
      if (value == null) {
        unsetRow_cache_size();
      } else {
        setRow_cache_size((Double)value);
      }
      break;

    case KEY_CACHE_SIZE:
      if (value == null) {
        unsetKey_cache_size();
      } else {
        setKey_cache_size((Double)value);
      }
      break;

    case ROW_CACHE_SAVE_PERIOD_IN_SECONDS:
      if (value == null) {
        unsetRow_cache_save_period_in_seconds();
      } else {
        setRow_cache_save_period_in_seconds((Integer)value);
      }
      break;

    case KEY_CACHE_SAVE_PERIOD_IN_SECONDS:
      if (value == null) {
        unsetKey_cache_save_period_in_seconds();
      } else {
        setKey_cache_save_period_in_seconds((Integer)value);
      }
      break;

    case MEMTABLE_FLUSH_AFTER_MINS:
      if (value == null) {
        unsetMemtable_flush_after_mins();
      } else {
        setMemtable_flush_after_mins((Integer)value);
      }
      break;

    case MEMTABLE_THROUGHPUT_IN_MB:
      if (value == null) {
        unsetMemtable_throughput_in_mb();
      } else {
        setMemtable_throughput_in_mb((Integer)value);
      }
      break;

    case MEMTABLE_OPERATIONS_IN_MILLIONS:
      if (value == null) {
        unsetMemtable_operations_in_millions();
      } else {
        setMemtable_operations_in_millions((Double)value);
      }
      break;

    case MERGE_SHARDS_CHANCE:
      if (value == null) {
        unsetMerge_shards_chance();
      } else {
        setMerge_shards_chance((Double)value);
      }
      break;

    case ROW_CACHE_PROVIDER:
      if (value == null) {
        unsetRow_cache_provider();
      } else {
        setRow_cache_provider((String)value);
      }
      break;

    case ROW_CACHE_KEYS_TO_SAVE:
      if (value == null) {
        unsetRow_cache_keys_to_save();
      } else {
        setRow_cache_keys_to_save((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEYSPACE:
      return getKeyspace();

    case NAME:
      return getName();

    case COLUMN_TYPE:
      return getColumn_type();

    case COMPARATOR_TYPE:
      return getComparator_type();

    case SUBCOMPARATOR_TYPE:
      return getSubcomparator_type();

    case COMMENT:
      return getComment();

    case READ_REPAIR_CHANCE:
      return Double.valueOf(getRead_repair_chance());

    case COLUMN_METADATA:
      return getColumn_metadata();

    case GC_GRACE_SECONDS:
      return Integer.valueOf(getGc_grace_seconds());

    case DEFAULT_VALIDATION_CLASS:
      return getDefault_validation_class();

    case ID:
      return Integer.valueOf(getId());

    case MIN_COMPACTION_THRE
