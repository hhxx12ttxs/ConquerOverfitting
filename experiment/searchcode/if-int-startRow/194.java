/*
 * ============================================================
 * [ SYSTEM ]		: Web::Java ?? ( HOBOKEN )
 * [ PROJECT ]		: HOBOKEN Project
 * 
 * $Id: SpreadData.java 1098 2009-07-29 10:15:28Z mezawa_takuji $
 * ============================================================
 */

package prj.hoboken.patrasche.service.poi;

import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;
import java.util.SortedMap;
import java.util.TreeMap;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import prj.hoboken.patrasche.Shared;
import prj.hoboken.patrasche.service.poi.SpreadWorksheet;
import prj.hoboken.patrasche.service.poi.exception.IllegalSpreadAccessException;
import prj.hoboken.patrasche.util.SvoUtil;

/**
 * ???????????????????????????????????????????????
 * 
 * POI ????????????????????????????????????????????????????????
 * ?????????????????????????????????????????<p>
 * 
 * ???????????? SpreadWorksheet ????????????????????
 * 
 * NOTE:<br>
 * <blockquote>Apache POI ?????????</blockquote>
 * 
 * <p>$Revision: 1098 $<br>$Date: 2009-07-29 19:15:28 +0900 (?, 29 7 2009) $</p>
 *
 * @since  J2SDK 1.4 : Servlet2.3/JSP1.2 : Apache Struts 1.2 : SpringFramework 1.2
 * @since  Patrasche 3.0
 * 
 * @author
 *     Mezawa Takuji  ( HOBOKEN Project )<br>
 *     <!-- *???*  ( CompanyName )<br> -->
 */
public final class SpreadData implements Serializable {

    /* ????????????????????UID */
    private static final long serialVersionUID = 1049712780212364244L;
    
    /* ????????
     * Findbugs: transient ?????
     */
    private transient final HSSFWorkbook book;
    /* ???????????????????????????????????????????? */
    private SortedMap wsheets = new TreeMap();
    
    /**
     * ??? <code>SpreadData</code> ??????????????
     * 
     * @param book ????????
     */
    public SpreadData(HSSFWorkbook book) {
        this.book = book;
    }

    // ------------------------------------------------------------ [ setter ]

    /**
     * ?????????????????????????????
     * ??????????? {@link #setWorksheet(String, SpreadWorksheet)} ???????????????
     * 
     * @see #setWorksheet(String, SpreadWorksheet)
     * 
     * @param number ?????
     * @param sheet ??????????
     * <ul type="circle">
     * <li>true     : ??????????????
     * <li>false    : ?????????????????????
     * </ul>
     */
    public void setWorksheet(int number, SpreadWorksheet sheet) {
        this.wsheets.put(String.valueOf(number), sheet);
    }
    
    /**
     * ????????????????????????????
     * ??????????? {@link #setWorksheet(int, SpreadWorksheet)} ???????????????
     * 
     * @see #setWorksheet(int, SpreadWorksheet)
     * 
     * @param name ????
     * @param sheet ??????????
     * <ul type="circle">
     * <li>true     : ??????????????
     * <li>false    : ?????????????????????
     * </ul>
     */
    public void setWorksheet(String name, SpreadWorksheet sheet) {
        this.wsheets.put(name, sheet);
    }
    
    // ------------------------------------------------------------ [ getter ]

    /**
     * ???????????????
     * ?????????????? POI ? HSSFWorkbook ???????? POI ???????????????
     * 
     * @return ????????
     */
    public HSSFWorkbook getHSSFBook() {
        return this.book;
    }
    
    /**
     * ??????????????????????????????
     * ???????????????? SpreadWorksheet ???POI ? HSSFSheet ?????????????????
     * ????????????? HSSFSheet ???????????????????????????????<p>
     * 
     * ???????????????????????????????????????? IllegalArgumentException ?
     * ????????<p>
     * 
     * ???????{@link #getSpreadSheet(String)} ???????????????
     * 
     * @see #getSpreadSheet(String)
     * 
     * @param number ?????
     * @return ??????????
     */
    public SpreadWorksheet getSpreadSheet(int number) {
        SpreadWorksheet sheet = null;
        if (this.wsheets.containsKey(String.valueOf(number))) {
            sheet = (SpreadWorksheet)this.wsheets.get(String.valueOf(number));
        } else {
            throw new IllegalArgumentException("???????????????? : ?????="+number);
        }
        return sheet;
    }
    
    /**
     * ?????????????????????????????
     * ???????????????? SpreadWorksheet ???POI ? HSSFSheet ?????????????????
     * ????????????? HSSFSheet ???????????????????????????????<p>
     * 
     * ??????????????????????????????????????? IllegalArgumentException ?
     * ????????<p>
     * 
     * ???????{@link #getSpreadSheet(int)} ???????????????
     * 
     * @see #getSpreadSheet(int)
     * 
     * @param name 
     * @return ??????????
     */
    public SpreadWorksheet getSpreadSheet(String name) {
        SpreadWorksheet sheet = null;
        if (this.wsheets.containsKey(name)) {
            sheet = (SpreadWorksheet)this.wsheets.get(name);
        } else {
            throw new IllegalArgumentException("???????????????? : ????="+name);
        }
        return sheet;
    }
    
    // ------------------------------------------------------------ [ ???????? ]

    /**
     * ?????????????????????????????
     * ??????????????? SpreadCell ?????????????????????????????<p>
     * 
     * ?????? ??? SpreadWorksheet ????? getCell() ?????????<p>
     * 
     * ???????????????????????????????????????????? IllegalSpreadAccessException ?
     * ????????<p>
     * 
     * ???????{@link #getCell(String, int, int)} ???????????????
     * 
     * @see prj.hoboken.patrasche.service.poi.config.SpreadWorksheet#getCell(HSSFWorkbook, int, int)
     * @see #getCell(String, int, int)
     * 
     * @param number ?????
     * @param rownum ??????
     * @param colnum ??????
     * @return ?????????
     * @throws IllegalSpreadAccessException ?????????????????????????????
     */
    public SpreadCell getCell(int number, int rownum, int colnum) throws IllegalSpreadAccessException {
        SpreadWorksheet sheet = getSpreadSheet(number);
        return sheet.getCell(this.book, rownum, colnum);
    }
    
    /**
     * ????????????????????????????
     * ??????????????? SpreadCell ?????????????????????????????<p>
     * 
     * ?????? ??? SpreadWorksheet ????? getCell() ?????????<p>
     * 
     * ???????????????????????????????????????????? IllegalSpreadAccessException ?
     * ????????<p>
     * 
     * ???????{@link #getCell(int, int, int)} ???????????????
     * 
     * @see prj.hoboken.patrasche.service.poi.config.SpreadWorksheet#getCell(HSSFWorkbook, int, int)
     * @see #getCell(int, int, int)
     * 
     * @param name ????
     * @param rownum ??????
     * @param colnum ??????
     * @return ?????????
     * @throws IllegalSpreadAccessException ?????????????????????????????
     */
    public SpreadCell getCell(String name, int rownum, int colnum) throws IllegalSpreadAccessException {
        SpreadWorksheet sheet = getSpreadSheet(name);
        return sheet.getCell(this.book, rownum, colnum);
    }

    /**
     * ?????????????????????????????
     * ??????????????? List ????? SpreadCell ?????????????????????????????????
     * ?????????????????<p>
     * 
     * ?????? ??? SpreadWorksheet ????? getRange() ?????????????? List ????? ?? List ????????
     * ???? List ????????? SpreadCell ?????????????? List ??????? List ???????????
     * ????????????SpreadWorksheet#getRange() ???????????<p>
     * 
     * ???????????????????????????????????????????? IllegalSpreadAccessException ?
     * ???????????????????????????????<p>
     * 
     * ???????{@link #getRangeCell(String, int, int, int, int)} ???????????????
     * 
     * @see prj.hoboken.patrasche.service.poi.config.SpreadWorksheet#getRange(HSSFWorkbook, int, int, int, int)
     * @see #getRangeCell(String, int, int, int, int)
     * 
     * @param number ?????
     * @param startrow ????????
     * @param startcol ????????
     * @param endrow ????????
     * @param endcol ????????
     * @return ??????????????? List ???????
     * @throws IllegalSpreadAccessException ??????????????
     */
    public List getRangeCell(int number, int startrow, int startcol, int endrow, int endcol) throws IllegalSpreadAccessException {
        SpreadWorksheet sheet = getSpreadSheet(number);
        return sheet.getRange(this.book, startrow, startcol, endrow, endcol);
    }
    
    /**
     * ????????????????????????????
     * ??????????????? List ????? SpreadCell ?????????????????????????????????
     * ?????????????????<p>
     * 
     * ?????? ??? SpreadWorksheet ????? getRange() ?????????????? List ????? ?? List ????????
     * ???? List ????????? SpreadCell ?????????????? List ??????? List ???????????
     * ????????????SpreadWorksheet#getRange() ???????????<p>
     * 
     * ???????????????????????????????????????????? IllegalSpreadAccessException ?
     * ???????????????????????????????<p>
     * 
     * ???????{@link #getRangeCell(int, int, int, int, int)} ???????????????
     * 
     * @see prj.hoboken.patrasche.service.poi.config.SpreadWorksheet#getRange(HSSFWorkbook, int, int, int, int)
     * @see #getRangeCell(int, int, int, int, int)
     * 
     * @param name ????
     * @param startrow ????????
     * @param startcol ????????
     * @param endrow ????????
     * @param endcol ????????
     * @return ??????????????? List ???????
     * @throws IllegalSpreadAccessException ??????????????
     */
    public List getRangeCell(String name, int startrow, int startcol, int endrow, int endcol) throws IllegalSpreadAccessException {
        SpreadWorksheet sheet = getSpreadSheet(name);
        return sheet.getRange(this.book, startrow, startcol, endrow, endcol);
    }

    /**
     * ?????????????????????????????
     * ??????????????? List ????? SpreadCell ?????????????????<p>
     * 
     * List ?????????????????????????????????????????????????????????
     * ??????????????????????????? OffsetHolder ???????<p>
     * 
     * ??????????? getCell() ????????????????????????? getCell() ???????????? List ???????
     * ???????????????<p> 
     * 
     * ???????????????????????????????????????????? IllegalSpreadAccessException ?
     * ????????<p>
     * 
     * ???????{@link #getCellsByOffset(String)} ???????????????
     * 
     * @see prj.hoboken.patrasche.service.poi.config.OffsetHolder
     * @see #getCell(int, int, int)
     * @see #getCellsByOffset(String)
     * 
     * @param number ?????
     * @param offset ???????
     * @return ??????????????? List ???????
     * @throws IllegalSpreadAccessException ?????????????????????????????
     */
    public List getCellsByOffset(int number, List offset) throws IllegalSpreadAccessException {
        List cells = new LinkedList();
        for (int ix=0, size=offset.size(); ix<size; ix++) {
            String offset_work = offset.get(ix).toString();
            if (offset_work.indexOf(Shared.COLON) >= 0) {
                offset_work = null;
            } else {
                int[] position = getReadCellPosition(offset_work);
                cells.add(getCell(number, position[0], position[1]));
            }
        }
        
        return cells;
    }
    
    /**
     * ????????????????????????????
     * ??????????????? List ????? SpreadCell ?????????????????<p>
     * 
     * List ?????????????????????????????????????????????????????????
     * ??????????????????????????? OffsetHolder ???????<p>
     * 
     * ??????????? getCell() ????????????????????????? getCell() ???????????? List ???????
     * ???????????????<p> 
     * 
     * ???????????????????????????????????????????? IllegalSpreadAccessException ?
     * ????????<p>
     * 
     * ???????{@link #getCellsByOffset(int)} ???????????????
     * 
     * @see prj.hoboken.patrasche.service.poi.config.OffsetHolder
     * @see #getCell(String, int, int)
     * @see #getCellsByOffset(int)
     * 
     * @param name ????
     * @param offset ???????
     * @return ??????????????? List ???????
     * @throws IllegalSpreadAccessException ?????????????????????????????
     */
    public List getCellsByOffset(String name, List offset) throws IllegalSpreadAccessException {
        List cells = new LinkedList();
        for (int ix=0, size=offset.size(); ix<size; ix++) {
            String offset_work = offset.get(ix).toString();
            if (offset_work.indexOf(Shared.COLON) >= 0) {
                offset_work = null;
            } else {
                int[] position = getReadCellPosition(offset_work);
                cells.add(getCell(name, position[0], position[1]));
            }
        }
        
        return cells;
    }
    
    /**
     * ?????????????????????????????
     * ??????????????? List ????? List ? ???????? SpreadCell ?????????????????<p>
     * 
     * ?????? ???? getRangeCell() ????????????????????????? getRangeCell() ????????????
     * List ??????????????????????<p>
     * 
     * ???????????????????????????????????????????? IllegalSpreadAccessException ?
     * ???????????????????????????????<p>
     * 
     * ???????{@link #getRangeByOffset(String)} ???????????????
     * 
     * @see prj.hoboken.patrasche.service.poi.config.OffsetHolder
     * @see #getRangeCell(int, int, int, int, int)
     * @see #getRangeByOffset(String)
     * 
     * @param number ?????
     * @param offset ???????
     * @return ??????????????? List ???????
     * @throws IllegalSpreadAccessException ??????????????
     */
    public List getRangeByOffset(int number, List offset) throws IllegalSpreadAccessException {
        List range = new LinkedList();
        for (int ix=0, size=offset.size(); ix<size; ix++) {
            String offset_work = offset.get(ix).toString();
            if (offset_work.indexOf(Shared.COLON) >= 0) {
                int[] position = getReadRangePosition(offset_work);
                range.add(SvoUtil.defensiveCopyList(getRangeCell(number, position[0], position[1], position[2], position[3])));
            } else {
                offset_work = null;
            }
        }
        
        return range;
    }
    
    /**
     * ?????????????????????????????
     * ??????????????? List ????? List ? ???????? SpreadCell ?????????????????<p>
     * 
     * ?????? ???? getRangeCell() ????????????????????????? getRangeCell() ????????????
     * List ??????????????????????<p>
     * 
     * ???????????????????????????????????????????? IllegalSpreadAccessException ?
     * ???????????????????????????????<p>
     * 
     * ???????{@link #getRangeByOffset(int)} ???????????????
     * 
     * @see prj.hoboken.patrasche.service.poi.config.OffsetHolder
     * @see #getRangeCell(String, int, int, int, int)
     * @see #getRangeByOffset(int)
     * 
     * @param name ????
     * @param offset ???????
     * @return ??????????????? List ???????
     * @throws IllegalSpreadAccessException ??????????????
     */
    public List getRangeByOffset(String name, List offset) throws IllegalSpreadAccessException {
        List range = new LinkedList();
        for (int ix=0, size=offset.size(); ix<size; ix++) {
            String offset_work = offset.get(ix).toString();
            if (offset_work.indexOf(Shared.COLON) >= 0) {
                int[] position = getReadRangePosition(offset_work);
                range.add(SvoUtil.defensiveCopyList(getRangeCell(name, position[0], position[1], position[2], position[3])));
            } else {
                offset_work = null;
            }
        }
        
        return range;
    }
    
    /**
     * ?????????????????????????????????
     * ?????????????????????????????????????????????????????????
     * ???????????????????????????????????????????? IllegalSpreadAccessException ?
     * ????????<p>
     * 
     * ???????????????????????????????????????????????????????????
     * ????????????????????????????????????????????????????????
     * 
     * @param name ????
     * @param writeData ??????
     * @param offset ????????????
     * @throws IllegalSpreadAccessException ????????????????
     */
    public void writeCell(String name, List writeData, List offset) throws IllegalSpreadAccessException {
        // ?????????????????????????????????
        if (SvoUtil.isNullObject(offset)) {
            throw new IllegalSpreadAccessException(
                "????????????????????????????????????: "+name
            );
        }
        
        int size = getWriteCount(offset.size(), writeData.size());
        
        // ???????????????????????????????????????
        for (int ix=0; ix<size; ix++) {
            String[] position = StringUtils.split(offset.get(ix).toString(), Shared.CANNMA);
            SpreadCell cell = (SpreadCell)writeData.get(ix);
            getSpreadSheet(name).writeCell(this.book, cell, Integer.parseInt(position[0]), Short.parseShort(position[1]));
            cell = null;
        }
    }
    
    /**
     * ?????????????????????????????????
     * ?????????????????????????????????????????????????????????
     * ???????????????????????????????????????????? IllegalSpreadAccessException ?
     * ????????<p>
     * 
     * ???????????????????????????????????????????????????????????
     * ??????????????????????????????????????????????????????????
     * 
     * @param name ????
     * @param writeData ??????
     * @param offset ????????????
     * @throws IllegalSpreadAccessException ????????????????
     */
    public void writeRange(String name, List writeData, List offset) throws IllegalSpreadAccessException {
        // ?????????????????????????????????
        if (SvoUtil.isNullObject(offset)) {
            throw new IllegalSpreadAccessException(
                "????????????????????????????????????: "+name
            );
        }
        
        // NOTE: ??????????????????
        // ??????????????????????????????????????????????
        String[] position = StringUtils.split(offset.get(0).toString(), Shared.CANNMA);
        int startrow = Integer.parseInt(position[0]);
        int startcol = Integer.parseInt(position[1]);
        
        // ?????????????????
        getSpreadSheet(name).writeRange(this.book, writeData, startrow, startcol);
    }
    
    
    /**
     * ????????????????????????????????????
     * ??????????????????????????????????????????????????????
     * ????????????????????????????? IllegalSpreadAccessException ?????????<p>
     * 
     * ???????????????????????????????????????????????????????
     * ????????<p>
     * 
     * ??????????????????????????????????????
     * 
     * @see #writeTemplate(String, List, List)
     * 
     * @param number ?????
     * @param writeData ??????
     * @param offset ?????????
     * @throws IllegalSpreadAccessException ????????????????
     */
    public void writeTemplate(int number, List writeData, List offset) throws IllegalSpreadAccessException {
        if (SvoUtil.isNullObject(offset)) {
            throw new IllegalSpreadAccessException(
                "??????????????????????????????????????: "+String.valueOf(number)
            );
        }
        
        int size = getWriteCount(offset.size(), writeData.size());
        
        for (int ix=0; ix<size; ix++) {
            String[] position = StringUtils.split(offset.get(ix).toString(), Shared.CANNMA);
            SpreadCell cell = (SpreadCell)writeData.get(ix);
            HSSFRow hssfrow = getSpreadSheet(number).getHSSFSheet().getRow(Integer.parseInt(position[0]));
            getSpreadSheet(number).writeTemplate(cell, hssfrow, Short.parseShort(position[1]));
            hssfrow = null; cell = null;
        }
    }
    
    /**
     * ???????????????????????????????????
     * ??????????????????????????????????????????????????????
     * ????????????????????????????? IllegalSpreadAccessException ?????????<p>
     * 
     * ???????????????????????????????????????????????????????
     * ????????<p>
     * 
     * ???????????????????????????????????????
     * 
     * @see #writeTemplate(int, List, List)
     * 
     * @param name ????
     * @param writeData ??????
     * @param offset ?????????
     * @throws IllegalSpreadAccessException ????????????????
     */
    public void writeTemplate(String name, List writeData, List offset) throws IllegalSpreadAccessException {
        if (SvoUtil.isNullObject(offset)) {
            throw new IllegalSpreadAccessException(
                "??????????????????????????????????????: "+name
            );
        }
        
        int size = getWriteCount(offset.size(), writeData.size());
        
        for (int ix=0; ix<size; ix++) {
            String[] position = StringUtils.split(offset.get(ix).toString(), Shared.CANNMA);
            SpreadCell cell = (SpreadCell)writeData.get(ix);
            HSSFRow hssfrow = getSpreadSheet(name).getHSSFSheet().getRow(Integer.parseInt(position[0]));
            getSpreadSheet(name).writeTemplate(cell, hssfrow, Short.parseShort(position[1]));
            hssfrow = null; cell = null;
        }
    }
    
    // ------------------------------------------------------------ [ Private method ]

    /*
     * ???????????????????????????????????????????????????
     */
    private int getWriteCount(int offsetsize, int datasize) {
        // ?????????????????????????
        int size = 0;
        if ((offsetsize == datasize) || (offsetsize < datasize)) {
            size = offsetsize;
        } else if (offsetsize > datasize) {
            size = datasize;
        }
        return size;
    }
    
    /*
     * ?????????????????????????????????????????????
     * ???????????????
     * 
     * ???? 0 = ???
     * ???? 1 = ???
     */
    private int[] getReadCellPosition(String offset) {
        String[] pos = StringUtils.split(offset, Shared.CANNMA);
        
        return new int[] {
            Integer.parseInt(pos[0]),       // row
            Integer.parseInt(pos[1])        // col
        };
    }
    
    /*
     * ???????????????????????????????????????????????
     * ???????????????
     * 
     * ???? 0 = ?????
     * ???? 1 = ?????
     * ???? 2 = ?????
     * ???? 3 = ?????
     */
    private int[] getReadRangePosition(String offset) {
        String[] wk = StringUtils.split(offset, Shared.COLON);
        String[] startpos = StringUtils.split(wk[0], Shared.CANNMA);
        String[] endpos = StringUtils.split(wk[1], Shared.CANNMA);
        
        return new int[] {
            Integer.parseInt(startpos[0]),      // startrow
            Integer.parseInt(startpos[1]),      // startcol
            Integer.parseInt(endpos[0]),        // endrow
            Integer.parseInt(endpos[1])     // endcol
        };
    }
}


/* Copyright (C) 2005, HOBOKEN Project, All Rights Reserved. */
