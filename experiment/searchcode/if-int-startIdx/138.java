/* TA-LIB Copyright (c) 1999-2007, Mario Fortier
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither name of author nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* DO NOT MODIFY this file.
 * This file is automatically generated by gen_code.
 *
 * If you are not re-generating the java code (which is most
 * likely the case), just ignore this file.
 */

package com.tictactec.ta.lib;
 
import com.tictactec.ta.lib.MAType;
import com.tictactec.ta.lib.MInteger;
import com.tictactec.ta.lib.RetCode;
import com.tictactec.ta.lib.Core;
import com.tictactec.ta.lib.meta.annotation.FuncFlags;
import com.tictactec.ta.lib.meta.annotation.FuncInfo;
import com.tictactec.ta.lib.meta.annotation.InputFlags;
import com.tictactec.ta.lib.meta.annotation.InputParameterInfo;
import com.tictactec.ta.lib.meta.annotation.InputParameterType;
import com.tictactec.ta.lib.meta.annotation.IntegerList;
import com.tictactec.ta.lib.meta.annotation.IntegerRange;
import com.tictactec.ta.lib.meta.annotation.OptInputParameterInfo;
import com.tictactec.ta.lib.meta.annotation.OptInputParameterType;
import com.tictactec.ta.lib.meta.annotation.OutputFlags;
import com.tictactec.ta.lib.meta.annotation.OutputParameterInfo;
import com.tictactec.ta.lib.meta.annotation.OutputParameterType;
import com.tictactec.ta.lib.meta.annotation.RealRange;

public class CoreAnnotated extends Core {

public int acosLookback(
) {
    return super.acosLookback(
); }

@FuncInfo(
        name  = "ACOS",
        group = "Math Transform",
        flags = 0,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode acos(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inReal",
                flags     = 0,
                type = InputParameterType.TA_Input_Real
            )
            double inReal[],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.acos (
        startIdx,
        endIdx,
        inReal,
        outBegIdx,
        outNBElement,
        outReal
); }


public int adLookback(
) {
    return super.adLookback(
); }

@FuncInfo(
        name  = "AD",
        group = "Volume Indicators",
        flags = 0,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode ad(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceHLCV",
                flags     = 30,
                type = InputParameterType.TA_Input_Price
            )
            double inHigh [],
            double inLow [],
            double inClose [],
            double inVolume [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.ad (
        startIdx,
        endIdx,
        inHigh ,
        inLow ,
        inClose ,
        inVolume ,
        outBegIdx,
        outNBElement,
        outReal
); }


public int addLookback(
) {
    return super.addLookback(
); }

@FuncInfo(
        name  = "ADD",
        group = "Math Operators",
        flags = 0,
        nbInput    = 2,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode add(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inReal0",
                flags     = 0,
                type = InputParameterType.TA_Input_Real
            )
            double inReal0[],
            @InputParameterInfo(
                paramName = "inReal1",
                flags     = 0,
                type = InputParameterType.TA_Input_Real
            )
            double inReal1[],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.add (
        startIdx,
        endIdx,
        inReal0,
        inReal1,
        outBegIdx,
        outNBElement,
        outReal
); }


public int adOscLookback(
        int optInFastPeriod,
        int optInSlowPeriod) {
    return super.adOscLookback(
        optInFastPeriod,
        optInSlowPeriod); }

@FuncInfo(
        name  = "ADOSC",
        group = "Volume Indicators",
        flags = 0,
        nbInput    = 1,
        nbOptInput = 2,
        nbOutput   = 1
)
public RetCode adOsc(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceHLCV",
                flags     = 30,
                type = InputParameterType.TA_Input_Price
            )
            double inHigh [],
            double inLow [],
            double inClose [],
            double inVolume [],
            @OptInputParameterInfo(
                paramName    = "optInFastPeriod",
                displayName  = "Fast Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInFastPeriod",
                    defaultValue = 3,
                    min          = 2,
                    max          = 100000,
                    suggested_start     = 4,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInFastPeriod,
            @OptInputParameterInfo(
                paramName    = "optInSlowPeriod",
                displayName  = "Slow Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInSlowPeriod",
                    defaultValue = 10,
                    min          = 2,
                    max          = 100000,
                    suggested_start     = 4,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInSlowPeriod,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.adOsc (
        startIdx,
        endIdx,
        inHigh ,
        inLow ,
        inClose ,
        inVolume ,
        optInFastPeriod,
        optInSlowPeriod,
        outBegIdx,
        outNBElement,
        outReal
); }


public int adxLookback(
        int optInTimePeriod) {
    return super.adxLookback(
        optInTimePeriod); }

@FuncInfo(
        name  = "ADX",
        group = "Momentum Indicators",
        flags = 134217728,
        nbInput    = 1,
        nbOptInput = 1,
        nbOutput   = 1
)
public RetCode adx(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceHLC",
                flags     = 14,
                type = InputParameterType.TA_Input_Price
            )
            double inHigh [],
            double inLow [],
            double inClose [],
            @OptInputParameterInfo(
                paramName    = "optInTimePeriod",
                displayName  = "Time Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInTimePeriod",
                    defaultValue = 14,
                    min          = 2,
                    max          = 100000,
                    suggested_start     = 4,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInTimePeriod,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.adx (
        startIdx,
        endIdx,
        inHigh ,
        inLow ,
        inClose ,
        optInTimePeriod,
        outBegIdx,
        outNBElement,
        outReal
); }


public int adxrLookback(
        int optInTimePeriod) {
    return super.adxrLookback(
        optInTimePeriod); }

@FuncInfo(
        name  = "ADXR",
        group = "Momentum Indicators",
        flags = 134217728,
        nbInput    = 1,
        nbOptInput = 1,
        nbOutput   = 1
)
public RetCode adxr(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceHLC",
                flags     = 14,
                type = InputParameterType.TA_Input_Price
            )
            double inHigh [],
            double inLow [],
            double inClose [],
            @OptInputParameterInfo(
                paramName    = "optInTimePeriod",
                displayName  = "Time Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInTimePeriod",
                    defaultValue = 14,
                    min          = 2,
                    max          = 100000,
                    suggested_start     = 4,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInTimePeriod,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.adxr (
        startIdx,
        endIdx,
        inHigh ,
        inLow ,
        inClose ,
        optInTimePeriod,
        outBegIdx,
        outNBElement,
        outReal
); }


public int apoLookback(
        int optInFastPeriod,
        int optInSlowPeriod,
        MAType optInMAType) {
    return super.apoLookback(
        optInFastPeriod,
        optInSlowPeriod,
        optInMAType); }

@FuncInfo(
        name  = "APO",
        group = "Momentum Indicators",
        flags = 0,
        nbInput    = 1,
        nbOptInput = 3,
        nbOutput   = 1
)
public RetCode apo(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inReal",
                flags     = 0,
                type = InputParameterType.TA_Input_Real
            )
            double inReal[],
            @OptInputParameterInfo(
                paramName    = "optInFastPeriod",
                displayName  = "Fast Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInFastPeriod",
                    defaultValue = 12,
                    min          = 2,
                    max          = 100000,
                    suggested_start     = 4,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInFastPeriod,
            @OptInputParameterInfo(
                paramName    = "optInSlowPeriod",
                displayName  = "Slow Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInSlowPeriod",
                    defaultValue = 26,
                    min          = 2,
                    max          = 100000,
                    suggested_start     = 4,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInSlowPeriod,
            @OptInputParameterInfo(
                paramName    = "optInMAType",
                displayName  = "MA Type",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerList,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
            )
            @IntegerList(
                    paramName    = "optInMAType",
                    defaultValue = 0,
                    value  = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                    string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
            )
            MAType optInMAType,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.apo (
        startIdx,
        endIdx,
        inReal,
        optInFastPeriod,
        optInSlowPeriod,
        optInMAType,
        outBegIdx,
        outNBElement,
        outReal
); }


public int aroonLookback(
        int optInTimePeriod) {
    return super.aroonLookback(
        optInTimePeriod); }

@FuncInfo(
        name  = "AROON",
        group = "Momentum Indicators",
        flags = 0,
        nbInput    = 1,
        nbOptInput = 1,
        nbOutput   = 2
)
public RetCode aroon(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceHL",
                flags     = 6,
                type = InputParameterType.TA_Input_Price
            )
            double inHigh [],
            double inLow [],
            @OptInputParameterInfo(
                paramName    = "optInTimePeriod",
                displayName  = "Time Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInTimePeriod",
                    defaultValue = 14,
                    min          = 2,
                    max          = 100000,
                    suggested_start     = 4,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInTimePeriod,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outAroonDown",
                flags     = 4,
                type = OutputParameterType.TA_Output_Real
            )
            double outAroonDown[],
            @OutputParameterInfo(
                paramName = "outAroonUp",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outAroonUp[]
) {
    return super.aroon (
        startIdx,
        endIdx,
        inHigh ,
        inLow ,
        optInTimePeriod,
        outBegIdx,
        outNBElement,
        outAroonDown,
        outAroonUp
); }


public int aroonOscLookback(
        int optInTimePeriod) {
    return super.aroonOscLookback(
        optInTimePeriod); }

@FuncInfo(
        name  = "AROONOSC",
        group = "Momentum Indicators",
        flags = 0,
        nbInput    = 1,
        nbOptInput = 1,
        nbOutput   = 1
)
public RetCode aroonOsc(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceHL",
                flags     = 6,
                type = InputParameterType.TA_Input_Price
            )
            double inHigh [],
            double inLow [],
            @OptInputParameterInfo(
                paramName    = "optInTimePeriod",
                displayName  = "Time Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInTimePeriod",
                    defaultValue = 14,
                    min          = 2,
                    max          = 100000,
                    suggested_start     = 4,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInTimePeriod,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.aroonOsc (
        startIdx,
        endIdx,
        inHigh ,
        inLow ,
        optInTimePeriod,
        outBegIdx,
        outNBElement,
        outReal
); }


public int asinLookback(
) {
    return super.asinLookback(
); }

@FuncInfo(
        name  = "ASIN",
        group = "Math Transform",
        flags = 0,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode asin(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inReal",
                flags     = 0,
                type = InputParameterType.TA_Input_Real
            )
            double inReal[],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.asin (
        startIdx,
        endIdx,
        inReal,
        outBegIdx,
        outNBElement,
        outReal
); }


public int atanLookback(
) {
    return super.atanLookback(
); }

@FuncInfo(
        name  = "ATAN",
        group = "Math Transform",
        flags = 0,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode atan(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inReal",
                flags     = 0,
                type = InputParameterType.TA_Input_Real
            )
            double inReal[],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.atan (
        startIdx,
        endIdx,
        inReal,
        outBegIdx,
        outNBElement,
        outReal
); }


public int atrLookback(
        int optInTimePeriod) {
    return super.atrLookback(
        optInTimePeriod); }

@FuncInfo(
        name  = "ATR",
        group = "Volatility Indicators",
        flags = 134217728,
        nbInput    = 1,
        nbOptInput = 1,
        nbOutput   = 1
)
public RetCode atr(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceHLC",
                flags     = 14,
                type = InputParameterType.TA_Input_Price
            )
            double inHigh [],
            double inLow [],
            double inClose [],
            @OptInputParameterInfo(
                paramName    = "optInTimePeriod",
                displayName  = "Time Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInTimePeriod",
                    defaultValue = 14,
                    min          = 1,
                    max          = 100000,
                    suggested_start     = 1,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInTimePeriod,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.atr (
        startIdx,
        endIdx,
        inHigh ,
        inLow ,
        inClose ,
        optInTimePeriod,
        outBegIdx,
        outNBElement,
        outReal
); }


public int avgPriceLookback(
) {
    return super.avgPriceLookback(
); }

@FuncInfo(
        name  = "AVGPRICE",
        group = "Price Transform",
        flags = 16777216,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode avgPrice(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.avgPrice (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outReal
); }


public int bbandsLookback(
        int optInTimePeriod,
        double optInNbDevUp,
        double optInNbDevDn,
        MAType optInMAType) {
    return super.bbandsLookback(
        optInTimePeriod,
        optInNbDevUp,
        optInNbDevDn,
        optInMAType); }

@FuncInfo(
        name  = "BBANDS",
        group = "Overlap Studies",
        flags = 16777216,
        nbInput    = 1,
        nbOptInput = 4,
        nbOutput   = 3
)
public RetCode bbands(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inReal",
                flags     = 0,
                type = InputParameterType.TA_Input_Real
            )
            double inReal[],
            @OptInputParameterInfo(
                paramName    = "optInTimePeriod",
                displayName  = "Time Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInTimePeriod",
                    defaultValue = 5,
                    min          = 2,
                    max          = 100000,
                    suggested_start     = 4,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInTimePeriod,
            @OptInputParameterInfo(
                paramName    = "optInNbDevUp",
                displayName  = "Deviations up",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_RealRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
            )
            @RealRange(
                    paramName    = "optInNbDevUp",
                    defaultValue = 2.00000,
                    min          = -30000000000000002000000000000000000000.00000,
                    max          = 30000000000000002000000000000000000000.00000,
                    precision    = 2,
                    suggested_start     = -2.00000,
                    suggested_end       = 2.00000,
                    suggested_increment = 0.20000
            )
            double optInNbDevUp,
            @OptInputParameterInfo(
                paramName    = "optInNbDevDn",
                displayName  = "Deviations down",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_RealRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
            )
            @RealRange(
                    paramName    = "optInNbDevDn",
                    defaultValue = 2.00000,
                    min          = -30000000000000002000000000000000000000.00000,
                    max          = 30000000000000002000000000000000000000.00000,
                    precision    = 2,
                    suggested_start     = -2.00000,
                    suggested_end       = 2.00000,
                    suggested_increment = 0.20000
            )
            double optInNbDevDn,
            @OptInputParameterInfo(
                paramName    = "optInMAType",
                displayName  = "MA Type",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerList,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerList.class
            )
            @IntegerList(
                    paramName    = "optInMAType",
                    defaultValue = 0,
                    value  = { 0, 1, 2, 3, 4, 5, 6, 7, 8 },
                    string = { "SMA", "EMA", "WMA", "DEMA", "TEMA", "TRIMA", "KAMA", "MAMA", "T3" }
            )
            MAType optInMAType,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outRealUpperBand",
                flags     = 2048,
                type = OutputParameterType.TA_Output_Real
            )
            double outRealUpperBand[],
            @OutputParameterInfo(
                paramName = "outRealMiddleBand",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outRealMiddleBand[],
            @OutputParameterInfo(
                paramName = "outRealLowerBand",
                flags     = 4096,
                type = OutputParameterType.TA_Output_Real
            )
            double outRealLowerBand[]
) {
    return super.bbands (
        startIdx,
        endIdx,
        inReal,
        optInTimePeriod,
        optInNbDevUp,
        optInNbDevDn,
        optInMAType,
        outBegIdx,
        outNBElement,
        outRealUpperBand,
        outRealMiddleBand,
        outRealLowerBand
); }


public int betaLookback(
        int optInTimePeriod) {
    return super.betaLookback(
        optInTimePeriod); }

@FuncInfo(
        name  = "BETA",
        group = "Statistic Functions",
        flags = 0,
        nbInput    = 2,
        nbOptInput = 1,
        nbOutput   = 1
)
public RetCode beta(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inReal0",
                flags     = 0,
                type = InputParameterType.TA_Input_Real
            )
            double inReal0[],
            @InputParameterInfo(
                paramName = "inReal1",
                flags     = 0,
                type = InputParameterType.TA_Input_Real
            )
            double inReal1[],
            @OptInputParameterInfo(
                paramName    = "optInTimePeriod",
                displayName  = "Time Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInTimePeriod",
                    defaultValue = 5,
                    min          = 1,
                    max          = 100000,
                    suggested_start     = 1,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInTimePeriod,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.beta (
        startIdx,
        endIdx,
        inReal0,
        inReal1,
        optInTimePeriod,
        outBegIdx,
        outNBElement,
        outReal
); }


public int bopLookback(
) {
    return super.bopLookback(
); }

@FuncInfo(
        name  = "BOP",
        group = "Momentum Indicators",
        flags = 0,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode bop(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.bop (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outReal
); }


public int cciLookback(
        int optInTimePeriod) {
    return super.cciLookback(
        optInTimePeriod); }

@FuncInfo(
        name  = "CCI",
        group = "Momentum Indicators",
        flags = 0,
        nbInput    = 1,
        nbOptInput = 1,
        nbOutput   = 1
)
public RetCode cci(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceHLC",
                flags     = 14,
                type = InputParameterType.TA_Input_Price
            )
            double inHigh [],
            double inLow [],
            double inClose [],
            @OptInputParameterInfo(
                paramName    = "optInTimePeriod",
                displayName  = "Time Period",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_IntegerRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.IntegerRange.class
            )
            @IntegerRange(
                    paramName    = "optInTimePeriod",
                    defaultValue = 14,
                    min          = 2,
                    max          = 100000,
                    suggested_start     = 4,
                    suggested_end       = 200,
                    suggested_increment = 1
            )
            int optInTimePeriod,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outReal",
                flags     = 1,
                type = OutputParameterType.TA_Output_Real
            )
            double outReal[]
) {
    return super.cci (
        startIdx,
        endIdx,
        inHigh ,
        inLow ,
        inClose ,
        optInTimePeriod,
        outBegIdx,
        outNBElement,
        outReal
); }


public int cdl2CrowsLookback(
) {
    return super.cdl2CrowsLookback(
); }

@FuncInfo(
        name  = "CDL2CROWS",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdl2Crows(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdl2Crows (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdl3BlackCrowsLookback(
) {
    return super.cdl3BlackCrowsLookback(
); }

@FuncInfo(
        name  = "CDL3BLACKCROWS",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdl3BlackCrows(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdl3BlackCrows (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdl3InsideLookback(
) {
    return super.cdl3InsideLookback(
); }

@FuncInfo(
        name  = "CDL3INSIDE",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdl3Inside(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdl3Inside (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdl3LineStrikeLookback(
) {
    return super.cdl3LineStrikeLookback(
); }

@FuncInfo(
        name  = "CDL3LINESTRIKE",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdl3LineStrike(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdl3LineStrike (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdl3OutsideLookback(
) {
    return super.cdl3OutsideLookback(
); }

@FuncInfo(
        name  = "CDL3OUTSIDE",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdl3Outside(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdl3Outside (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdl3StarsInSouthLookback(
) {
    return super.cdl3StarsInSouthLookback(
); }

@FuncInfo(
        name  = "CDL3STARSINSOUTH",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdl3StarsInSouth(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdl3StarsInSouth (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdl3WhiteSoldiersLookback(
) {
    return super.cdl3WhiteSoldiersLookback(
); }

@FuncInfo(
        name  = "CDL3WHITESOLDIERS",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdl3WhiteSoldiers(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdl3WhiteSoldiers (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlAbandonedBabyLookback(
        double optInPenetration) {
    return super.cdlAbandonedBabyLookback(
        optInPenetration); }

@FuncInfo(
        name  = "CDLABANDONEDBABY",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 1,
        nbOutput   = 1
)
public RetCode cdlAbandonedBaby(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            @OptInputParameterInfo(
                paramName    = "optInPenetration",
                displayName  = "Penetration",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_RealRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
            )
            @RealRange(
                    paramName    = "optInPenetration",
                    defaultValue = 0.30000,
                    min          = 0.00000,
                    max          = 30000000000000002000000000000000000000.00000,
                    precision    = 0,
                    suggested_start     = 0.00000,
                    suggested_end       = 0.00000,
                    suggested_increment = 0.00000
            )
            double optInPenetration,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlAbandonedBaby (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        optInPenetration,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlAdvanceBlockLookback(
) {
    return super.cdlAdvanceBlockLookback(
); }

@FuncInfo(
        name  = "CDLADVANCEBLOCK",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlAdvanceBlock(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlAdvanceBlock (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlBeltHoldLookback(
) {
    return super.cdlBeltHoldLookback(
); }

@FuncInfo(
        name  = "CDLBELTHOLD",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlBeltHold(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlBeltHold (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlBreakawayLookback(
) {
    return super.cdlBreakawayLookback(
); }

@FuncInfo(
        name  = "CDLBREAKAWAY",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlBreakaway(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlBreakaway (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlClosingMarubozuLookback(
) {
    return super.cdlClosingMarubozuLookback(
); }

@FuncInfo(
        name  = "CDLCLOSINGMARUBOZU",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlClosingMarubozu(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlClosingMarubozu (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlConcealBabysWallLookback(
) {
    return super.cdlConcealBabysWallLookback(
); }

@FuncInfo(
        name  = "CDLCONCEALBABYSWALL",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlConcealBabysWall(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlConcealBabysWall (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlCounterAttackLookback(
) {
    return super.cdlCounterAttackLookback(
); }

@FuncInfo(
        name  = "CDLCOUNTERATTACK",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlCounterAttack(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlCounterAttack (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlDarkCloudCoverLookback(
        double optInPenetration) {
    return super.cdlDarkCloudCoverLookback(
        optInPenetration); }

@FuncInfo(
        name  = "CDLDARKCLOUDCOVER",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 1,
        nbOutput   = 1
)
public RetCode cdlDarkCloudCover(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            @OptInputParameterInfo(
                paramName    = "optInPenetration",
                displayName  = "Penetration",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_RealRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
            )
            @RealRange(
                    paramName    = "optInPenetration",
                    defaultValue = 0.50000,
                    min          = 0.00000,
                    max          = 30000000000000002000000000000000000000.00000,
                    precision    = 0,
                    suggested_start     = 0.00000,
                    suggested_end       = 0.00000,
                    suggested_increment = 0.00000
            )
            double optInPenetration,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlDarkCloudCover (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        optInPenetration,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlDojiLookback(
) {
    return super.cdlDojiLookback(
); }

@FuncInfo(
        name  = "CDLDOJI",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlDoji(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlDoji (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlDojiStarLookback(
) {
    return super.cdlDojiStarLookback(
); }

@FuncInfo(
        name  = "CDLDOJISTAR",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlDojiStar(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlDojiStar (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlDragonflyDojiLookback(
) {
    return super.cdlDragonflyDojiLookback(
); }

@FuncInfo(
        name  = "CDLDRAGONFLYDOJI",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlDragonflyDoji(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlDragonflyDoji (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlEngulfingLookback(
) {
    return super.cdlEngulfingLookback(
); }

@FuncInfo(
        name  = "CDLENGULFING",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlEngulfing(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlEngulfing (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlEveningDojiStarLookback(
        double optInPenetration) {
    return super.cdlEveningDojiStarLookback(
        optInPenetration); }

@FuncInfo(
        name  = "CDLEVENINGDOJISTAR",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 1,
        nbOutput   = 1
)
public RetCode cdlEveningDojiStar(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            @OptInputParameterInfo(
                paramName    = "optInPenetration",
                displayName  = "Penetration",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_RealRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
            )
            @RealRange(
                    paramName    = "optInPenetration",
                    defaultValue = 0.30000,
                    min          = 0.00000,
                    max          = 30000000000000002000000000000000000000.00000,
                    precision    = 0,
                    suggested_start     = 0.00000,
                    suggested_end       = 0.00000,
                    suggested_increment = 0.00000
            )
            double optInPenetration,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlEveningDojiStar (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        optInPenetration,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlEveningStarLookback(
        double optInPenetration) {
    return super.cdlEveningStarLookback(
        optInPenetration); }

@FuncInfo(
        name  = "CDLEVENINGSTAR",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 1,
        nbOutput   = 1
)
public RetCode cdlEveningStar(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            @OptInputParameterInfo(
                paramName    = "optInPenetration",
                displayName  = "Penetration",
                flags        = 0,
                type    = OptInputParameterType.TA_OptInput_RealRange,
                dataSet = com.tictactec.ta.lib.meta.annotation.RealRange.class
            )
            @RealRange(
                    paramName    = "optInPenetration",
                    defaultValue = 0.30000,
                    min          = 0.00000,
                    max          = 30000000000000002000000000000000000000.00000,
                    precision    = 0,
                    suggested_start     = 0.00000,
                    suggested_end       = 0.00000,
                    suggested_increment = 0.00000
            )
            double optInPenetration,
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlEveningStar (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        optInPenetration,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlGapSideSideWhiteLookback(
) {
    return super.cdlGapSideSideWhiteLookback(
); }

@FuncInfo(
        name  = "CDLGAPSIDESIDEWHITE",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlGapSideSideWhite(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
            @OutputParameterInfo(
                paramName = "outInteger",
                flags     = 1,
                type = OutputParameterType.TA_Output_Integer
            )
            int outInteger[]

) {
    return super.cdlGapSideSideWhite (
        startIdx,
        endIdx,
        inOpen ,
        inHigh ,
        inLow ,
        inClose ,
        outBegIdx,
        outNBElement,
        outInteger
); }


public int cdlGravestoneDojiLookback(
) {
    return super.cdlGravestoneDojiLookback(
); }

@FuncInfo(
        name  = "CDLGRAVESTONEDOJI",
        group = "Pattern Recognition",
        flags = 268435456,
        nbInput    = 1,
        nbOptInput = 0,
        nbOutput   = 1
)
public RetCode cdlGravestoneDoji(
            int startIdx,
            int endIdx,
            @InputParameterInfo(
                paramName = "inPriceOHLC",
                flags     = 15,
                type = InputParameterType.TA_Input_Price
            )
            double inOpen [],
            double inHigh [],
            double inLow [],
            double inClose [],
            MInteger     outBegIdx,
            MInteger     outNBElement,
 
