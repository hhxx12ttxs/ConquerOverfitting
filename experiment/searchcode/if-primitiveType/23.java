//  Copyright 2012 Cloudera Inc.
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//  http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// This is a generated file, DO NOT EDIT.
// To add new functions, see impala/common/function-registry/gen_opcodes.py

package com.cloudera.impala.opcode;

import com.cloudera.impala.analysis.OpcodeRegistry;
import com.cloudera.impala.catalog.PrimitiveType;
import com.cloudera.impala.thrift.TExprOpcode;
import com.google.common.base.Preconditions;

public class FunctionRegistry { 
  public static void InitFunctions(OpcodeRegistry registry) { 
    boolean result = true;

    result &= registry.add(FunctionOperator.STRING_LPAD, TExprOpcode.STRING_LPAD_STRINGVALUE_INT_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.INT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.STRING_LPAD, TExprOpcode.STRING_LPAD_STRINGVALUE_LONG_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.BIGINT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.STRING_PARSE_URL, TExprOpcode.STRING_PARSE_URL_STRINGVALUE_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.STRING_PARSE_URL, TExprOpcode.STRING_PARSE_URL_STRINGVALUE_STRINGVALUE_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.TIMESTAMP_MILLISECONDS_ADD, TExprOpcode.TIMESTAMP_MILLISECONDS_ADD_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MILLISECONDS_ADD, TExprOpcode.TIMESTAMP_MILLISECONDS_ADD_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_RAND, TExprOpcode.MATH_RAND, false, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_RAND, TExprOpcode.MATH_RAND_INT, false, PrimitiveType.DOUBLE, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MICROSECONDS_ADD, TExprOpcode.TIMESTAMP_MICROSECONDS_ADD_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MICROSECONDS_ADD, TExprOpcode.TIMESTAMP_MICROSECONDS_ADD_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.STRING_LOCATE, TExprOpcode.STRING_LOCATE_STRINGVALUE_STRINGVALUE, false, PrimitiveType.INT, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.STRING_LOCATE, TExprOpcode.STRING_LOCATE_STRINGVALUE_STRINGVALUE_INT, false, PrimitiveType.INT, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.STRING_LOCATE, TExprOpcode.STRING_LOCATE_STRINGVALUE_STRINGVALUE_LONG, false, PrimitiveType.INT, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.TIMESTAMP_WEEKS_ADD, TExprOpcode.TIMESTAMP_WEEKS_ADD_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_WEEKS_ADD, TExprOpcode.TIMESTAMP_WEEKS_ADD_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MONTH, TExprOpcode.TIMESTAMP_MONTH, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.TIMESTAMP_MICROSECONDS_SUB, TExprOpcode.TIMESTAMP_MICROSECONDS_SUB_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MICROSECONDS_SUB, TExprOpcode.TIMESTAMP_MICROSECONDS_SUB_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_ACOS, TExprOpcode.MATH_ACOS, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.BITNOT, TExprOpcode.BITNOT_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.BITNOT, TExprOpcode.BITNOT_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.BITNOT, TExprOpcode.BITNOT_INT, false, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.BITNOT, TExprOpcode.BITNOT_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CONDITIONAL_IF, TExprOpcode.CONDITIONAL_IF_BOOL_BOOL_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CONDITIONAL_IF, TExprOpcode.CONDITIONAL_IF_BOOL_CHAR_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.BOOLEAN, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CONDITIONAL_IF, TExprOpcode.CONDITIONAL_IF_BOOL_SHORT_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.BOOLEAN, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CONDITIONAL_IF, TExprOpcode.CONDITIONAL_IF_BOOL_INT_INT, false, PrimitiveType.INT, PrimitiveType.BOOLEAN, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CONDITIONAL_IF, TExprOpcode.CONDITIONAL_IF_BOOL_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BOOLEAN, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CONDITIONAL_IF, TExprOpcode.CONDITIONAL_IF_BOOL_FLOAT_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.BOOLEAN, PrimitiveType.FLOAT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CONDITIONAL_IF, TExprOpcode.CONDITIONAL_IF_BOOL_DOUBLE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.BOOLEAN, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CONDITIONAL_IF, TExprOpcode.CONDITIONAL_IF_BOOL_STRINGVALUE_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.BOOLEAN, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CONDITIONAL_IF, TExprOpcode.CONDITIONAL_IF_BOOL_TIMESTAMPVALUE_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.BOOLEAN, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.TIMESTAMP_NOW, TExprOpcode.TIMESTAMP_NOW, false, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.MOD, TExprOpcode.MOD_CHAR_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.MOD, TExprOpcode.MOD_SHORT_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.MOD, TExprOpcode.MOD_INT_INT, false, PrimitiveType.INT, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.MOD, TExprOpcode.MOD_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CONDITIONAL_COALESCE, TExprOpcode.CONDITIONAL_COALESCE_BOOL_VARARGS, true, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CONDITIONAL_COALESCE, TExprOpcode.CONDITIONAL_COALESCE_LONG_VARARGS, true, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CONDITIONAL_COALESCE, TExprOpcode.CONDITIONAL_COALESCE_DOUBLE_VARARGS, true, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CONDITIONAL_COALESCE, TExprOpcode.CONDITIONAL_COALESCE_STRINGVALUE_VARARGS, true, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CONDITIONAL_COALESCE, TExprOpcode.CONDITIONAL_COALESCE_TIMESTAMPVALUE_VARARGS, true, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.MATH_COS, TExprOpcode.MATH_COS, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_BIN, TExprOpcode.MATH_BIN, false, PrimitiveType.STRING, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.BITAND, TExprOpcode.BITAND_CHAR_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.BITAND, TExprOpcode.BITAND_SHORT_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.BITAND, TExprOpcode.BITAND_INT_INT, false, PrimitiveType.INT, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.BITAND, TExprOpcode.BITAND_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_SIGN, TExprOpcode.MATH_SIGN, false, PrimitiveType.FLOAT, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_LOG, TExprOpcode.MATH_LOG, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.DIVIDE, TExprOpcode.DIVIDE, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.FROM_UTC_TIMESTAMP, TExprOpcode.FROM_UTC_TIMESTAMP, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.GT, TExprOpcode.GT_BOOL_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.GT, TExprOpcode.GT_CHAR_CHAR, false, PrimitiveType.BOOLEAN, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.GT, TExprOpcode.GT_SHORT_SHORT, false, PrimitiveType.BOOLEAN, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.GT, TExprOpcode.GT_INT_INT, false, PrimitiveType.BOOLEAN, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.GT, TExprOpcode.GT_LONG_LONG, false, PrimitiveType.BOOLEAN, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.GT, TExprOpcode.GT_FLOAT_FLOAT, false, PrimitiveType.BOOLEAN, PrimitiveType.FLOAT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.GT, TExprOpcode.GT_DOUBLE_DOUBLE, false, PrimitiveType.BOOLEAN, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.GT, TExprOpcode.GT_STRINGVALUE_STRINGVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.GT, TExprOpcode.GT_TIMESTAMPVALUE_TIMESTAMPVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.GE, TExprOpcode.GE_BOOL_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.GE, TExprOpcode.GE_CHAR_CHAR, false, PrimitiveType.BOOLEAN, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.GE, TExprOpcode.GE_SHORT_SHORT, false, PrimitiveType.BOOLEAN, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.GE, TExprOpcode.GE_INT_INT, false, PrimitiveType.BOOLEAN, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.GE, TExprOpcode.GE_LONG_LONG, false, PrimitiveType.BOOLEAN, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.GE, TExprOpcode.GE_FLOAT_FLOAT, false, PrimitiveType.BOOLEAN, PrimitiveType.FLOAT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.GE, TExprOpcode.GE_DOUBLE_DOUBLE, false, PrimitiveType.BOOLEAN, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.GE, TExprOpcode.GE_STRINGVALUE_STRINGVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.GE, TExprOpcode.GE_TIMESTAMPVALUE_TIMESTAMPVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.TIMESTAMP_YEARS_SUB, TExprOpcode.TIMESTAMP_YEARS_SUB_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_YEARS_SUB, TExprOpcode.TIMESTAMP_YEARS_SUB_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.STRING_TRIM, TExprOpcode.STRING_TRIM, false, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.TIMESTAMP_MINUTES_SUB, TExprOpcode.TIMESTAMP_MINUTES_SUB_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MINUTES_SUB, TExprOpcode.TIMESTAMP_MINUTES_SUB_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.STRING_LTRIM, TExprOpcode.STRING_LTRIM, false, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.TIMESTAMP_HOUR, TExprOpcode.TIMESTAMP_HOUR, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.CONDITIONAL_ISNULL, TExprOpcode.CONDITIONAL_ISNULL_BOOL_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CONDITIONAL_ISNULL, TExprOpcode.CONDITIONAL_ISNULL_INT_INT, false, PrimitiveType.INT, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CONDITIONAL_ISNULL, TExprOpcode.CONDITIONAL_ISNULL_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CONDITIONAL_ISNULL, TExprOpcode.CONDITIONAL_ISNULL_DOUBLE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CONDITIONAL_ISNULL, TExprOpcode.CONDITIONAL_ISNULL_STRINGVALUE_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CONDITIONAL_ISNULL, TExprOpcode.CONDITIONAL_ISNULL_TIMESTAMPVALUE_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.MATH_ROUND, TExprOpcode.MATH_ROUND_DOUBLE, false, PrimitiveType.BIGINT, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_ROUND, TExprOpcode.MATH_ROUND_DOUBLE_INT, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.MATH_LN, TExprOpcode.MATH_LN, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.TIMESTAMP_MONTHS_ADD, TExprOpcode.TIMESTAMP_MONTHS_ADD_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MONTHS_ADD, TExprOpcode.TIMESTAMP_MONTHS_ADD_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.BITOR, TExprOpcode.BITOR_CHAR_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.BITOR, TExprOpcode.BITOR_SHORT_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.BITOR, TExprOpcode.BITOR_INT_INT, false, PrimitiveType.INT, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.BITOR, TExprOpcode.BITOR_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_QUOTIENT, TExprOpcode.MATH_QUOTIENT_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_QUOTIENT, TExprOpcode.MATH_QUOTIENT_DOUBLE_DOUBLE, false, PrimitiveType.BIGINT, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_ABS, TExprOpcode.MATH_ABS, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.TIMESTAMP_DIFF, TExprOpcode.TIMESTAMP_DIFF, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.MATH_POW, TExprOpcode.MATH_POW, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.STRING_ASCII, TExprOpcode.STRING_ASCII, false, PrimitiveType.INT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.STRING_TRANSLATE, TExprOpcode.STRING_TRANSLATE, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.TIMESTAMP_SECONDS_ADD, TExprOpcode.TIMESTAMP_SECONDS_ADD_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_SECONDS_ADD, TExprOpcode.TIMESTAMP_SECONDS_ADD_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.INT_DIVIDE, TExprOpcode.INT_DIVIDE_CHAR_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.INT_DIVIDE, TExprOpcode.INT_DIVIDE_SHORT_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.INT_DIVIDE, TExprOpcode.INT_DIVIDE_INT_INT, false, PrimitiveType.INT, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.INT_DIVIDE, TExprOpcode.INT_DIVIDE_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.COMPOUND_AND, TExprOpcode.COMPOUND_AND, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.MATH_SQRT, TExprOpcode.MATH_SQRT, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_UNHEX, TExprOpcode.MATH_UNHEX, false, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.TIMESTAMP_SECONDS_SUB, TExprOpcode.TIMESTAMP_SECONDS_SUB_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_SECONDS_SUB, TExprOpcode.TIMESTAMP_SECONDS_SUB_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.TIMESTAMP_WEEKS_SUB, TExprOpcode.TIMESTAMP_WEEKS_SUB_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_WEEKS_SUB, TExprOpcode.TIMESTAMP_WEEKS_SUB_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.STRING_RIGHT, TExprOpcode.STRING_RIGHT_STRINGVALUE_INT, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.STRING_RIGHT, TExprOpcode.STRING_RIGHT_STRINGVALUE_LONG, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_DEGREES, TExprOpcode.MATH_DEGREES, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.STRING_RPAD, TExprOpcode.STRING_RPAD_STRINGVALUE_INT_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.INT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.STRING_RPAD, TExprOpcode.STRING_RPAD_STRINGVALUE_LONG_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.BIGINT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.MATH_ATAN, TExprOpcode.MATH_ATAN, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.TIMESTAMP_DAYS_ADD, TExprOpcode.TIMESTAMP_DAYS_ADD_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_DAYS_ADD, TExprOpcode.TIMESTAMP_DAYS_ADD_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.TIMESTAMP_DAYOFYEAR, TExprOpcode.TIMESTAMP_DAYOFYEAR, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.UNIX_TIMESTAMP, TExprOpcode.UNIX_TIMESTAMP, false, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.UNIX_TIMESTAMP, TExprOpcode.UNIX_TIMESTAMP_TIMESTAMPVALUE, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.UNIX_TIMESTAMP, TExprOpcode.UNIX_TIMESTAMP_STRINGVALUE_STRINGVALUE, false, PrimitiveType.INT, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.EQ, TExprOpcode.EQ_BOOL_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.EQ, TExprOpcode.EQ_CHAR_CHAR, false, PrimitiveType.BOOLEAN, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.EQ, TExprOpcode.EQ_SHORT_SHORT, false, PrimitiveType.BOOLEAN, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.EQ, TExprOpcode.EQ_INT_INT, false, PrimitiveType.BOOLEAN, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.EQ, TExprOpcode.EQ_LONG_LONG, false, PrimitiveType.BOOLEAN, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.EQ, TExprOpcode.EQ_FLOAT_FLOAT, false, PrimitiveType.BOOLEAN, PrimitiveType.FLOAT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.EQ, TExprOpcode.EQ_DOUBLE_DOUBLE, false, PrimitiveType.BOOLEAN, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.EQ, TExprOpcode.EQ_STRINGVALUE_STRINGVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.EQ, TExprOpcode.EQ_TIMESTAMPVALUE_TIMESTAMPVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.STRING_REGEXP_REPLACE, TExprOpcode.STRING_REGEXP_REPLACE, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.REGEX, TExprOpcode.REGEX, false, PrimitiveType.BOOLEAN, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.STRING_REGEXP_EXTRACT, TExprOpcode.STRING_REGEXP_EXTRACT_STRINGVALUE_STRINGVALUE_INT, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.STRING_REGEXP_EXTRACT, TExprOpcode.STRING_REGEXP_EXTRACT_STRINGVALUE_STRINGVALUE_LONG, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_CEIL, TExprOpcode.MATH_CEIL, false, PrimitiveType.BIGINT, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_LOG2, TExprOpcode.MATH_LOG2, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.STRING_REVERSE, TExprOpcode.STRING_REVERSE, false, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.NE, TExprOpcode.NE_BOOL_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.NE, TExprOpcode.NE_CHAR_CHAR, false, PrimitiveType.BOOLEAN, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.NE, TExprOpcode.NE_SHORT_SHORT, false, PrimitiveType.BOOLEAN, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.NE, TExprOpcode.NE_INT_INT, false, PrimitiveType.BOOLEAN, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.NE, TExprOpcode.NE_LONG_LONG, false, PrimitiveType.BOOLEAN, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.NE, TExprOpcode.NE_FLOAT_FLOAT, false, PrimitiveType.BOOLEAN, PrimitiveType.FLOAT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.NE, TExprOpcode.NE_DOUBLE_DOUBLE, false, PrimitiveType.BOOLEAN, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.NE, TExprOpcode.NE_STRINGVALUE_STRINGVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.NE, TExprOpcode.NE_TIMESTAMPVALUE_TIMESTAMPVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.ADD, TExprOpcode.ADD_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.ADD, TExprOpcode.ADD_DOUBLE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.LE, TExprOpcode.LE_BOOL_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.LE, TExprOpcode.LE_CHAR_CHAR, false, PrimitiveType.BOOLEAN, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.LE, TExprOpcode.LE_SHORT_SHORT, false, PrimitiveType.BOOLEAN, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.LE, TExprOpcode.LE_INT_INT, false, PrimitiveType.BOOLEAN, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.LE, TExprOpcode.LE_LONG_LONG, false, PrimitiveType.BOOLEAN, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.LE, TExprOpcode.LE_FLOAT_FLOAT, false, PrimitiveType.BOOLEAN, PrimitiveType.FLOAT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.LE, TExprOpcode.LE_DOUBLE_DOUBLE, false, PrimitiveType.BOOLEAN, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.LE, TExprOpcode.LE_STRINGVALUE_STRINGVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.LE, TExprOpcode.LE_TIMESTAMPVALUE_TIMESTAMPVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.STRING_INSTR, TExprOpcode.STRING_INSTR, false, PrimitiveType.INT, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.STRING_SPACE, TExprOpcode.STRING_SPACE_INT, false, PrimitiveType.STRING, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.STRING_SPACE, TExprOpcode.STRING_SPACE_LONG, false, PrimitiveType.STRING, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_TAN, TExprOpcode.MATH_TAN, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.TIMESTAMP_WEEKOFYEAR, TExprOpcode.TIMESTAMP_WEEKOFYEAR, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.STRING_FIND_IN_SET, TExprOpcode.STRING_FIND_IN_SET, false, PrimitiveType.INT, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.MATH_RADIANS, TExprOpcode.MATH_RADIANS, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.TIMESTAMP_NANOSECONDS_SUB, TExprOpcode.TIMESTAMP_NANOSECONDS_SUB_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_NANOSECONDS_SUB, TExprOpcode.TIMESTAMP_NANOSECONDS_SUB_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.TIMESTAMP_TO_DATE, TExprOpcode.TIMESTAMP_TO_DATE, false, PrimitiveType.STRING, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.UTILITY_VERSION, TExprOpcode.UTILITY_VERSION, false, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.TIMESTAMP_DAYOFWEEK, TExprOpcode.TIMESTAMP_DAYOFWEEK, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.STRING_REPEAT, TExprOpcode.STRING_REPEAT_STRINGVALUE_INT, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.STRING_REPEAT, TExprOpcode.STRING_REPEAT_STRINGVALUE_LONG, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MILLISECONDS_SUB, TExprOpcode.TIMESTAMP_MILLISECONDS_SUB_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MILLISECONDS_SUB, TExprOpcode.TIMESTAMP_MILLISECONDS_SUB_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.TO_UTC_TIMESTAMP, TExprOpcode.TO_UTC_TIMESTAMP, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.SUBTRACT, TExprOpcode.SUBTRACT_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.SUBTRACT, TExprOpcode.SUBTRACT_DOUBLE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_PMOD, TExprOpcode.MATH_PMOD_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_PMOD, TExprOpcode.MATH_PMOD_DOUBLE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.TIMESTAMP_DAYS_SUB, TExprOpcode.TIMESTAMP_DAYS_SUB_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_DAYS_SUB, TExprOpcode.TIMESTAMP_DAYS_SUB_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MULTIPLY, TExprOpcode.MULTIPLY_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MULTIPLY, TExprOpcode.MULTIPLY_DOUBLE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CONSTANT_SUBSTRING, TExprOpcode.CONSTANT_SUBSTRING, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.MATH_NEGATIVE, TExprOpcode.MATH_NEGATIVE_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_NEGATIVE, TExprOpcode.MATH_NEGATIVE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_FLOOR, TExprOpcode.MATH_FLOOR, false, PrimitiveType.BIGINT, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.UTILITY_SLEEP, TExprOpcode.UTILITY_SLEEP, false, PrimitiveType.BOOLEAN, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.LT, TExprOpcode.LT_BOOL_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.LT, TExprOpcode.LT_CHAR_CHAR, false, PrimitiveType.BOOLEAN, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.LT, TExprOpcode.LT_SHORT_SHORT, false, PrimitiveType.BOOLEAN, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.LT, TExprOpcode.LT_INT_INT, false, PrimitiveType.BOOLEAN, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.LT, TExprOpcode.LT_LONG_LONG, false, PrimitiveType.BOOLEAN, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.LT, TExprOpcode.LT_FLOAT_FLOAT, false, PrimitiveType.BOOLEAN, PrimitiveType.FLOAT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.LT, TExprOpcode.LT_DOUBLE_DOUBLE, false, PrimitiveType.BOOLEAN, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.LT, TExprOpcode.LT_STRINGVALUE_STRINGVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.LT, TExprOpcode.LT_TIMESTAMPVALUE_TIMESTAMPVALUE, false, PrimitiveType.BOOLEAN, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.TIMESTAMP_HOURS_SUB, TExprOpcode.TIMESTAMP_HOURS_SUB_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_HOURS_SUB, TExprOpcode.TIMESTAMP_HOURS_SUB_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.TIMESTAMP_HOURS_ADD, TExprOpcode.TIMESTAMP_HOURS_ADD_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_HOURS_ADD, TExprOpcode.TIMESTAMP_HOURS_ADD_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_ASIN, TExprOpcode.MATH_ASIN, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_EXP, TExprOpcode.MATH_EXP, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.STRING_RTRIM, TExprOpcode.STRING_RTRIM, false, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.FROM_UNIXTIME, TExprOpcode.FROM_UNIXTIME_INT, false, PrimitiveType.STRING, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.FROM_UNIXTIME, TExprOpcode.FROM_UNIXTIME_INT_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.INT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.TIMESTAMP_YEARS_ADD, TExprOpcode.TIMESTAMP_YEARS_ADD_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_YEARS_ADD, TExprOpcode.TIMESTAMP_YEARS_ADD_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.COMPOUND_NOT, TExprOpcode.COMPOUND_NOT, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.STRING_LEFT, TExprOpcode.STRING_LEFT_STRINGVALUE_INT, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.STRING_LEFT, TExprOpcode.STRING_LEFT_STRINGVALUE_LONG, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.STRING_CONCAT_WS, TExprOpcode.STRING_CONCAT_WS, true, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.TIMESTAMP_MINUTES_ADD, TExprOpcode.TIMESTAMP_MINUTES_ADD_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MINUTES_ADD, TExprOpcode.TIMESTAMP_MINUTES_ADD_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CONSTANT_REGEX, TExprOpcode.CONSTANT_REGEX, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.TIMESTAMP_DAYOFMONTH, TExprOpcode.TIMESTAMP_DAYOFMONTH, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.TIMESTAMP_MINUTE, TExprOpcode.TIMESTAMP_MINUTE, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.MATH_E, TExprOpcode.MATH_E, false, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.TIMESTAMP_YEAR, TExprOpcode.TIMESTAMP_YEAR, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.STRING_LOWER, TExprOpcode.STRING_LOWER, false, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.MATH_LOG10, TExprOpcode.MATH_LOG10, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_SIN, TExprOpcode.MATH_SIN, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CASE, TExprOpcode.CASE_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CASE, TExprOpcode.CASE_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CASE, TExprOpcode.CASE_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CASE, TExprOpcode.CASE_INT, false, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CASE, TExprOpcode.CASE_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CASE, TExprOpcode.CASE_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CASE, TExprOpcode.CASE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CASE, TExprOpcode.CASE_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CASE, TExprOpcode.CASE_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.TIMESTAMP_NANOSECONDS_ADD, TExprOpcode.TIMESTAMP_NANOSECONDS_ADD_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_NANOSECONDS_ADD, TExprOpcode.TIMESTAMP_NANOSECONDS_ADD_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.COMPOUND_OR, TExprOpcode.COMPOUND_OR, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.LIKE, TExprOpcode.LIKE, false, PrimitiveType.BOOLEAN, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.MATH_CONV, TExprOpcode.MATH_CONV_LONG_CHAR_CHAR, false, PrimitiveType.STRING, PrimitiveType.BIGINT, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.MATH_CONV, TExprOpcode.MATH_CONV_STRINGVALUE_CHAR_CHAR, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.MATH_PI, TExprOpcode.MATH_PI, false, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.MATH_HEX, TExprOpcode.MATH_HEX_LONG, false, PrimitiveType.STRING, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_HEX, TExprOpcode.MATH_HEX_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_BOOL_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_CHAR_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.TINYINT, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_SHORT_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.SMALLINT, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_INT_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.INT, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_LONG_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.BIGINT, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_FLOAT_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.FLOAT, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_DOUBLE_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.DOUBLE, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_BOOL_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.BOOLEAN, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_CHAR_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_SHORT_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.SMALLINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_INT_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.INT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_LONG_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.BIGINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_FLOAT_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.FLOAT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_DOUBLE_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.DOUBLE, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_BOOL_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.BOOLEAN, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_CHAR_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.TINYINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_SHORT_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_INT_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.INT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_LONG_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.BIGINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_FLOAT_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.FLOAT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_DOUBLE_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.DOUBLE, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_BOOL_INT, false, PrimitiveType.INT, PrimitiveType.BOOLEAN, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_CHAR_INT, false, PrimitiveType.INT, PrimitiveType.TINYINT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_SHORT_INT, false, PrimitiveType.INT, PrimitiveType.SMALLINT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_INT_INT, false, PrimitiveType.INT, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_LONG_INT, false, PrimitiveType.INT, PrimitiveType.BIGINT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_FLOAT_INT, false, PrimitiveType.INT, PrimitiveType.FLOAT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_DOUBLE_INT, false, PrimitiveType.INT, PrimitiveType.DOUBLE, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_BOOL_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BOOLEAN, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_CHAR_LONG, false, PrimitiveType.BIGINT, PrimitiveType.TINYINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_SHORT_LONG, false, PrimitiveType.BIGINT, PrimitiveType.SMALLINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_INT_LONG, false, PrimitiveType.BIGINT, PrimitiveType.INT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_FLOAT_LONG, false, PrimitiveType.BIGINT, PrimitiveType.FLOAT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_DOUBLE_LONG, false, PrimitiveType.BIGINT, PrimitiveType.DOUBLE, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_BOOL_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.BOOLEAN, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_CHAR_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.TINYINT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_SHORT_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.SMALLINT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_INT_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.INT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_LONG_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.BIGINT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_FLOAT_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.FLOAT, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_DOUBLE_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.DOUBLE, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_BOOL_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.BOOLEAN, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_CHAR_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.TINYINT, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_SHORT_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.SMALLINT, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_INT_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.INT, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_LONG_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.BIGINT, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_FLOAT_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.FLOAT, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_DOUBLE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_STRINGVALUE_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.STRING, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_STRINGVALUE_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.STRING, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_STRINGVALUE_INT, false, PrimitiveType.INT, PrimitiveType.STRING, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_STRINGVALUE_LONG, false, PrimitiveType.BIGINT, PrimitiveType.STRING, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_STRINGVALUE_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.STRING, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_STRINGVALUE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.STRING, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_BOOL_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.BOOLEAN, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_SHORT_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.SMALLINT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_INT_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.INT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_LONG_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.BIGINT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_FLOAT_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.FLOAT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_DOUBLE_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.DOUBLE, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_CHAR_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.TINYINT, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_TIMESTAMPVALUE_BOOL, false, PrimitiveType.BOOLEAN, PrimitiveType.TIMESTAMP, PrimitiveType.BOOLEAN);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_TIMESTAMPVALUE_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.TIMESTAMP, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_TIMESTAMPVALUE_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.TIMESTAMP, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_TIMESTAMPVALUE_INT, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_TIMESTAMPVALUE_LONG, false, PrimitiveType.BIGINT, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_TIMESTAMPVALUE_FLOAT, false, PrimitiveType.FLOAT, PrimitiveType.TIMESTAMP, PrimitiveType.FLOAT);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_TIMESTAMPVALUE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.TIMESTAMP, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_TIMESTAMPVALUE_STRINGVALUE, false, PrimitiveType.STRING, PrimitiveType.TIMESTAMP, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_STRINGVALUE_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.STRING, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_BOOL_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.BOOLEAN, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_CHAR_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.TINYINT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_SHORT_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.SMALLINT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_INT_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_LONG_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_FLOAT_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.FLOAT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.CAST, TExprOpcode.CAST_DOUBLE_TIMESTAMPVALUE, false, PrimitiveType.TIMESTAMP, PrimitiveType.DOUBLE, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.TIMESTAMP_MONTHS_SUB, TExprOpcode.TIMESTAMP_MONTHS_SUB_TIMESTAMPVALUE_INT, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.TIMESTAMP_MONTHS_SUB, TExprOpcode.TIMESTAMP_MONTHS_SUB_TIMESTAMPVALUE_LONG, false, PrimitiveType.TIMESTAMP, PrimitiveType.TIMESTAMP, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.BITXOR, TExprOpcode.BITXOR_CHAR_CHAR, false, PrimitiveType.TINYINT, PrimitiveType.TINYINT, PrimitiveType.TINYINT);
    result &= registry.add(FunctionOperator.BITXOR, TExprOpcode.BITXOR_SHORT_SHORT, false, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT, PrimitiveType.SMALLINT);
    result &= registry.add(FunctionOperator.BITXOR, TExprOpcode.BITXOR_INT_INT, false, PrimitiveType.INT, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.BITXOR, TExprOpcode.BITXOR_LONG_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.TIMESTAMP_SECOND, TExprOpcode.TIMESTAMP_SECOND, false, PrimitiveType.INT, PrimitiveType.TIMESTAMP);
    result &= registry.add(FunctionOperator.UTILITY_USER, TExprOpcode.UTILITY_USER, false, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.STRING_SUBSTRING, TExprOpcode.STRING_SUBSTRING_STRINGVALUE_INT, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.STRING_SUBSTRING, TExprOpcode.STRING_SUBSTRING_STRINGVALUE_LONG, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.STRING_SUBSTRING, TExprOpcode.STRING_SUBSTRING_STRINGVALUE_INT_INT, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.INT, PrimitiveType.INT);
    result &= registry.add(FunctionOperator.STRING_SUBSTRING, TExprOpcode.STRING_SUBSTRING_STRINGVALUE_LONG_LONG, false, PrimitiveType.STRING, PrimitiveType.STRING, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.STRING_UPPER, TExprOpcode.STRING_UPPER, false, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.MATH_POSITIVE, TExprOpcode.MATH_POSITIVE_LONG, false, PrimitiveType.BIGINT, PrimitiveType.BIGINT);
    result &= registry.add(FunctionOperator.MATH_POSITIVE, TExprOpcode.MATH_POSITIVE_DOUBLE, false, PrimitiveType.DOUBLE, PrimitiveType.DOUBLE);
    result &= registry.add(FunctionOperator.STRING_CONCAT, TExprOpcode.STRING_CONCAT, true, PrimitiveType.STRING, PrimitiveType.STRING);
    result &= registry.add(FunctionOperator.STRING_LENGTH, TExprOpcode.STRING_LENGTH, false, PrimitiveType.INT, PrimitiveType.STRING);

    result &= registry.addFunctionMapping("lpad", FunctionOperator.STRING_LPAD);
    result &= registry.addFunctionMapping("parse_url", FunctionOperator.STRING_PARSE_URL);
    result &= registry.addFunctionMapping("milliseconds_add", FunctionOperator.TIMESTAMP_MILLISECONDS_ADD);
    result &= registry.addFunctionMapping("rand", FunctionOperator.MATH_RAND);
    result &= registry.addFunctionMapping("microseconds_add", FunctionOperator.TIMESTAMP_MICROSECONDS_ADD);
    result &= registry.addFunctionMapping("locate", FunctionOperator.STRING_LOCATE);
    result &= registry.addFunctionMapping("weeks_add", FunctionOperator.TIMESTAMP_WEEKS_ADD);
    result &= registry.addFunctionMapping("month", FunctionOperator.TIMESTAMP_MONTH);
    result &= registry.addFunctionMapping("microseconds_sub", FunctionOperator.TIMESTAMP_MICROSECONDS_SUB);
    result &= registry.addFunctionMapping("acos", FunctionOperator.MATH_ACOS);
    result &= registry.addFunctionMapping("if", FunctionOperator.CONDITIONAL_IF);
    result &= registry.addFunctionMapping("now", FunctionOperator.TIMESTAMP_NOW);
    result &= registry.addFunctionMapping("current_timestamp", FunctionOperator.TIMESTAMP_NOW);
    result &= registry.addFunctionMapping("coalesce", FunctionOperator.CONDITIONAL_COALESCE);
    result &= registry.addFunctionMapping("cos", FunctionOperator.MATH_COS);
    result &= registry.addFunctionMapping("bin", FunctionOperator.MATH_BIN);
    result &= registry.addFunctionMapping("sign", FunctionOperator.MATH_SIGN);
    result &= registry.addFunctionMapping("log", FunctionOperator.MATH_LOG);
    result &= registry.addFunctionMapping("from_utc_timestamp", FunctionOperator.FROM_UTC_TIMESTAMP);
    result &= registry.addFunctionMapping("years_sub", FunctionOperator.TIMESTAMP_YEARS_SUB);
    result &= registry.addFunctionMapping("trim", FunctionOperator.STRING_TRIM);
    result &= registry.addFunctionMapping("minutes_sub", FunctionOperator.TIMESTAMP_MINUTES_SUB);
    result &= registry.addFunctionMapping("ltrim", FunctionOperator.STRING_LTRIM);
    result &= registry.addFunctionMapping("hour", FunctionOperator.TIMESTAMP_HOUR);
    result &= registry.addFunctionMapping("isnull", FunctionOperator.CONDITIONAL_ISNULL);
    result &= registry.addFunctionMapping("ifnull", FunctionOperator.CONDITIONAL_ISNULL);
    result &= registry.addFunctionMapping("nvl", FunctionOperator.CONDITIONAL_ISNULL);
    result &= registry.addFunctionMapping("round", FunctionOperator.MATH_ROUND);
    result &= registry.addFunctionMapping("ln", FunctionOperator.MATH_LN);
    result &= registry.addFunctionMapping("months_add", FunctionOperator.TIMESTAMP_MONTHS_ADD);
    result &= registry.addFunctionMapping("quotient", FunctionOperator.MATH_QUOTIENT);
    result &= registry.addFunctionMapping("abs", FunctionOperator.MATH_ABS);
    result &= registry.addFunctionMapping("datediff", FunctionOperator.TIMESTAMP_DIFF);
    result &= registry.addFunctionMapping("pow", FunctionOperator.MATH_POW);
    result &= registry.addFunctionMapping("power", FunctionOperator.MATH_POW);
    result &= registry.addFunctionMapping("ascii", FunctionOperator.STRING_ASCII);
    result &= registry.addFunctionMapping("translate", FunctionOperator.STRING_TRANSLATE);
    result &= registry.addFunctionMapping("seconds_add", FunctionOperator.TIMESTAMP_SECONDS_ADD);
    result &= registry.addFunctionMapping("sqrt", FunctionOperator.MATH_SQRT);
    result &= registry.addFunctionMapping("unhex", FunctionOperator.MATH_UNHEX);
    result &= registry.addFunctionMapping("seconds_sub", FunctionOperator.TIMESTAMP_SECONDS_SUB);
    result &= registry.addFunctionMapping("weeks_sub", FunctionOperator.TIMESTAMP_WEEKS_SUB);
    result &= registry.addFunctionMapping("strright", FunctionOperator.STRING_RIGHT);
    result &= registry.addFunctionMapping("degrees", FunctionOperator.MATH_DEGREES);
    result &= registry.addFunctionMapping("rpad", FunctionOperator.STRING_RPAD);
    result &= registry.addFunctionMapping("atan", FunctionOperator.MATH_ATAN);
    result &= registry.addFunctionMapping("days_add", FunctionOperator.TIMESTAMP_DAYS_ADD);
    result &= registry.addFunctionMapping("date_add", FunctionOperator.TIMESTAMP_DAYS_ADD);
    result &= registry.addFunctionMapping("adddate", FunctionOperator.TIMESTAMP_DAYS_ADD);
    result &= registry.addFunctionMapping("dayofyear", FunctionOperator.TIMESTAMP_DAYOFYEAR);
    result &= registry.addFunctionMapping("unix_timestamp", FunctionOperator.UNIX_TIMESTAMP);
    result &= registry.addFunctionMapping("regexp_replace", FunctionOperator.STRING_REGEXP_REPLACE);
    result &= registry.addFunctionMapping("regexp_extract", FunctionOperator.STRING_REGEXP_EXTRACT);
    result &= registry.addFunctionMapping("ceil", FunctionOperator.MATH_CEIL);
    result &= registry.addFunctionMapping("ceiling", FunctionOperator.MATH_CEIL);
    result &= registry.addFunctionMapping("log2", FunctionOperator.MATH_LOG2);
    result &= registry.addFunctionMapping("reverse", FunctionOperator.STRING_REVERSE);
    result &= registry.addFunctionMapping("instr", FunctionOperator.STRING_INSTR);
    result &= registry.addFunctionMapping("space", FunctionOperator.STRING_SPACE);
    result &= registry.addFunctionMapping("tan", FunctionOperator.MATH_TAN);
    result &= registry.addFunctionMapping("weekofyear", FunctionOperator.TIMESTAMP_WEEKOFYEAR);
    result &= registry.addFunctionMapping("find_in_set", FunctionOperator.STRING_FIND_IN_SET);
    result &= registry.addFunctionMapping("radians", FunctionOperator.MATH_RADIANS);
    result &= registry.addFunctionMapping("nanoseconds_sub", FunctionOperator.TIMESTAMP_NANOSECONDS_SUB);
    result &= registry.addFunctionMapping("to_date", FunctionOperator.TIMESTAMP_TO_DATE);
    result &= registry.addFunctionMapping("version", FunctionOperator.UTILITY_VERSION);
    result &= registry.addFunctionMapping("dayofweek", FunctionOperator.TIMESTAMP_DAYOFWEEK);
    result &= registry.addFunctionMapping("repeat", FunctionOperator.STRING_REPEAT);
    result &= registry.addFunctionMapping("milliseconds_sub", FunctionOperator.TIMESTAMP_MILLISECONDS_SUB);
    result &= registry.addFunctionMapping("to_utc_timestamp", FunctionOperator.TO_UTC_TIMESTAMP);
    result &= registry.addFunctionMapping("pmod", FunctionOperator.MATH_PMOD);
    result &= registry.addFunctionMapping("days_sub", FunctionOperator.TIMESTAMP_DAYS_SUB);
    result &= registry.addFunctionMapping("date_sub", FunctionOperator.TIMESTAMP_DAYS_SUB);
    result &= registry.addFunctionMapping("subdate", FunctionOperator.TIMESTAMP_DAYS_SUB);
    result &= registry.addFunctionMapping("negative", FunctionOperator.MATH_NEGATIVE);
    result &= registry.addFunctionMapping("floor", FunctionOperator.MATH_FLOOR);
    result &= registry.addFunctionMapping("sleep", FunctionOperator.UTILITY_SLEEP);
    result &= registry.addFunctionMapping("hours_sub", FunctionOperator.TIMESTAMP_HOURS_SUB);
    result &= registry.addFunctionMapping("hours_add", FunctionOperator.TIMESTAMP_HOURS_ADD);
    result &= registry.addFunctionMapping("asin", FunctionOperator.MATH_ASIN);
    result &= registry.addFunctionMapping("exp", FunctionOperator.MATH_EXP);
    result &= registry.addFunctionMapping("rtrim", FunctionOperator.STRING_RTRIM);
    result &= registry.addFunctionMapping("from_unixtime", FunctionOperator.FROM_UNIXTIME);
    result &= registry.addFunctionMapping("years_add", FunctionOperator.TIMESTAMP_YEARS_ADD);
    result &= registry.addFunctionMapping("strleft", FunctionOperator.STRING_LEFT);
    result &= registry.addFunctionMapping("concat_ws", FunctionOperator.STRING_CONCAT_WS);
    result &= registry.addFunctionMapping("minutes_add", FunctionOperator.TIMESTAMP_MINUTES_ADD);
    result &= registry.addFunctionMapping("day", FunctionOperator.TIMESTAMP_DAYOFMONTH);
    result &= registry.addFunctionMapping("dayofmonth", FunctionOperator.TIMESTAMP_DAYOFMONTH);
    result &= registry.addFunctionMapping("minute", FunctionOperator.TIMESTAMP_MINUTE);
    result &= registry.addFunctionMapping("e", FunctionOperator.MATH_E);
    result &= registry.addFunctionMapping("year", FunctionOperator.TIMESTAMP_YEAR);
    result &= registry.addFunctionMapping("lower", FunctionOperator.STRING_LOWER);
    result &= registry.addFunctionMapping("lcase", FunctionOperator.STRING_LOWER);
    result &= registry.addFunctionMapping("log10", FunctionOperator.MATH_LOG10);
    result &= registry.addFunctionMapping("sin", FunctionOperator.MATH_SIN);
    result &= registry.addFunctionMapping("nanoseconds_add", FunctionOperator.TIMESTAMP_NANOSECONDS_ADD);
    result &= registry.addFunctionMapping("conv", FunctionOperator.MATH_CONV);
    result &= registry.addFunctionMapping("pi", FunctionOperator.MATH_PI);
    result &= registry.addFunctionMapping("hex", FunctionOperator.MATH_HEX);
    result &= registry.addFunctionMapping("months_sub", FunctionOperator.TIMESTAMP_MONTHS_SUB);
    result &= registry.addFunctionMapping("second", FunctionOperator.TIMESTAMP_SECOND);
    result &= registry.addFunctionMapping("user", FunctionOperator.UTILITY_USER);
    result &= registry.addFunctionMapping("substr", FunctionOperator.STRING_SUBSTRING);
    result &= registry.addFunctionMapping("substring", FunctionOperator.STRING_SUBSTRING);
    result &= registry.addFunctionMapping("upper", FunctionOperator.STRING_UPPER);
    result &= registry.addFunctionMapping("ucase", FunctionOperator.STRING_UPPER);
    result &= registry.addFunctionMapping("positive", FunctionOperator.MATH_POSITIVE);
    result &= registry.addFunctionMapping("concat", FunctionOperator.STRING_CONCAT);
    result &= registry.addFunctionMapping("length", FunctionOperator.STRING_LENGTH);

    Preconditions.checkState(result); 
  }
}

