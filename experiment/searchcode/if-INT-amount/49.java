/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package fx.sunjoy.server.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TreapDBService {

  public interface Iface {

    public void put(String key, ByteBuffer value) throws TException;

    public ByteBuffer get(String key) throws TException;

    public void bulkPut(Map<String,ByteBuffer> kvMap) throws TException;

    public List<Pair> bulkGet(List<String> keyList) throws TException;

    public List<Pair> prefix(String prefixStr, int limit, String startK, boolean asc) throws TException;

    public List<Pair> bulkPrefix(List<String> prefixList, int limit, String startK, boolean asc) throws TException;

    public List<Pair> kmax(int k) throws TException;

    public List<Pair> kmin(int k) throws TException;

    public Pair kth(int k, boolean asc) throws TException;

    public List<Pair> range(String kStart, String kEnd, int limit) throws TException;

    public int rank(String key, boolean asc) throws TException;

    public List<Pair> before(String key, int limit) throws TException;

    public List<Pair> after(String key, int limit) throws TException;

    public int length() throws TException;

    public boolean remove(String key) throws TException;

    public boolean removePrefix(String key) throws TException;

    public void optimize(int amount) throws TException;

  }

  public interface AsyncIface {

    public void put(String key, ByteBuffer value, AsyncMethodCallback<AsyncClient.put_call> resultHandler) throws TException;

    public void get(String key, AsyncMethodCallback<AsyncClient.get_call> resultHandler) throws TException;

    public void bulkPut(Map<String,ByteBuffer> kvMap, AsyncMethodCallback<AsyncClient.bulkPut_call> resultHandler) throws TException;

    public void bulkGet(List<String> keyList, AsyncMethodCallback<AsyncClient.bulkGet_call> resultHandler) throws TException;

    public void prefix(String prefixStr, int limit, String startK, boolean asc, AsyncMethodCallback<AsyncClient.prefix_call> resultHandler) throws TException;

    public void bulkPrefix(List<String> prefixList, int limit, String startK, boolean asc, AsyncMethodCallback<AsyncClient.bulkPrefix_call> resultHandler) throws TException;

    public void kmax(int k, AsyncMethodCallback<AsyncClient.kmax_call> resultHandler) throws TException;

    public void kmin(int k, AsyncMethodCallback<AsyncClient.kmin_call> resultHandler) throws TException;

    public void kth(int k, boolean asc, AsyncMethodCallback<AsyncClient.kth_call> resultHandler) throws TException;

    public void range(String kStart, String kEnd, int limit, AsyncMethodCallback<AsyncClient.range_call> resultHandler) throws TException;

    public void rank(String key, boolean asc, AsyncMethodCallback<AsyncClient.rank_call> resultHandler) throws TException;

    public void before(String key, int limit, AsyncMethodCallback<AsyncClient.before_call> resultHandler) throws TException;

    public void after(String key, int limit, AsyncMethodCallback<AsyncClient.after_call> resultHandler) throws TException;

    public void length(AsyncMethodCallback<AsyncClient.length_call> resultHandler) throws TException;

    public void remove(String key, AsyncMethodCallback<AsyncClient.remove_call> resultHandler) throws TException;

    public void removePrefix(String key, AsyncMethodCallback<AsyncClient.removePrefix_call> resultHandler) throws TException;

    public void optimize(int amount, AsyncMethodCallback<AsyncClient.optimize_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void put(String key, ByteBuffer value) throws TException
    {
      send_put(key, value);
      recv_put();
    }

    public void send_put(String key, ByteBuffer value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("put", TMessageType.CALL, ++seqid_));
      put_args args = new put_args();
      args.setKey(key);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_put() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "put failed: out of sequence response");
      }
      put_result result = new put_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public ByteBuffer get(String key) throws TException
    {
      send_get(key);
      return recv_get();
    }

    public void send_get(String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get", TMessageType.CALL, ++seqid_));
      get_args args = new get_args();
      args.setKey(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ByteBuffer recv_get() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "get failed: out of sequence response");
      }
      get_result result = new get_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get failed: unknown result");
    }

    public void bulkPut(Map<String,ByteBuffer> kvMap) throws TException
    {
      send_bulkPut(kvMap);
      recv_bulkPut();
    }

    public void send_bulkPut(Map<String,ByteBuffer> kvMap) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("bulkPut", TMessageType.CALL, ++seqid_));
      bulkPut_args args = new bulkPut_args();
      args.setKvMap(kvMap);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_bulkPut() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "bulkPut failed: out of sequence response");
      }
      bulkPut_result result = new bulkPut_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public List<Pair> bulkGet(List<String> keyList) throws TException
    {
      send_bulkGet(keyList);
      return recv_bulkGet();
    }

    public void send_bulkGet(List<String> keyList) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("bulkGet", TMessageType.CALL, ++seqid_));
      bulkGet_args args = new bulkGet_args();
      args.setKeyList(keyList);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Pair> recv_bulkGet() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "bulkGet failed: out of sequence response");
      }
      bulkGet_result result = new bulkGet_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "bulkGet failed: unknown result");
    }

    public List<Pair> prefix(String prefixStr, int limit, String startK, boolean asc) throws TException
    {
      send_prefix(prefixStr, limit, startK, asc);
      return recv_prefix();
    }

    public void send_prefix(String prefixStr, int limit, String startK, boolean asc) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("prefix", TMessageType.CALL, ++seqid_));
      prefix_args args = new prefix_args();
      args.setPrefixStr(prefixStr);
      args.setLimit(limit);
      args.setStartK(startK);
      args.setAsc(asc);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Pair> recv_prefix() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "prefix failed: out of sequence response");
      }
      prefix_result result = new prefix_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "prefix failed: unknown result");
    }

    public List<Pair> bulkPrefix(List<String> prefixList, int limit, String startK, boolean asc) throws TException
    {
      send_bulkPrefix(prefixList, limit, startK, asc);
      return recv_bulkPrefix();
    }

    public void send_bulkPrefix(List<String> prefixList, int limit, String startK, boolean asc) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("bulkPrefix", TMessageType.CALL, ++seqid_));
      bulkPrefix_args args = new bulkPrefix_args();
      args.setPrefixList(prefixList);
      args.setLimit(limit);
      args.setStartK(startK);
      args.setAsc(asc);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Pair> recv_bulkPrefix() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "bulkPrefix failed: out of sequence response");
      }
      bulkPrefix_result result = new bulkPrefix_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "bulkPrefix failed: unknown result");
    }

    public List<Pair> kmax(int k) throws TException
    {
      send_kmax(k);
      return recv_kmax();
    }

    public void send_kmax(int k) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("kmax", TMessageType.CALL, ++seqid_));
      kmax_args args = new kmax_args();
      args.setK(k);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Pair> recv_kmax() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "kmax failed: out of sequence response");
      }
      kmax_result result = new kmax_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "kmax failed: unknown result");
    }

    public List<Pair> kmin(int k) throws TException
    {
      send_kmin(k);
      return recv_kmin();
    }

    public void send_kmin(int k) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("kmin", TMessageType.CALL, ++seqid_));
      kmin_args args = new kmin_args();
      args.setK(k);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Pair> recv_kmin() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "kmin failed: out of sequence response");
      }
      kmin_result result = new kmin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "kmin failed: unknown result");
    }

    public Pair kth(int k, boolean asc) throws TException
    {
      send_kth(k, asc);
      return recv_kth();
    }

    public void send_kth(int k, boolean asc) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("kth", TMessageType.CALL, ++seqid_));
      kth_args args = new kth_args();
      args.setK(k);
      args.setAsc(asc);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Pair recv_kth() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "kth failed: out of sequence response");
      }
      kth_result result = new kth_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "kth failed: unknown result");
    }

    public List<Pair> range(String kStart, String kEnd, int limit) throws TException
    {
      send_range(kStart, kEnd, limit);
      return recv_range();
    }

    public void send_range(String kStart, String kEnd, int limit) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("range", TMessageType.CALL, ++seqid_));
      range_args args = new range_args();
      args.setKStart(kStart);
      args.setKEnd(kEnd);
      args.setLimit(limit);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Pair> recv_range() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "range failed: out of sequence response");
      }
      range_result result = new range_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "range failed: unknown result");
    }

    public int rank(String key, boolean asc) throws TException
    {
      send_rank(key, asc);
      return recv_rank();
    }

    public void send_rank(String key, boolean asc) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("rank", TMessageType.CALL, ++seqid_));
      rank_args args = new rank_args();
      args.setKey(key);
      args.setAsc(asc);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_rank() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "rank failed: out of sequence response");
      }
      rank_result result = new rank_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "rank failed: unknown result");
    }

    public List<Pair> before(String key, int limit) throws TException
    {
      send_before(key, limit);
      return recv_before();
    }

    public void send_before(String key, int limit) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("before", TMessageType.CALL, ++seqid_));
      before_args args = new before_args();
      args.setKey(key);
      args.setLimit(limit);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Pair> recv_before() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "before failed: out of sequence response");
      }
      before_result result = new before_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "before failed: unknown result");
    }

    public List<Pair> after(String key, int limit) throws TException
    {
      send_after(key, limit);
      return recv_after();
    }

    public void send_after(String key, int limit) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("after", TMessageType.CALL, ++seqid_));
      after_args args = new after_args();
      args.setKey(key);
      args.setLimit(limit);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Pair> recv_after() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "after failed: out of sequence response");
      }
      after_result result = new after_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "after failed: unknown result");
    }

    public int length() throws TException
    {
      send_length();
      return recv_length();
    }

    public void send_length() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("length", TMessageType.CALL, ++seqid_));
      length_args args = new length_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_length() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "length failed: out of sequence response");
      }
      length_result result = new length_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "length failed: unknown result");
    }

    public boolean remove(String key) throws TException
    {
      send_remove(key);
      return recv_remove();
    }

    public void send_remove(String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("remove", TMessageType.CALL, ++seqid_));
      remove_args args = new remove_args();
      args.setKey(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_remove() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "remove failed: out of sequence response");
      }
      remove_result result = new remove_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "remove failed: unknown result");
    }

    public boolean removePrefix(String key) throws TException
    {
      send_removePrefix(key);
      return recv_removePrefix();
    }

    public void send_removePrefix(String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removePrefix", TMessageType.CALL, ++seqid_));
      removePrefix_args args = new removePrefix_args();
      args.setKey(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_removePrefix() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removePrefix failed: out of sequence response");
      }
      removePrefix_result result = new removePrefix_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "removePrefix failed: unknown result");
    }

    public void optimize(int amount) throws TException
    {
      send_optimize(amount);
      recv_optimize();
    }

    public void send_optimize(int amount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("optimize", TMessageType.CALL, ++seqid_));
      optimize_args args = new optimize_args();
      args.setAmount(amount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_optimize() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "optimize failed: out of sequence response");
      }
      optimize_result result = new optimize_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void put(String key, ByteBuffer value, AsyncMethodCallback<put_call> resultHandler) throws TException {
      checkReady();
      put_call method_call = new put_call(key, value, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class put_call extends TAsyncMethodCall {
      private String key;
      private ByteBuffer value;
      public put_call(String key, ByteBuffer value, AsyncMethodCallback<put_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.value = value;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("put", TMessageType.CALL, 0));
        put_args args = new put_args();
        args.setKey(key);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_put();
      }
    }

    public void get(String key, AsyncMethodCallback<get_call> resultHandler) throws TException {
      checkReady();
      get_call method_call = new get_call(key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class get_call extends TAsyncMethodCall {
      private String key;
      public get_call(String key, AsyncMethodCallback<get_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("get", TMessageType.CALL, 0));
        get_args args = new get_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get();
      }
    }

    public void bulkPut(Map<String,ByteBuffer> kvMap, AsyncMethodCallback<bulkPut_call> resultHandler) throws TException {
      checkReady();
      bulkPut_call method_call = new bulkPut_call(kvMap, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class bulkPut_call extends TAsyncMethodCall {
      private Map<String,ByteBuffer> kvMap;
      public bulkPut_call(Map<String,ByteBuffer> kvMap, AsyncMethodCallback<bulkPut_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kvMap = kvMap;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("bulkPut", TMessageType.CALL, 0));
        bulkPut_args args = new bulkPut_args();
        args.setKvMap(kvMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bulkPut();
      }
    }

    public void bulkGet(List<String> keyList, AsyncMethodCallback<bulkGet_call> resultHandler) throws TException {
      checkReady();
      bulkGet_call method_call = new bulkGet_call(keyList, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class bulkGet_call extends TAsyncMethodCall {
      private List<String> keyList;
      public bulkGet_call(List<String> keyList, AsyncMethodCallback<bulkGet_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyList = keyList;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("bulkGet", TMessageType.CALL, 0));
        bulkGet_args args = new bulkGet_args();
        args.setKeyList(keyList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Pair> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bulkGet();
      }
    }

    public void prefix(String prefixStr, int limit, String startK, boolean asc, AsyncMethodCallback<prefix_call> resultHandler) throws TException {
      checkReady();
      prefix_call method_call = new prefix_call(prefixStr, limit, startK, asc, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class prefix_call extends TAsyncMethodCall {
      private String prefixStr;
      private int limit;
      private String startK;
      private boolean asc;
      public prefix_call(String prefixStr, int limit, String startK, boolean asc, AsyncMethodCallback<prefix_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prefixStr = prefixStr;
        this.limit = limit;
        this.startK = startK;
        this.asc = asc;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("prefix", TMessageType.CALL, 0));
        prefix_args args = new prefix_args();
        args.setPrefixStr(prefixStr);
        args.setLimit(limit);
        args.setStartK(startK);
        args.setAsc(asc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Pair> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_prefix();
      }
    }

    public void bulkPrefix(List<String> prefixList, int limit, String startK, boolean asc, AsyncMethodCallback<bulkPrefix_call> resultHandler) throws TException {
      checkReady();
      bulkPrefix_call method_call = new bulkPrefix_call(prefixList, limit, startK, asc, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class bulkPrefix_call extends TAsyncMethodCall {
      private List<String> prefixList;
      private int limit;
      private String startK;
      private boolean asc;
      public bulkPrefix_call(List<String> prefixList, int limit, String startK, boolean asc, AsyncMethodCallback<bulkPrefix_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prefixList = prefixList;
        this.limit = limit;
        this.startK = startK;
        this.asc = asc;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("bulkPrefix", TMessageType.CALL, 0));
        bulkPrefix_args args = new bulkPrefix_args();
        args.setPrefixList(prefixList);
        args.setLimit(limit);
        args.setStartK(startK);
        args.setAsc(asc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Pair> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bulkPrefix();
      }
    }

    public void kmax(int k, AsyncMethodCallback<kmax_call> resultHandler) throws TException {
      checkReady();
      kmax_call method_call = new kmax_call(k, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class kmax_call extends TAsyncMethodCall {
      private int k;
      public kmax_call(int k, AsyncMethodCallback<kmax_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.k = k;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("kmax", TMessageType.CALL, 0));
        kmax_args args = new kmax_args();
        args.setK(k);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Pair> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_kmax();
      }
    }

    public void kmin(int k, AsyncMethodCallback<kmin_call> resultHandler) throws TException {
      checkReady();
      kmin_call method_call = new kmin_call(k, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class kmin_call extends TAsyncMethodCall {
      private int k;
      public kmin_call(int k, AsyncMethodCallback<kmin_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.k = k;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("kmin", TMessageType.CALL, 0));
        kmin_args args = new kmin_args();
        args.setK(k);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Pair> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_kmin();
      }
    }

    public void kth(int k, boolean asc, AsyncMethodCallback<kth_call> resultHandler) throws TException {
      checkReady();
      kth_call method_call = new kth_call(k, asc, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class kth_call extends TAsyncMethodCall {
      private int k;
      private boolean asc;
      public kth_call(int k, boolean asc, AsyncMethodCallback<kth_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.k = k;
        this.asc = asc;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("kth", TMessageType.CALL, 0));
        kth_args args = new kth_args();
        args.setK(k);
        args.setAsc(asc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Pair getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_kth();
      }
    }

    public void range(String kStart, String kEnd, int limit, AsyncMethodCallback<range_call> resultHandler) throws TException {
      checkReady();
      range_call method_call = new range_call(kStart, kEnd, limit, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class range_call extends TAsyncMethodCall {
      private String kStart;
      private String kEnd;
      private int limit;
      public range_call(String kStart, String kEnd, int limit, AsyncMethodCallback<range_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kStart = kStart;
        this.kEnd = kEnd;
        this.limit = limit;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("range", TMessageType.CALL, 0));
        range_args args = new range_args();
        args.setKStart(kStart);
        args.setKEnd(kEnd);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Pair> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_range();
      }
    }

    public void rank(String key, boolean asc, AsyncMethodCallback<rank_call> resultHandler) throws TException {
      checkReady();
      rank_call method_call = new rank_call(key, asc, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class rank_call extends TAsyncMethodCall {
      private String key;
      private boolean asc;
      public rank_call(String key, boolean asc, AsyncMethodCallback<rank_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.asc = asc;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("rank", TMessageType.CALL, 0));
        rank_args args = new rank_args();
        args.setKey(key);
        args.setAsc(asc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rank();
      }
    }

    public void before(String key, int limit, AsyncMethodCallback<before_call> resultHandler) throws TException {
      checkReady();
      before_call method_call = new before_call(key, limit, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class before_call extends TAsyncMethodCall {
      private String key;
      private int limit;
      public before_call(String key, int limit, AsyncMethodCallback<before_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.limit = limit;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("before", TMessageType.CALL, 0));
        before_args args = new before_args();
        args.setKey(key);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Pair> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_before();
      }
    }

    public void after(String key, int limit, AsyncMethodCallback<after_call> resultHandler) throws TException {
      checkReady();
      after_call method_call = new after_call(key, limit, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class after_call extends TAsyncMethodCall {
      private String key;
      private int limit;
      public after_call(String key, int limit, AsyncMethodCallback<after_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.limit = limit;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("after", TMessageType.CALL, 0));
        after_args args = new after_args();
        args.setKey(key);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Pair> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_after();
      }
    }

    public void length(AsyncMethodCallback<length_call> resultHandler) throws TException {
      checkReady();
      length_call method_call = new length_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class length_call extends TAsyncMethodCall {
      public length_call(AsyncMethodCallback<length_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("length", TMessageType.CALL, 0));
        length_args args = new length_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_length();
      }
    }

    public void remove(String key, AsyncMethodCallback<remove_call> resultHandler) throws TException {
      checkReady();
      remove_call method_call = new remove_call(key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class remove_call extends TAsyncMethodCall {
      private String key;
      public remove_call(String key, AsyncMethodCallback<remove_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("remove", TMessageType.CALL, 0));
        remove_args args = new remove_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_remove();
      }
    }

    public void removePrefix(String key, AsyncMethodCallback<removePrefix_call> resultHandler) throws TException {
      checkReady();
      removePrefix_call method_call = new removePrefix_call(key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class removePrefix_call extends TAsyncMethodCall {
      private String key;
      public removePrefix_call(String key, AsyncMethodCallback<removePrefix_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("removePrefix", TMessageType.CALL, 0));
        removePrefix_args args = new removePrefix_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removePrefix();
      }
    }

    public void optimize(int amount, AsyncMethodCallback<optimize_call> resultHandler) throws TException {
      checkReady();
      optimize_call method_call = new optimize_call(amount, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class optimize_call extends TAsyncMethodCall {
      private int amount;
      public optimize_call(int amount, AsyncMethodCallback<optimize_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.amount = amount;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("optimize", TMessageType.CALL, 0));
        optimize_args args = new optimize_args();
        args.setAmount(amount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_optimize();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("put", new put());
      processMap_.put("get", new get());
      processMap_.put("bulkPut", new bulkPut());
      processMap_.put("bulkGet", new bulkGet());
      processMap_.put("prefix", new prefix());
      processMap_.put("bulkPrefix", new bulkPrefix());
      processMap_.put("kmax", new kmax());
      processMap_.put("kmin", new kmin());
      processMap_.put("kth", new kth());
      processMap_.put("range", new range());
      processMap_.put("rank", new rank());
      processMap_.put("before", new before());
      processMap_.put("after", new after());
      processMap_.put("length", new length());
      processMap_.put("remove", new remove());
      processMap_.put("removePrefix", new removePrefix());
      processMap_.put("optimize", new optimize());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class put implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        put_args args = new put_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("put", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        put_result result = new put_result();
        iface_.put(args.key, args.value);
        oprot.writeMessageBegin(new TMessage("put", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_args args = new get_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("get", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        get_result result = new get_result();
        result.success = iface_.get(args.key);
        oprot.writeMessageBegin(new TMessage("get", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class bulkPut implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        bulkPut_args args = new bulkPut_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("bulkPut", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        bulkPut_result result = new bulkPut_result();
        iface_.bulkPut(args.kvMap);
        oprot.writeMessageBegin(new TMessage("bulkPut", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class bulkGet implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        bulkGet_args args = new bulkGet_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("bulkGet", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        bulkGet_result result = new bulkGet_result();
        result.success = iface_.bulkGet(args.keyList);
        oprot.writeMessageBegin(new TMessage("bulkGet", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class prefix implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        prefix_args args = new prefix_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("prefix", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        prefix_result result = new prefix_result();
        result.success = iface_.prefix(args.prefixStr, args.limit, args.startK, args.asc);
        oprot.writeMessageBegin(new TMessage("prefix", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class bulkPrefix implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        bulkPrefix_args args = new bulkPrefix_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("bulkPrefix", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        bulkPrefix_result result = new bulkPrefix_result();
        result.success = iface_.bulkPrefix(args.prefixList, args.limit, args.startK, args.asc);
        oprot.writeMessageBegin(new TMessage("bulkPrefix", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class kmax implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        kmax_args args = new kmax_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("kmax", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        kmax_result result = new kmax_result();
        result.success = iface_.kmax(args.k);
        oprot.writeMessageBegin(new TMessage("kmax", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class kmin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        kmin_args args = new kmin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("kmin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        kmin_result result = new kmin_result();
        result.success = iface_.kmin(args.k);
        oprot.writeMessageBegin(new TMessage("kmin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class kth implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        kth_args args = new kth_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("kth", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        kth_result result = new kth_result();
        result.success = iface_.kth(args.k, args.asc);
        oprot.writeMessageBegin(new TMessage("kth", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class range implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        range_args args = new range_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("range", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        range_result result = new range_result();
        result.success = iface_.range(args.kStart, args.kEnd, args.limit);
        oprot.writeMessageBegin(new TMessage("range", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class rank implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        rank_args args = new rank_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("rank", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        rank_result result = new rank_result();
        result.success = iface_.rank(args.key, args.asc);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("rank", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class bef
