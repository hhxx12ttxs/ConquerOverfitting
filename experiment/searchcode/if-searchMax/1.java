/* =================================================================
Copyright (C) 2009 ADV/web-engineering All rights reserved.

This file is part of Mozart.

Mozart is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Mozart is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see <http://www.gnu.org/licenses/>.

Mozart
http://www.mozartcms.ru
================================================================= */
// -*- java -*-
// File: MValue.java
//
// Created: Mon Dec 11 17:05:44 2001
//
// $Id: MValue.java 1278 2009-08-24 14:02:01Z vic $
// $Name:  $
//

package ru.adv.db.base;

import ru.adv.util.Compare;

/**
 * ?????, ??????????????? ????????, ??????? ????? ????????? ??????? {@link MObject}.
 *
 * @see MAttribute
 * @see MObject
 * @version $Revision: 1.23 $
 */
public class MValue {

	private Object value = null;
	private Object searchValue = null;
	private Object searchMin = null;
	private Object searchMax = null;
	private boolean isMaxIncluded = false;
	private boolean isMinIncluded = false;
	private boolean negative = false;

	/**
	 * ???????????
	 */
	public MValue() {
	}

	/**
	 * copy constructor
	 * @param mValue
	 */
	public MValue(MValue mValue) {
		this.value = mValue.value;
		this.searchValue = mValue.searchValue;
		this.searchMin = mValue.searchMin;
		this.searchMax = mValue.searchMax;
		this.isMaxIncluded = mValue.isMaxIncluded;
		this.isMinIncluded = mValue.isMinIncluded;
		this.negative = mValue.negative;
	}


	/**
	 * ???????????, ???????????? ?????????????? ????????
	 * @see #set(Object)
	 */
	public MValue(Object value) {
		set(value);
	}

	/**
	 * ???????????, ???????????? ?????????????? ????????
	 * @param value ??? ?????? {@link #set(Object)}
	 * @param searchValue ??? ?????? {@link #setSearchValue(Object)}
	 * @see #set(Object)
	 * @see #setSearchValue(Object)
	 */
	public MValue(Object value, Object searchValue) {
		set(value);
		setSearchValue(searchValue);
	}

	/**
	 * Is search value mark as negative?
	 * @return is set negative
	 */
	public boolean isNegative() {
		return negative;
	}

	/**
	 * Mark search value as negative
	 */
	public void setNegative(boolean negative) {
		this.negative = negative;
	}

	/**
	 * ????????????? ???????? ????????.
	 */
	public void set(Object value) {
		this.value = value;
	}

	/**
	 * ??????? ???????? ????????
	 *
	 */
	public Object get() {
		return value;
	}

	/**
	 * ???????? ???????? ????????
	 *
	 */
	public void reset() {
		value = null;
		searchValue = null;
		searchMin = null;
		searchMax = null;
		isMaxIncluded = false;
		isMinIncluded = false;
	}

	/**
	 * ?????????, ???????? ?? ?????? ?? ????????? ????????.
	 *
	 */
	public boolean isSet() {
		return value != null;
	}

	/**
	 * ?????????, ???????? ?? ?????? ???? ???? ????????????? ????????.
	 *
	 */
	public boolean isEmpty() {
		return value == null && searchValue == null && searchMin == null && searchMax == null;
	}

	/**
	 * ???????? ??? ????? {@link #get()} ?????????? {@link Null}
	 *
	 */
	public boolean isNull() {
		return !isSet() || Null.INSTANCE.equals( get() );
	}

	/**
	 * ???????? ??? ????? {@link #getSearchValue()} ?????????? {@link Null}
	 *
	 */
	public boolean isNullSearchValue() {
		return getSearchValue() == null || (getSearchValue() instanceof ru.adv.db.base.Null);
	}

	/**
	 * ????????, ??? ???????? ???????? ???????? ??????.
	 *
	 */
	public boolean isFile() {
		return (value != null && value instanceof FileValue);
	}

	/**
	 * true ???? ???????? ???????? ???????? "???????????"
	 *
	 */
	public boolean isRegion() {
		return (searchMin != null || searchMax != null);
	}

	/**
	 * true ???? ??????????? ???? ???? ????????? ????????
	 *
	 */
	public boolean isSearch() {
		return searchValue != null || (searchValue != null || isRegion());
	}

	/**
	 * ?????????? ???????? ??? ??????
	 */
	public void setSearchValue(Object val) {
		searchValue = val;
	}

	/**
	 * ?????????? ??????????? ????????, ??? ????????
	 */
	public void setSearchMin(Object val) throws DBCastException {
		setSearchMin(val,false);
	}

	/**
	 * ?????????? ??????????? ????????
	 * @throws DBCastException ???? ??????????? ???????? ??????
	 * ????????????? ??? <code>val</code> ?? ?????????
	 * <code>java.lang.Comparable</code>
	 * @param checkRegion
	 */
	public void setSearchMin(Object val, boolean checkRegion) throws DBCastException {
		if (val!=null && checkRegion ) {
			if (!(val instanceof Comparable)) {
				throw new DBCastException("Minimal value must implement Comparable.", val, "minimal");
			}
			if (searchMax != null && Compare.compare(searchMax, val) < 0) {
				throw new DBCastException("Minimal value must be less than maximal.", val, "min-max");
			}
		}
		searchMin = val;
	}


	/**
	 * ?????????? ???????????? ????????, ??? ????????
	 */
	public void setSearchMax(Object val) throws DBCastException {
		setSearchMax(val,false);
	}

	/**
	 * ?????????? ???????????? ????????
	 * @throws DBCastException ???? ???????????? ???????? ??????
	 * ???????????? ??? <code>val</code> ?? ?????????
	 * <code>java.lang.Comparable</code>
	 * @param checkRegion
	 */
	public void setSearchMax(Object val, boolean checkRegion) throws DBCastException {
		if (val!=null && checkRegion) {
			if (!(val instanceof Comparable)) {
				throw new DBCastException("Maximal value must implement Comparable.", val, "maximal");
			}
			if (searchMin != null && Compare.compare(searchMin, val) > 0) {
				throw new DBCastException("Maximal value must be more than minimal.", val, "min-max");
			}
		}
		searchMax = val;
	}

	/**
	 * ???????? ???????? search.
	 */
	public Object getSearchValue() {
		return searchValue;
	}

	/**
	 * ???????? ???????? (getSearchValue()!=null)? getSearchValue() : get();
	 */
	public Object getSearchOrSetValue() {
		return (getSearchValue() != null) ? getSearchValue() : get();
	}

	/**
	 * ???????? ??????????? ????????.
	 */
	public Object getSearchMin() {
		return searchMin;
	}

	/**
	 * ???????? ???????????? ????????.
	 */
	public Object getSearchMax() {
		return searchMax;
	}

	/**
	 * ????????? ??????? ????????? ? "??????????" ????????????
	 * ????????.
	 * @param minIncluded true - ??????????? ???????? ?????? ?
	 * "??????????", false - ???
	 */
	public void setMinIncluded(boolean minIncluded) {
		isMinIncluded = minIncluded;
	}

	/**
	 * ????????? ??????? ????????? ? "??????????" ????????????? ????????.
	 * @param maxIncluded true - ???????????? ???????? ?????? ?
	 * "??????????", false - ???
	 */
	public void setMaxIncluded(boolean maxIncluded) {
		isMaxIncluded = maxIncluded;
	}

	/**
	 * ?????????, ?????? ?? ??????????? ???????? ? ??????????.
	 */
	public boolean isMinIncluded() {
		return isMinIncluded;
	}

	/**
	 * ?????????, ?????? ?? ???????????? ???????? ? ??????????.
	 */
	public boolean isMaxIncluded() {
		return isMaxIncluded;
	}

	/**
	 * Overrides parent toString().
	 */
	public String toString() {
		StringBuffer s = new StringBuffer();
		s.append("MValue[");
		if (value != null) {
			s.append(" value=");
			s.append(value.toString());
		}
		if (searchMin != null) {
			s.append(" min=");
			s.append(searchMin.toString());
		}
		if (searchMax != null) {
			s.append(" max=");
			s.append(searchMax.toString());
		}
		if (searchValue != null) {
			s.append(" searchValue=");
			s.append(searchValue.toString());
		}
		s.append(" ]");
		return s.toString();
	}

	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (!(o instanceof MValue)) {
			return false;
		}

		final MValue mValue = (MValue) o;

		if (isMaxIncluded != mValue.isMaxIncluded) {
			return false;
		}
		if (isMinIncluded != mValue.isMinIncluded) {
			return false;
		}
		if (isNegative() != mValue.isNegative()) {
			return false;
		}
		if (searchMax != null ? !searchMax.equals(mValue.searchMax) : mValue.searchMax != null) {
			return false;
		}
		if (searchMin != null ? !searchMin.equals(mValue.searchMin) : mValue.searchMin != null) {
			return false;
		}
		if (searchValue != null ? !searchValue.equals(mValue.searchValue) : mValue.searchValue != null) {
			return false;
		}
		if (value != null ? !value.equals(mValue.value) : mValue.value != null) {
			return false;
		}

		return true;
	}

	public int hashCode() {
		int result;
		result = (value != null ? value.hashCode() : 0);
		result = 29 * result + (searchValue != null ? searchValue.hashCode() : 0);
		result = 29 * result + (searchMin != null ? searchMin.hashCode() : 0);
		result = 29 * result + (searchMax != null ? searchMax.hashCode() : 0);
		result = 29 * result + (isMaxIncluded ? 1 : 0);
		result = 29 * result + (isMinIncluded ? 1 : 0);
		result = 29 * result + (isNegative() ? 1 : 0);
		return result;
	}
}

