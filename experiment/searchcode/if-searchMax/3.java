/* =================================================================
Copyright (C) 2009 ADV/web-engineering All rights reserved.

This file is part of Mozart.

Mozart is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Mozart is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see <http://www.gnu.org/licenses/>.

Mozart
http://www.mozartcms.ru
================================================================= */
// -*- java -*-
// $Id: MAttribute.java 1274 2009-08-24 07:57:17Z vic $
// $Name:  $

package ru.adv.db.base;

import java.sql.ResultSet;
import java.sql.SQLException;

import ru.adv.db.config.ObjectAttr;
import ru.adv.db.filter.FilterCollection;
import ru.adv.db.filter.FilterException;
import ru.adv.db.filter.FilterSet;

/**
 * ?????????? ???????? ??? ?????? {@link MObject}.
 *
 * @see MValue
 * @see MObject
 * @version $Revision: 1.46 $
 */
public class MAttribute implements Comparable<MAttribute>{

	private transient ObjectAttr config;
	private MValue mValue;
	private transient MObject mObject;

	/**
	 * ??????????, ???????????, ?????????? ? MObject
	 */
	protected MAttribute(MObject owner, ObjectAttr objAttr) {
		config = objAttr;
		mObject = owner;
	}

	/**
	 * ?????????? ??? ????????
	 *
	 */
	public String getName() {
		return config.getName();
	}

	@Override
	public int compareTo(MAttribute o) {
		return getName().compareTo(o.getName());
	}

	public boolean isReadOnly() {
		return config.isReadonly();
	}
	
	/**
	 * Checked default value
	 * @return
	 */
	public Object getDefaulValue() {
		return config.getDefaultDbValue();
	}

	/**
	 * Get parent MObject
	 * @return
	 */
	public MObject getMObject() {
		return mObject;
	}

	/**
	 * ??????????? ???????? ????????
	 */
	public boolean isDefined() {
		return mValue != null;
	}

	/**
	 * ??????????? ?? ????????? ???????? ????????
	 */
	public boolean isSet() {
		return isDefined() && mValue.isSet();
	}

	/**
	 * ??????????? ????????? ???????? ???????? ??? ???????? Null
	 */
	public boolean isUniqueSearch() {
		return isDefined() && !mValue.isNull() && !mValue.isNullSearchValue();
	}

	/**
	 * ??????????? ????????? ? ?? ????????? ???????? ????????
	 */
	public boolean isSetAndSearch() {
		return isDefined() && mValue.isSearch() && mValue.isSet();
	}

	/**
	 * ??????????? ????????? !isRegion() ????????
	 */
	public boolean isSearchNotRegion() {
		return isDefined() && mValue.isSearch() && !mValue.isRegion();
	}

	/**
	 * ?????????? ??????????????? ????????? ?? ru.adv.db.adapter.Types
	 * @see ru.adv.db.adapter.DBAdapter
	 */
	public String getDBT() {
		return config.getDBT();
	}

	/**
	 * ?????????? ??????????????? ????????? ?? ru.adv.db.adapter.Types
	 * @see ru.adv.db.adapter.DBAdapter
	 */
	public int getType() {
		return config.getType();
	}

	/**
	 * ?????????? ???????? ????????, ? ??????????? input ????????
	 *
	 */
	public void setValue(MValue value) throws DBCastException, FilterException {
		try {
			FilterSet fs = mObject.getFilterSet();

			if (fs != null) {
				FilterCollection fc = fs.getInputFilterCollection(getName());
				if (fc != null) {
                    value = performFilters(fc, value);
				}
			}
			setDBValue(value);
		}
		catch (DBCastException e) {
			e.setObject(getMObject().getName());
			e.setAttribute(getName());
			throw e;
		}
		catch (FilterException e) {
            e.setObject(getMObject().getName());
            e.setAttribute(getName());
			throw e;
		}
	}

	/**
	 * ??????? ???????? ????????, ? ??????????? output ????????
	 *
	 */
	public MValue getValue() throws FilterException, DBCastException {
		// ????? ?????? ?????????? output ??????? ?? ????????? ????????
		// ??????? ??? ?? ??????????? ? ???????
		try {
			if (getDBValue() == null) {
				return null;
			}
			FilterSet fs = mObject.getFilterSet();
			if (fs != null) {
				FilterCollection fc = fs.getOutputFilterCollection(getName());
				if (fc != null) {
                    MValue v = performFilters(fc, getDBValue());
                    return v;
				}
			}
		}
		catch (FilterException e) {
            e.setObject(getMObject().getName());
            e.setAttribute(getName());
			throw e;
		}

		return getDBValue();
	}

	private MValue performFilters(FilterCollection fc, MValue value) throws FilterException, DBCastException {
		MValue newValue = new MValue(fc.perform(value.get()));
		Object searchValue = value.getSearchValue();
		newValue.setSearchValue(searchValue == null ? searchValue : fc.perform(searchValue));
		Object searchMax = value.getSearchMax();
		newValue.setSearchMax(searchMax == null ? searchMax : fc.perform(searchMax), true);
		Object searchMin = value.getSearchMin();
		newValue.setSearchMin(searchMin == null ? searchMin : fc.perform(searchMin), true);
		newValue.setMaxIncluded(value.isMaxIncluded());
		newValue.setMinIncluded(value.isMinIncluded());
		return newValue;
	}

	/**
	 * ?????????? ???????? ????????, ??? ?????????? input ????????
	 */
	public void setDBValue(MValue value) throws DBCastException {
		DBValue val = createDBValue(checkAndConvertToNull(value.get()));
		value.set(val.get());
		/*if (((Object) value.getSearchValue())==null) {
			value.setSearchValue(value.get());
		}*/
        DBValue searchVal = createDBValue(value.getSearchValue());
		value.setSearchValue(checkAndConvertToNull(searchVal.get()));
		mValue = value;
	}

	private Object checkAndConvertToNull(Object val) {
		if (val != null && isNullable() && val.toString().length() == 0 && !(val instanceof Null)) {
			val = Null.INSTANCE;
		}
		return val;
	}

	/**
	 * ??????? ???????? ????????, ??? ?????????? output ????????
	 *
	 */
	public MValue getDBValue() {
		return mValue;
	}

	/**
	 * ???????? ???????? ????????
	 */
	public void resetValue() {
		mValue = null;
	}

	/**
	 * ??????? ???????? ??????? ?? ?????? ??????.
	 */
	public boolean isForeign() {
		// see ru.adv.db.config.ObjectAttr objAttr
		return config.isForeign();
	}

	/**
	 * ?? ??????? ??????????? ?????????? ?? ??????? ???????? ? ??????????????
	 * ????????, ???????? ?????? ? ????? STRING
	 */
	public boolean isDefaultSortIgnoreCase() {
		return config.isDefaultSortIgnoreCase();
	}

	/**
	 * ???????? ???????? ?????? ?????????????? ? ???? <code>DOM Element</code>.
	 *
	 */
	public boolean isTagLayout() {
		return config.isTagLayout();
	}

	/**
	 * ??????? ??? ???????, ?? ??????? ????????? ???????
	 *
	 */
	public String getForeignObjectName() {
		// see ru.adv.db.config.ObjectAttr objAttr
		return config.getForeignObjectName();
	}

	/**
	 * ??????? ???????? ???????????? ??? ?????????? ???????
	 */
	public boolean isRequired() {
		// see ru.adv.db.config.ObjectAttr objAttr
		return config.isRequired();
	}

	/**
	 * Attribute has default value by configuration
	 * @return
	 */
	public boolean isHasDefaultValue() {
		return config.getDefaultDbValue() != null;
	}


	/**
	 * ??????? is nullable
	 */
	public boolean isNullable() {
		// see ru.adv.db.config.ObjectAttr objAttr
		return config.isNullable();
	}

	/**
	 * ??????? DBT_FILE
	 */
	public boolean isFile() {
		// see ru.adv.db.config.ObjectAttr objAttr
		return config.isFile();
	}


	/**
	 * ??????? ???????? ????? ?? ?????? ?????????? ????????????? ???????
	 */
	public boolean isVid() {
		// see ru.adv.db.config.ObjectAttr objAttr
		return config.isVid();
	}
	
	public boolean isInline(){
		return config.isInline(); 
	}

	public String toString() {
		return getClass().getName() + '@' + getName();
	}

    public boolean isString() {
        return config.isString();
    }

    public boolean isBoolean() {
        return config.isBoolean();
    }

    public DBValue createDBValue(Object content) throws DBCastException {
        return config.createDBValue(content);
    }

    public DBValue createDBValue(ResultSet rs, int position) throws DBCastException, SQLException {
        return config.createDBValue(rs, position);
    }

	public String getMIME() {
		return config.getMIME();
	}

    public String getAttrStoragePath() {
        return config.getAttrStoragePath();
    }
}

