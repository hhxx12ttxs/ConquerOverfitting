/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCreateTableParams implements org.apache.thrift.TBase<TCreateTableParams, TCreateTableParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreateTableParams");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_columns", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("file_format", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_EXTERNAL_FIELD_DESC = new org.apache.thrift.protocol.TField("is_external", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IF_NOT_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_not_exists", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ROW_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_format", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCreateTableParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCreateTableParamsTupleSchemeFactory());
  }

  public TTableName table_name; // required
  public List<TColumnDef> columns; // required
  public List<TColumnDef> partition_columns; // optional
  /**
   * 
   * @see TFileFormat
   */
  public TFileFormat file_format; // required
  public boolean is_external; // required
  public boolean if_not_exists; // required
  public String owner; // required
  public TTableRowFormat row_format; // optional
  public String comment; // optional
  public String location; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    COLUMNS((short)2, "columns"),
    PARTITION_COLUMNS((short)3, "partition_columns"),
    /**
     * 
     * @see TFileFormat
     */
    FILE_FORMAT((short)4, "file_format"),
    IS_EXTERNAL((short)5, "is_external"),
    IF_NOT_EXISTS((short)6, "if_not_exists"),
    OWNER((short)7, "owner"),
    ROW_FORMAT((short)8, "row_format"),
    COMMENT((short)9, "comment"),
    LOCATION((short)10, "location");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // COLUMNS
          return COLUMNS;
        case 3: // PARTITION_COLUMNS
          return PARTITION_COLUMNS;
        case 4: // FILE_FORMAT
          return FILE_FORMAT;
        case 5: // IS_EXTERNAL
          return IS_EXTERNAL;
        case 6: // IF_NOT_EXISTS
          return IF_NOT_EXISTS;
        case 7: // OWNER
          return OWNER;
        case 8: // ROW_FORMAT
          return ROW_FORMAT;
        case 9: // COMMENT
          return COMMENT;
        case 10: // LOCATION
          return LOCATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_EXTERNAL_ISSET_ID = 0;
  private static final int __IF_NOT_EXISTS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PARTITION_COLUMNS,_Fields.ROW_FORMAT,_Fields.COMMENT,_Fields.LOCATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableName.class)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumnDef.class))));
    tmpMap.put(_Fields.PARTITION_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("partition_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumnDef.class))));
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("file_format", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFileFormat.class)));
    tmpMap.put(_Fields.IS_EXTERNAL, new org.apache.thrift.meta_data.FieldMetaData("is_external", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IF_NOT_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_not_exists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("row_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableRowFormat.class)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreateTableParams.class, metaDataMap);
  }

  public TCreateTableParams() {
  }

  public TCreateTableParams(
    TTableName table_name,
    List<TColumnDef> columns,
    TFileFormat file_format,
    boolean is_external,
    boolean if_not_exists,
    String owner)
  {
    this();
    this.table_name = table_name;
    this.columns = columns;
    this.file_format = file_format;
    this.is_external = is_external;
    setIs_externalIsSet(true);
    this.if_not_exists = if_not_exists;
    setIf_not_existsIsSet(true);
    this.owner = owner;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreateTableParams(TCreateTableParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_name()) {
      this.table_name = new TTableName(other.table_name);
    }
    if (other.isSetColumns()) {
      List<TColumnDef> __this__columns = new ArrayList<TColumnDef>();
      for (TColumnDef other_element : other.columns) {
        __this__columns.add(new TColumnDef(other_element));
      }
      this.columns = __this__columns;
    }
    if (other.isSetPartition_columns()) {
      List<TColumnDef> __this__partition_columns = new ArrayList<TColumnDef>();
      for (TColumnDef other_element : other.partition_columns) {
        __this__partition_columns.add(new TColumnDef(other_element));
      }
      this.partition_columns = __this__partition_columns;
    }
    if (other.isSetFile_format()) {
      this.file_format = other.file_format;
    }
    this.is_external = other.is_external;
    this.if_not_exists = other.if_not_exists;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetRow_format()) {
      this.row_format = new TTableRowFormat(other.row_format);
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
  }

  public TCreateTableParams deepCopy() {
    return new TCreateTableParams(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    this.columns = null;
    this.partition_columns = null;
    this.file_format = null;
    setIs_externalIsSet(false);
    this.is_external = false;
    setIf_not_existsIsSet(false);
    this.if_not_exists = false;
    this.owner = null;
    this.row_format = null;
    this.comment = null;
    this.location = null;
  }

  public TTableName getTable_name() {
    return this.table_name;
  }

  public TCreateTableParams setTable_name(TTableName table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public java.util.Iterator<TColumnDef> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(TColumnDef elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<TColumnDef>();
    }
    this.columns.add(elem);
  }

  public List<TColumnDef> getColumns() {
    return this.columns;
  }

  public TCreateTableParams setColumns(List<TColumnDef> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public int getPartition_columnsSize() {
    return (this.partition_columns == null) ? 0 : this.partition_columns.size();
  }

  public java.util.Iterator<TColumnDef> getPartition_columnsIterator() {
    return (this.partition_columns == null) ? null : this.partition_columns.iterator();
  }

  public void addToPartition_columns(TColumnDef elem) {
    if (this.partition_columns == null) {
      this.partition_columns = new ArrayList<TColumnDef>();
    }
    this.partition_columns.add(elem);
  }

  public List<TColumnDef> getPartition_columns() {
    return this.partition_columns;
  }

  public TCreateTableParams setPartition_columns(List<TColumnDef> partition_columns) {
    this.partition_columns = partition_columns;
    return this;
  }

  public void unsetPartition_columns() {
    this.partition_columns = null;
  }

  /** Returns true if field partition_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_columns() {
    return this.partition_columns != null;
  }

  public void setPartition_columnsIsSet(boolean value) {
    if (!value) {
      this.partition_columns = null;
    }
  }

  /**
   * 
   * @see TFileFormat
   */
  public TFileFormat getFile_format() {
    return this.file_format;
  }

  /**
   * 
   * @see TFileFormat
   */
  public TCreateTableParams setFile_format(TFileFormat file_format) {
    this.file_format = file_format;
    return this;
  }

  public void unsetFile_format() {
    this.file_format = null;
  }

  /** Returns true if field file_format is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_format() {
    return this.file_format != null;
  }

  public void setFile_formatIsSet(boolean value) {
    if (!value) {
      this.file_format = null;
    }
  }

  public boolean isIs_external() {
    return this.is_external;
  }

  public TCreateTableParams setIs_external(boolean is_external) {
    this.is_external = is_external;
    setIs_externalIsSet(true);
    return this;
  }

  public void unsetIs_external() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_EXTERNAL_ISSET_ID);
  }

  /** Returns true if field is_external is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_external() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_EXTERNAL_ISSET_ID);
  }

  public void setIs_externalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_EXTERNAL_ISSET_ID, value);
  }

  public boolean isIf_not_exists() {
    return this.if_not_exists;
  }

  public TCreateTableParams setIf_not_exists(boolean if_not_exists) {
    this.if_not_exists = if_not_exists;
    setIf_not_existsIsSet(true);
    return this;
  }

  public void unsetIf_not_exists() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID);
  }

  /** Returns true if field if_not_exists is set (has been assigned a value) and false otherwise */
  public boolean isSetIf_not_exists() {
    return EncodingUtils.testBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID);
  }

  public void setIf_not_existsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID, value);
  }

  public String getOwner() {
    return this.owner;
  }

  public TCreateTableParams setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public TTableRowFormat getRow_format() {
    return this.row_format;
  }

  public TCreateTableParams setRow_format(TTableRowFormat row_format) {
    this.row_format = row_format;
    return this;
  }

  public void unsetRow_format() {
    this.row_format = null;
  }

  /** Returns true if field row_format is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_format() {
    return this.row_format != null;
  }

  public void setRow_formatIsSet(boolean value) {
    if (!value) {
      this.row_format = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public TCreateTableParams setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public TCreateTableParams setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((TTableName)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<TColumnDef>)value);
      }
      break;

    case PARTITION_COLUMNS:
      if (value == null) {
        unsetPartition_columns();
      } else {
        setPartition_columns((List<TColumnDef>)value);
      }
      break;

    case FILE_FORMAT:
      if (value == null) {
        unsetFile_format();
      } else {
        setFile_format((TFileFormat)value);
      }
      break;

    case IS_EXTERNAL:
      if (value == null) {
        unsetIs_external();
      } else {
        setIs_external((Boolean)value);
      }
      break;

    case IF_NOT_EXISTS:
      if (value == null) {
        unsetIf_not_exists();
      } else {
        setIf_not_exists((Boolean)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case ROW_FORMAT:
      if (value == null) {
        unsetRow_format();
      } else {
        setRow_format((TTableRowFormat)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTable_name();

    case COLUMNS:
      return getColumns();

    case PARTITION_COLUMNS:
      return getPartition_columns();

    case FILE_FORMAT:
      return getFile_format();

    case IS_EXTERNAL:
      return Boolean.valueOf(isIs_external());

    case IF_NOT_EXISTS:
      return Boolean.valueOf(isIf_not_exists());

    case OWNER:
      return getOwner();

    case ROW_FORMAT:
      return getRow_format();

    case COMMENT:
      return getComment();

    case LOCATION:
      return getLocation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTable_name();
    case COLUMNS:
      return isSetColumns();
    case PARTITION_COLUMNS:
      return isSetPartition_columns();
    case FILE_FORMAT:
      return isSetFile_format();
    case IS_EXTERNAL:
      return isSetIs_external();
    case IF_NOT_EXISTS:
      return isSetIf_not_exists();
    case OWNER:
      return isSetOwner();
    case ROW_FORMAT:
      return isSetRow_format();
    case COMMENT:
      return isSetComment();
    case LOCATION:
      return isSetLocation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCreateTableParams)
      return this.equals((TCreateTableParams)that);
    return false;
  }

  public boolean equals(TCreateTableParams that) {
    if (that == null)
      return false;

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_partition_columns = true && this.isSetPartition_columns();
    boolean that_present_partition_columns = true && that.isSetPartition_columns();
    if (this_present_partition_columns || that_present_partition_columns) {
      if (!(this_present_partition_columns && that_present_partition_columns))
        return false;
      if (!this.partition_columns.equals(that.partition_columns))
        return false;
    }

    boolean this_present_file_format = true && this.isSetFile_format();
    boolean that_present_file_format = true && that.isSetFile_format();
    if (this_present_file_format || that_present_file_format) {
      if (!(this_present_file_format && that_present_file_format))
        return false;
      if (!this.file_format.equals(that.file_format))
        return false;
    }

    boolean this_present_is_external = true;
    boolean that_present_is_external = true;
    if (this_present_is_external || that_present_is_external) {
      if (!(this_present_is_external && that_present_is_external))
        return false;
      if (this.is_external != that.is_external)
        return false;
    }

    boolean this_present_if_not_exists = true;
    boolean that_present_if_not_exists = true;
    if (this_present_if_not_exists || that_present_if_not_exists) {
      if (!(this_present_if_not_exists && that_present_if_not_exists))
        return false;
      if (this.if_not_exists != that.if_not_exists)
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_row_format = true && this.isSetRow_format();
    boolean that_present_row_format = true && that.isSetRow_format();
    if (this_present_row_format || that_present_row_format) {
      if (!(this_present_row_format && that_present_row_format))
        return false;
      if (!this.row_format.equals(that.row_format))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TCreateTableParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCreateTableParams typedOther = (TCreateTableParams)other;

    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_columns()).compareTo(typedOther.isSetPartition_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_columns, typedOther.partition_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_format()).compareTo(typedOther.isSetFile_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_format, typedOther.file_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_external()).compareTo(typedOther.isSetIs_external());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_external()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_external, typedOther.is_external);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIf_not_exists()).compareTo(typedOther.isSetIf_not_exists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIf_not_exists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_not_exists, typedOther.if_not_exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRow_format()).compareTo(typedOther.isSetRow_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_format, typedOther.row_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCreateTableParams(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    if (isSetPartition_columns()) {
      if (!first) sb.append(", ");
      sb.append("partition_columns:");
      if (this.partition_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_columns);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("file_format:");
    if (this.file_format == null) {
      sb.append("null");
    } else {
      sb.append(this.file_format);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_external:");
    sb.append(this.is_external);
    first = false;
    if (!first) sb.append(", ");
    sb.append("if_not_exists:");
    sb.append(this.if_not_exists);
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (isSetRow_format()) {
      if (!first) sb.append(", ");
      sb.append("row_format:");
      if (this.row_format == null) {
        sb.append("null");
      } else {
        sb.append(this.row_format);
      }
      first = false;
    }
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (table_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' was not present! Struct: " + toString());
    }
    if (columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
    }
    if (file_format == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_format' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_external' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'if_not_exists' because it's a primitive and you chose the non-beans generator.
    if (owner == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'owner' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
    if (row_format != null) {
      row_format.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreateTableParamsStandardSchemeFactory implements SchemeFactory {
    public TCreateTableParamsStandardScheme getScheme() {
      return new TCreateTableParamsStandardScheme();
    }
  }

  private static class TCreateTableParamsStandardScheme extends StandardScheme<TCreateTableParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCreateTableParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.columns = new ArrayList<TColumnDef>(_list64.size);
                for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                {
                  TColumnDef _elem66; // required
                  _elem66 = new TColumnDef();
                  _elem66.read(iprot);
                  struct.columns.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.partition_columns = new ArrayList<TColumnDef>(_list67.size);
                for (int _i68 = 0; _i68 < _list67.size; ++_i68)
                {
                  TColumnDef _elem69; // required
                  _elem69 = new TColumnDef();
                  _elem69.read(iprot);
                  struct.partition_columns.add(_elem69);
                }
                iprot.readListEnd();
              }
              struct.setPartition_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_format = TFileFormat.findByValue(iprot.readI32());
              struct.setFile_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_EXTERNAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_external = iprot.readBool();
              struct.setIs_externalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IF_NOT_EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.if_not_exists = iprot.readBool();
              struct.setIf_not_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROW_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.row_format = new TTableRowFormat();
              struct.row_format.read(iprot);
              struct.setRow_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIs_external()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_external' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIf_not_exists()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'if_not_exists' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCreateTableParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.columns != null) {
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
          for (TColumnDef _iter70 : struct.columns)
          {
            _iter70.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.partition_columns != null) {
        if (struct.isSetPartition_columns()) {
          oprot.writeFieldBegin(PARTITION_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_columns.size()));
            for (TColumnDef _iter71 : struct.partition_columns)
            {
              _iter71.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_format != null) {
        oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
        oprot.writeI32(struct.file_format.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_EXTERNAL_FIELD_DESC);
      oprot.writeBool(struct.is_external);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IF_NOT_EXISTS_FIELD_DESC);
      oprot.writeBool(struct.if_not_exists);
      oprot.writeFieldEnd();
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.row_format != null) {
        if (struct.isSetRow_format()) {
          oprot.writeFieldBegin(ROW_FORMAT_FIELD_DESC);
          struct.row_format.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreateTableParamsTupleSchemeFactory implements SchemeFactory {
    public TCreateTableParamsTupleScheme getScheme() {
      return new TCreateTableParamsTupleScheme();
    }
  }

  private static class TCreateTableParamsTupleScheme extends TupleScheme<TCreateTableParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCreateTableParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.table_name.write(oprot);
      {
        oprot.writeI32(struct.columns.size());
        for (TColumnDef _iter72 : struct.columns)
        {
          _iter72.write(oprot);
        }
      }
      oprot.writeI32(struct.file_format.getValue());
      oprot.writeBool(struct.is_external);
      oprot.writeBool(struct.if_not_exists);
      oprot.writeString(struct.owner);
      BitSet optionals = new BitSet();
      if (struct.isSetPartition_columns()) {
        optionals.set(0);
      }
      if (struct.isSetRow_format()) {
        optionals.set(1);
      }
      if (struct.isSetComment()) {
        optionals.set(2);
      }
      if (struct.isSetLocation()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPartition_columns()) {
        {
          oprot.writeI32(struct.partition_columns.size());
          for (TColumnDef _iter73 : struct.partition_columns)
          {
            _iter73.write(oprot);
          }
        }
      }
      if (struct.isSetRow_format()) {
        struct.row_format.write(oprot);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCreateTableParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.table_name = new TTableName();
      struct.table_name.read(iprot);
      struct.setTable_nameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.columns = new ArrayList<TColumnDef>(_list74.size);
        for (int _i75 = 0; _i75 < _list74.size; ++_i75)
        {
          TColumnDef _elem76; // required
          _elem76 = new TColumnDef();
          _elem76.read(iprot);
          struct.columns.add(_elem76);
        }
      }
      struct.setColumnsIsSet(true);
      struct.file_format = TFileFormat.findByValue(iprot.readI32());
      struct.setFile_formatIsSet(true);
      struct.is_external = iprot.readBool();
      struct.setIs_externalIsSet(true);
      struct.if_not_exists = iprot.readBool();
      struct.setIf_not_existsIsSet(true);
      struct.owner = iprot.readString();
      struct.setOwnerIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partition_columns = new ArrayList<TColumnDef>(_list77.size);
          for (int _i78 = 0; _i78 < _list77.size; ++_i78)
          {
            TColumnDef _elem79; // required
            _elem79 = new TColumnDef();
            _elem79.read(iprot);
            struct.partition_columns.add(_elem79);
          }
        }
        struct.setPartition_columnsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.row_format = new TTableRowFormat();
        struct.row_format.read(iprot);
        struct.setRow_formatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
    }
  }

}


