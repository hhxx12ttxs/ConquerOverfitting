/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAlterTableAddReplaceColsParams implements org.apache.thrift.TBase<TAlterTableAddReplaceColsParams, TAlterTableAddReplaceColsParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlterTableAddReplaceColsParams");

  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField REPLACE_EXISTING_COLS_FIELD_DESC = new org.apache.thrift.protocol.TField("replace_existing_cols", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAlterTableAddReplaceColsParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAlterTableAddReplaceColsParamsTupleSchemeFactory());
  }

  public List<TColumnDef> columns; // required
  public boolean replace_existing_cols; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMNS((short)1, "columns"),
    REPLACE_EXISTING_COLS((short)2, "replace_existing_cols");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMNS
          return COLUMNS;
        case 2: // REPLACE_EXISTING_COLS
          return REPLACE_EXISTING_COLS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPLACE_EXISTING_COLS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumnDef.class))));
    tmpMap.put(_Fields.REPLACE_EXISTING_COLS, new org.apache.thrift.meta_data.FieldMetaData("replace_existing_cols", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlterTableAddReplaceColsParams.class, metaDataMap);
  }

  public TAlterTableAddReplaceColsParams() {
  }

  public TAlterTableAddReplaceColsParams(
    List<TColumnDef> columns,
    boolean replace_existing_cols)
  {
    this();
    this.columns = columns;
    this.replace_existing_cols = replace_existing_cols;
    setReplace_existing_colsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlterTableAddReplaceColsParams(TAlterTableAddReplaceColsParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumns()) {
      List<TColumnDef> __this__columns = new ArrayList<TColumnDef>();
      for (TColumnDef other_element : other.columns) {
        __this__columns.add(new TColumnDef(other_element));
      }
      this.columns = __this__columns;
    }
    this.replace_existing_cols = other.replace_existing_cols;
  }

  public TAlterTableAddReplaceColsParams deepCopy() {
    return new TAlterTableAddReplaceColsParams(this);
  }

  @Override
  public void clear() {
    this.columns = null;
    setReplace_existing_colsIsSet(false);
    this.replace_existing_cols = false;
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public java.util.Iterator<TColumnDef> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(TColumnDef elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<TColumnDef>();
    }
    this.columns.add(elem);
  }

  public List<TColumnDef> getColumns() {
    return this.columns;
  }

  public TAlterTableAddReplaceColsParams setColumns(List<TColumnDef> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public boolean isReplace_existing_cols() {
    return this.replace_existing_cols;
  }

  public TAlterTableAddReplaceColsParams setReplace_existing_cols(boolean replace_existing_cols) {
    this.replace_existing_cols = replace_existing_cols;
    setReplace_existing_colsIsSet(true);
    return this;
  }

  public void unsetReplace_existing_cols() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLACE_EXISTING_COLS_ISSET_ID);
  }

  /** Returns true if field replace_existing_cols is set (has been assigned a value) and false otherwise */
  public boolean isSetReplace_existing_cols() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLACE_EXISTING_COLS_ISSET_ID);
  }

  public void setReplace_existing_colsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLACE_EXISTING_COLS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<TColumnDef>)value);
      }
      break;

    case REPLACE_EXISTING_COLS:
      if (value == null) {
        unsetReplace_existing_cols();
      } else {
        setReplace_existing_cols((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMNS:
      return getColumns();

    case REPLACE_EXISTING_COLS:
      return Boolean.valueOf(isReplace_existing_cols());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLUMNS:
      return isSetColumns();
    case REPLACE_EXISTING_COLS:
      return isSetReplace_existing_cols();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAlterTableAddReplaceColsParams)
      return this.equals((TAlterTableAddReplaceColsParams)that);
    return false;
  }

  public boolean equals(TAlterTableAddReplaceColsParams that) {
    if (that == null)
      return false;

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_replace_existing_cols = true;
    boolean that_present_replace_existing_cols = true;
    if (this_present_replace_existing_cols || that_present_replace_existing_cols) {
      if (!(this_present_replace_existing_cols && that_present_replace_existing_cols))
        return false;
      if (this.replace_existing_cols != that.replace_existing_cols)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TAlterTableAddReplaceColsParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TAlterTableAddReplaceColsParams typedOther = (TAlterTableAddReplaceColsParams)other;

    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplace_existing_cols()).compareTo(typedOther.isSetReplace_existing_cols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplace_existing_cols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replace_existing_cols, typedOther.replace_existing_cols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAlterTableAddReplaceColsParams(");
    boolean first = true;

    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replace_existing_cols:");
    sb.append(this.replace_existing_cols);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'replace_existing_cols' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlterTableAddReplaceColsParamsStandardSchemeFactory implements SchemeFactory {
    public TAlterTableAddReplaceColsParamsStandardScheme getScheme() {
      return new TAlterTableAddReplaceColsParamsStandardScheme();
    }
  }

  private static class TAlterTableAddReplaceColsParamsStandardScheme extends StandardScheme<TAlterTableAddReplaceColsParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlterTableAddReplaceColsParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.columns = new ArrayList<TColumnDef>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  TColumnDef _elem26; // required
                  _elem26 = new TColumnDef();
                  _elem26.read(iprot);
                  struct.columns.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPLACE_EXISTING_COLS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.replace_existing_cols = iprot.readBool();
              struct.setReplace_existing_colsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetReplace_existing_cols()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'replace_existing_cols' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlterTableAddReplaceColsParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columns != null) {
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
          for (TColumnDef _iter27 : struct.columns)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPLACE_EXISTING_COLS_FIELD_DESC);
      oprot.writeBool(struct.replace_existing_cols);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlterTableAddReplaceColsParamsTupleSchemeFactory implements SchemeFactory {
    public TAlterTableAddReplaceColsParamsTupleScheme getScheme() {
      return new TAlterTableAddReplaceColsParamsTupleScheme();
    }
  }

  private static class TAlterTableAddReplaceColsParamsTupleScheme extends TupleScheme<TAlterTableAddReplaceColsParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlterTableAddReplaceColsParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.columns.size());
        for (TColumnDef _iter28 : struct.columns)
        {
          _iter28.write(oprot);
        }
      }
      oprot.writeBool(struct.replace_existing_cols);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlterTableAddReplaceColsParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.columns = new ArrayList<TColumnDef>(_list29.size);
        for (int _i30 = 0; _i30 < _list29.size; ++_i30)
        {
          TColumnDef _elem31; // required
          _elem31 = new TColumnDef();
          _elem31.read(iprot);
          struct.columns.add(_elem31);
        }
      }
      struct.setColumnsIsSet(true);
      struct.replace_existing_cols = iprot.readBool();
      struct.setReplace_existing_colsIsSet(true);
    }
  }

}


