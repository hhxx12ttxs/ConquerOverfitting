/* Generated By:JavaCC: Do not edit this line. RTFParserTokenManager.java */
package com.etranslate.tm.processing.rtf;
public class RTFParserTokenManager implements RTFParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffe06L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 92:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_3(0xffe04L);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 13:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 39:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 42:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 45:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 58:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 92:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 95:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 123:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 124:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 125:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 126:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0xffffffffffffd9feL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(2);
                  break;
               case 1:
                  if ((0xfc00fffeffffd9feL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xd0000001e8000001L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(2);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 92:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_2(0xe3004L);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 13:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 39:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 92:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 123:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 125:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x7e0000007eL & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4700b80000000L) != 0L)
            return 0;
         if ((active0 & 0xfffb8ff460000000L) != 0L || (active1 & 0x7fL) != 0L)
         {
            jjmatchedKind = 71;
            return 0;
         }
         return -1;
      case 1:
         if ((active0 & 0x6500000000L) != 0L)
            return 0;
         if ((active0 & 0xffffff9860000000L) != 0L || (active1 & 0x7fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 0;
         }
         return -1;
      case 2:
         if ((active0 & 0x18001c020000000L) != 0L || (active1 & 0x40L) != 0L)
            return 0;
         if ((active0 & 0xfe7ffe1840000000L) != 0L || (active1 & 0x3fL) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
            return 0;
         }
         return -1;
      case 3:
         if ((active0 & 0x2008e0040000000L) != 0L)
            return 0;
         if ((active0 & 0xfc7f701800000000L) != 0L || (active1 & 0x3fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 3;
            }
            return 0;
         }
         return -1;
      case 4:
         if ((active0 & 0x1000000000L) != 0L)
            return 0;
         if ((active0 & 0xfc7f740800000000L) != 0L || (active1 & 0x3fL) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
            return 0;
         }
         return -1;
      case 5:
         if ((active0 & 0x8c03400000000000L) != 0L || (active1 & 0x3L) != 0L)
            return 0;
         if ((active0 & 0x707c340800000000L) != 0L || (active1 & 0x3cL) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
            return 0;
         }
         return -1;
      case 6:
         if ((active0 & 0x7004040000000000L) != 0L || (active1 & 0xcL) != 0L)
            return 0;
         if ((active0 & 0x78300800000000L) != 0L || (active1 & 0x30L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
            return 0;
         }
         return -1;
      case 7:
         if ((active0 & 0x18300800000000L) != 0L)
            return 0;
         if ((active0 & 0x60000000000000L) != 0L || (active1 & 0x30L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
            return 0;
         }
         return -1;
      case 8:
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x30L) != 0L)
            return 0;
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
            return 0;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 0:
         return jjStopAtPos(0, 28);
      case 9:
         return jjStopAtPos(0, 27);
      case 10:
         return jjStopAtPos(0, 25);
      case 13:
         return jjStopAtPos(0, 26);
      case 32:
         return jjStopAtPos(0, 24);
      case 92:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_1(0xe3004L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x60000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x8000000000000000L, 0x40L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x8000400000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x80000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x3c00000000000000L, 0x0L);
      case 102:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_1(0x4700800000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x800000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x20000040000000L, 0x15L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x8000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x12007020000000L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_1(0x4000000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x1010000000000L, 0x2aL);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x40000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x80000000000000L, 0x0L);
      case 117:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_1(0x100000000L, 0x0L);
      case 122:
         return jjMoveStringLiteralDfa1_1(0x300000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 13:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 39:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 92:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x80008020000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(1, 32, 0);
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x4800000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x30L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x1080000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000040000000L, active1, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x5400000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x2812860000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0xc000000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x3L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x300000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(1, 34, 0);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x40010000000000L, active1, 0xcL);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x300000000000000L, active1, 0L);
      case 123:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 125:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 38, 0);
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000L, active1, 0L);
      case 98:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 55, 0);
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x30L);
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 39, 0);
         break;
      case 100:
         return jjMoveStringLiteralDfa3_1(active0, 0xc00000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 40, 0);
         return jjMoveStringLiteralDfa3_1(active0, 0x880000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000000L, active1, 0L);
      case 106:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 56, 0);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x8008000000000000L, active1, 0x8L);
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(2, 70, 0);
         return jjMoveStringLiteralDfa3_1(active0, 0x204000040000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x300000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(2, 29, 0);
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x7030060000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x3L);
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0xc00000800000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(3, 30, 0);
         return jjMoveStringLiteralDfa4_1(active0, 0x12000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 43, 0);
         break;
      case 105:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x41000000000L, active1, 0L);
      case 106:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 57, 0);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x8040000000000000L, active1, 0x30L);
      case 109:
         return jjMoveStringLiteralDfa4_1(active0, 0x300000000000L, active1, 0xcL);
      case 111:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 47, 0);
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000L, active1, 0x3L);
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x7000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x25000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x7000000000000000L, active1, 0xcL);
      case 98:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x10040000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_1(active0, 0x8040000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x400000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 36, 0);
         break;
      case 113:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x30L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000800000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_1(active0, 0xc00000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_1(active0, 0x24100000000000L, active1, 0x3L);
      case 120:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x7000000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(5, 64, 0);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(5, 65, 0);
         return jjMoveStringLiteralDfa6_1(active0, 0x100000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 58, 0);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 59, 0);
         break;
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 48, 0);
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0xcL);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 46, 0);
         return jjMoveStringLiteralDfa6_1(active0, 0x40000800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 49, 0);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 63, 0);
         return jjMoveStringLiteralDfa6_1(active0, 0x8200000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x30L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa7_1(active0, 0x28000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 60, 0);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 61, 0);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 62, 0);
         return jjMoveStringLiteralDfa7_1(active0, 0x800000000L, active1, 0L);
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 42, 0);
         break;
      case 104:
         return jjMoveStringLiteralDfa7_1(active0, 0x40000000000000L, active1, 0L);
      case 107:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(6, 66, 0);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(6, 67, 0);
         break;
      case 108:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 50, 0);
         break;
      case 109:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x30L);
      case 118:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_1(active0, 0x100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_1(active0, 0x40000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 45, 0);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 51, 0);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 52, 0);
         return jjMoveStringLiteralDfa8_1(active0, 0x20000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(7, 35, 0);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 44, 0);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x30L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 53, 0);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(8, 68, 0);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(8, 69, 0);
         return jjMoveStringLiteralDfa9_1(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 54, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_1(8, active0, 0L);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  kind = 71;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 0:
         return jjStopAtPos(0, 28);
      case 9:
         return jjStopAtPos(0, 27);
      case 10:
         return jjStopAtPos(0, 25);
      case 13:
         return jjStopAtPos(0, 26);
      case 32:
         return jjStopAtPos(0, 24);
      case 92:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0xe3004L);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 13:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 39:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 92:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 123:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 125:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 73;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\173", "\175", "\134\176", "\134\55", 
"\134\137", "\134\12", "\134\15", "\134\52", "\134\174", "\134\72", "\134\173", 
"\134\175", "\134\134", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, };
public static final String[] lexStateNames = {
   "CONTROL_VALUE", 
   "CONTROL", 
   "HEX", 
   "DEFAULT", 
};
public static final int[] jjnewLexState = {
   -1, 1, 2, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, -1, -1, -1, 3, 3, 
   3, 3, 3, 3, -1, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1, 0, -1, -1, -1, 0, 
   -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, 3, 
};
static final long[] jjtoToken = {
   0xffffffffe0bfff81L, 0x6ffL, 
};
static final long[] jjtoSkip = {
   0x1f000078L, 0x0L, 
};
static final long[] jjtoMore = {
   0x6L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[3];
private final int[] jjstateSet = new int[6];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public RTFParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public RTFParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 3; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 3;
int defaultLexState = 3;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 74)
         {
            jjmatchedKind = 74;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 74)
         {
            jjmatchedKind = 74;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 13 && (0x2601L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 9 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[9]);
                                 matchedToken.image = "\u00a0";
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[10]);
                                 matchedToken.image = "\u00ad";
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[11]);
                                 matchedToken.image = "\u2011";
         break;
      case 17 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[17]);
                                matchedToken.image = "{";
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[18]);
                                matchedToken.image = "}";
         break;
      case 19 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[19]);
                                matchedToken.image = "\\";
         break;
      default : 
         break;
   }
}
}

