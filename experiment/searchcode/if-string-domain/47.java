/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package elephantdb.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ElephantDB {

  public interface Iface {

    public Value get(String domain, byte[] key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException;

    public Value getString(String domain, String key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException;

    public Value getInt(String domain, int key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException;

    public Value getLong(String domain, long key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException;

    public List<Value> multiGet(String domain, List<byte[]> key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException;

    public List<Value> multiGetString(String domain, List<String> key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException;

    public List<Value> multiGetInt(String domain, List<Integer> key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException;

    public List<Value> multiGetLong(String domain, List<Long> key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException;

    public List<Value> directMultiGet(String domain, List<byte[]> key) throws DomainNotFoundException, DomainNotLoadedException, WrongHostException, TException;

    public DomainStatus getDomainStatus(String domain) throws TException;

    public List<String> getDomains() throws TException;

    public Status getStatus() throws TException;

    public boolean isFullyLoaded() throws TException;

    public boolean isUpdating() throws TException;

    public void updateAll() throws InvalidConfigurationException, TException;

    public boolean update(String domain) throws TException;

  }

  public interface AsyncIface {

    public void get(String domain, byte[] key, AsyncMethodCallback<AsyncClient.get_call> resultHandler) throws TException;

    public void getString(String domain, String key, AsyncMethodCallback<AsyncClient.getString_call> resultHandler) throws TException;

    public void getInt(String domain, int key, AsyncMethodCallback<AsyncClient.getInt_call> resultHandler) throws TException;

    public void getLong(String domain, long key, AsyncMethodCallback<AsyncClient.getLong_call> resultHandler) throws TException;

    public void multiGet(String domain, List<byte[]> key, AsyncMethodCallback<AsyncClient.multiGet_call> resultHandler) throws TException;

    public void multiGetString(String domain, List<String> key, AsyncMethodCallback<AsyncClient.multiGetString_call> resultHandler) throws TException;

    public void multiGetInt(String domain, List<Integer> key, AsyncMethodCallback<AsyncClient.multiGetInt_call> resultHandler) throws TException;

    public void multiGetLong(String domain, List<Long> key, AsyncMethodCallback<AsyncClient.multiGetLong_call> resultHandler) throws TException;

    public void directMultiGet(String domain, List<byte[]> key, AsyncMethodCallback<AsyncClient.directMultiGet_call> resultHandler) throws TException;

    public void getDomainStatus(String domain, AsyncMethodCallback<AsyncClient.getDomainStatus_call> resultHandler) throws TException;

    public void getDomains(AsyncMethodCallback<AsyncClient.getDomains_call> resultHandler) throws TException;

    public void getStatus(AsyncMethodCallback<AsyncClient.getStatus_call> resultHandler) throws TException;

    public void isFullyLoaded(AsyncMethodCallback<AsyncClient.isFullyLoaded_call> resultHandler) throws TException;

    public void isUpdating(AsyncMethodCallback<AsyncClient.isUpdating_call> resultHandler) throws TException;

    public void updateAll(AsyncMethodCallback<AsyncClient.updateAll_call> resultHandler) throws TException;

    public void update(String domain, AsyncMethodCallback<AsyncClient.update_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public Value get(String domain, byte[] key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      send_get(domain, key);
      return recv_get();
    }

    public void send_get(String domain, byte[] key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get", TMessageType.CALL, ++seqid_));
      get_args args = new get_args();
      args.set_domain(domain);
      args.set_key(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Value recv_get() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "get failed: out of sequence response");
      }
      get_result result = new get_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get failed: unknown result");
    }

    public Value getString(String domain, String key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      send_getString(domain, key);
      return recv_getString();
    }

    public void send_getString(String domain, String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getString", TMessageType.CALL, ++seqid_));
      getString_args args = new getString_args();
      args.set_domain(domain);
      args.set_key(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Value recv_getString() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getString failed: out of sequence response");
      }
      getString_result result = new getString_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getString failed: unknown result");
    }

    public Value getInt(String domain, int key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      send_getInt(domain, key);
      return recv_getInt();
    }

    public void send_getInt(String domain, int key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getInt", TMessageType.CALL, ++seqid_));
      getInt_args args = new getInt_args();
      args.set_domain(domain);
      args.set_key(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Value recv_getInt() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getInt failed: out of sequence response");
      }
      getInt_result result = new getInt_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getInt failed: unknown result");
    }

    public Value getLong(String domain, long key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      send_getLong(domain, key);
      return recv_getLong();
    }

    public void send_getLong(String domain, long key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getLong", TMessageType.CALL, ++seqid_));
      getLong_args args = new getLong_args();
      args.set_domain(domain);
      args.set_key(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Value recv_getLong() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getLong failed: out of sequence response");
      }
      getLong_result result = new getLong_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLong failed: unknown result");
    }

    public List<Value> multiGet(String domain, List<byte[]> key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      send_multiGet(domain, key);
      return recv_multiGet();
    }

    public void send_multiGet(String domain, List<byte[]> key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("multiGet", TMessageType.CALL, ++seqid_));
      multiGet_args args = new multiGet_args();
      args.set_domain(domain);
      args.set_key(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Value> recv_multiGet() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "multiGet failed: out of sequence response");
      }
      multiGet_result result = new multiGet_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "multiGet failed: unknown result");
    }

    public List<Value> multiGetString(String domain, List<String> key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      send_multiGetString(domain, key);
      return recv_multiGetString();
    }

    public void send_multiGetString(String domain, List<String> key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("multiGetString", TMessageType.CALL, ++seqid_));
      multiGetString_args args = new multiGetString_args();
      args.set_domain(domain);
      args.set_key(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Value> recv_multiGetString() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "multiGetString failed: out of sequence response");
      }
      multiGetString_result result = new multiGetString_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "multiGetString failed: unknown result");
    }

    public List<Value> multiGetInt(String domain, List<Integer> key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      send_multiGetInt(domain, key);
      return recv_multiGetInt();
    }

    public void send_multiGetInt(String domain, List<Integer> key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("multiGetInt", TMessageType.CALL, ++seqid_));
      multiGetInt_args args = new multiGetInt_args();
      args.set_domain(domain);
      args.set_key(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Value> recv_multiGetInt() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "multiGetInt failed: out of sequence response");
      }
      multiGetInt_result result = new multiGetInt_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "multiGetInt failed: unknown result");
    }

    public List<Value> multiGetLong(String domain, List<Long> key) throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      send_multiGetLong(domain, key);
      return recv_multiGetLong();
    }

    public void send_multiGetLong(String domain, List<Long> key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("multiGetLong", TMessageType.CALL, ++seqid_));
      multiGetLong_args args = new multiGetLong_args();
      args.set_domain(domain);
      args.set_key(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Value> recv_multiGetLong() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "multiGetLong failed: out of sequence response");
      }
      multiGetLong_result result = new multiGetLong_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.hde != null) {
        throw result.hde;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "multiGetLong failed: unknown result");
    }

    public List<Value> directMultiGet(String domain, List<byte[]> key) throws DomainNotFoundException, DomainNotLoadedException, WrongHostException, TException
    {
      send_directMultiGet(domain, key);
      return recv_directMultiGet();
    }

    public void send_directMultiGet(String domain, List<byte[]> key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("directMultiGet", TMessageType.CALL, ++seqid_));
      directMultiGet_args args = new directMultiGet_args();
      args.set_domain(domain);
      args.set_key(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Value> recv_directMultiGet() throws DomainNotFoundException, DomainNotLoadedException, WrongHostException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "directMultiGet failed: out of sequence response");
      }
      directMultiGet_result result = new directMultiGet_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.dnfe != null) {
        throw result.dnfe;
      }
      if (result.dnle != null) {
        throw result.dnle;
      }
      if (result.whe != null) {
        throw result.whe;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "directMultiGet failed: unknown result");
    }

    public DomainStatus getDomainStatus(String domain) throws TException
    {
      send_getDomainStatus(domain);
      return recv_getDomainStatus();
    }

    public void send_getDomainStatus(String domain) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getDomainStatus", TMessageType.CALL, ++seqid_));
      getDomainStatus_args args = new getDomainStatus_args();
      args.set_domain(domain);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public DomainStatus recv_getDomainStatus() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getDomainStatus failed: out of sequence response");
      }
      getDomainStatus_result result = new getDomainStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getDomainStatus failed: unknown result");
    }

    public List<String> getDomains() throws TException
    {
      send_getDomains();
      return recv_getDomains();
    }

    public void send_getDomains() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getDomains", TMessageType.CALL, ++seqid_));
      getDomains_args args = new getDomains_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_getDomains() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getDomains failed: out of sequence response");
      }
      getDomains_result result = new getDomains_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getDomains failed: unknown result");
    }

    public Status getStatus() throws TException
    {
      send_getStatus();
      return recv_getStatus();
    }

    public void send_getStatus() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getStatus", TMessageType.CALL, ++seqid_));
      getStatus_args args = new getStatus_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Status recv_getStatus() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getStatus failed: out of sequence response");
      }
      getStatus_result result = new getStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getStatus failed: unknown result");
    }

    public boolean isFullyLoaded() throws TException
    {
      send_isFullyLoaded();
      return recv_isFullyLoaded();
    }

    public void send_isFullyLoaded() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isFullyLoaded", TMessageType.CALL, ++seqid_));
      isFullyLoaded_args args = new isFullyLoaded_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isFullyLoaded() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isFullyLoaded failed: out of sequence response");
      }
      isFullyLoaded_result result = new isFullyLoaded_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isFullyLoaded failed: unknown result");
    }

    public boolean isUpdating() throws TException
    {
      send_isUpdating();
      return recv_isUpdating();
    }

    public void send_isUpdating() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isUpdating", TMessageType.CALL, ++seqid_));
      isUpdating_args args = new isUpdating_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isUpdating() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isUpdating failed: out of sequence response");
      }
      isUpdating_result result = new isUpdating_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isUpdating failed: unknown result");
    }

    public void updateAll() throws InvalidConfigurationException, TException
    {
      send_updateAll();
      recv_updateAll();
    }

    public void send_updateAll() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateAll", TMessageType.CALL, ++seqid_));
      updateAll_args args = new updateAll_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateAll() throws InvalidConfigurationException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateAll failed: out of sequence response");
      }
      updateAll_result result = new updateAll_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ice != null) {
        throw result.ice;
      }
      return;
    }

    public boolean update(String domain) throws TException
    {
      send_update(domain);
      return recv_update();
    }

    public void send_update(String domain) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("update", TMessageType.CALL, ++seqid_));
      update_args args = new update_args();
      args.set_domain(domain);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_update() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "update failed: out of sequence response");
      }
      update_result result = new update_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "update failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void get(String domain, byte[] key, AsyncMethodCallback<get_call> resultHandler) throws TException {
      checkReady();
      get_call method_call = new get_call(domain, key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class get_call extends TAsyncMethodCall {
      private String domain;
      private byte[] key;
      public get_call(String domain, byte[] key, AsyncMethodCallback<get_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("get", TMessageType.CALL, 0));
        get_args args = new get_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Value getResult() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get();
      }
    }

    public void getString(String domain, String key, AsyncMethodCallback<getString_call> resultHandler) throws TException {
      checkReady();
      getString_call method_call = new getString_call(domain, key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getString_call extends TAsyncMethodCall {
      private String domain;
      private String key;
      public getString_call(String domain, String key, AsyncMethodCallback<getString_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getString", TMessageType.CALL, 0));
        getString_args args = new getString_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Value getResult() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getString();
      }
    }

    public void getInt(String domain, int key, AsyncMethodCallback<getInt_call> resultHandler) throws TException {
      checkReady();
      getInt_call method_call = new getInt_call(domain, key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getInt_call extends TAsyncMethodCall {
      private String domain;
      private int key;
      public getInt_call(String domain, int key, AsyncMethodCallback<getInt_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getInt", TMessageType.CALL, 0));
        getInt_args args = new getInt_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Value getResult() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInt();
      }
    }

    public void getLong(String domain, long key, AsyncMethodCallback<getLong_call> resultHandler) throws TException {
      checkReady();
      getLong_call method_call = new getLong_call(domain, key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getLong_call extends TAsyncMethodCall {
      private String domain;
      private long key;
      public getLong_call(String domain, long key, AsyncMethodCallback<getLong_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getLong", TMessageType.CALL, 0));
        getLong_args args = new getLong_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Value getResult() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLong();
      }
    }

    public void multiGet(String domain, List<byte[]> key, AsyncMethodCallback<multiGet_call> resultHandler) throws TException {
      checkReady();
      multiGet_call method_call = new multiGet_call(domain, key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class multiGet_call extends TAsyncMethodCall {
      private String domain;
      private List<byte[]> key;
      public multiGet_call(String domain, List<byte[]> key, AsyncMethodCallback<multiGet_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("multiGet", TMessageType.CALL, 0));
        multiGet_args args = new multiGet_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Value> getResult() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiGet();
      }
    }

    public void multiGetString(String domain, List<String> key, AsyncMethodCallback<multiGetString_call> resultHandler) throws TException {
      checkReady();
      multiGetString_call method_call = new multiGetString_call(domain, key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class multiGetString_call extends TAsyncMethodCall {
      private String domain;
      private List<String> key;
      public multiGetString_call(String domain, List<String> key, AsyncMethodCallback<multiGetString_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("multiGetString", TMessageType.CALL, 0));
        multiGetString_args args = new multiGetString_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Value> getResult() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiGetString();
      }
    }

    public void multiGetInt(String domain, List<Integer> key, AsyncMethodCallback<multiGetInt_call> resultHandler) throws TException {
      checkReady();
      multiGetInt_call method_call = new multiGetInt_call(domain, key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class multiGetInt_call extends TAsyncMethodCall {
      private String domain;
      private List<Integer> key;
      public multiGetInt_call(String domain, List<Integer> key, AsyncMethodCallback<multiGetInt_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("multiGetInt", TMessageType.CALL, 0));
        multiGetInt_args args = new multiGetInt_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Value> getResult() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiGetInt();
      }
    }

    public void multiGetLong(String domain, List<Long> key, AsyncMethodCallback<multiGetLong_call> resultHandler) throws TException {
      checkReady();
      multiGetLong_call method_call = new multiGetLong_call(domain, key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class multiGetLong_call extends TAsyncMethodCall {
      private String domain;
      private List<Long> key;
      public multiGetLong_call(String domain, List<Long> key, AsyncMethodCallback<multiGetLong_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("multiGetLong", TMessageType.CALL, 0));
        multiGetLong_args args = new multiGetLong_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Value> getResult() throws DomainNotFoundException, HostsDownException, DomainNotLoadedException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiGetLong();
      }
    }

    public void directMultiGet(String domain, List<byte[]> key, AsyncMethodCallback<directMultiGet_call> resultHandler) throws TException {
      checkReady();
      directMultiGet_call method_call = new directMultiGet_call(domain, key, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class directMultiGet_call extends TAsyncMethodCall {
      private String domain;
      private List<byte[]> key;
      public directMultiGet_call(String domain, List<byte[]> key, AsyncMethodCallback<directMultiGet_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
        this.key = key;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("directMultiGet", TMessageType.CALL, 0));
        directMultiGet_args args = new directMultiGet_args();
        args.set_domain(domain);
        args.set_key(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Value> getResult() throws DomainNotFoundException, DomainNotLoadedException, WrongHostException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_directMultiGet();
      }
    }

    public void getDomainStatus(String domain, AsyncMethodCallback<getDomainStatus_call> resultHandler) throws TException {
      checkReady();
      getDomainStatus_call method_call = new getDomainStatus_call(domain, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getDomainStatus_call extends TAsyncMethodCall {
      private String domain;
      public getDomainStatus_call(String domain, AsyncMethodCallback<getDomainStatus_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getDomainStatus", TMessageType.CALL, 0));
        getDomainStatus_args args = new getDomainStatus_args();
        args.set_domain(domain);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DomainStatus getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDomainStatus();
      }
    }

    public void getDomains(AsyncMethodCallback<getDomains_call> resultHandler) throws TException {
      checkReady();
      getDomains_call method_call = new getDomains_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getDomains_call extends TAsyncMethodCall {
      public getDomains_call(AsyncMethodCallback<getDomains_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getDomains", TMessageType.CALL, 0));
        getDomains_args args = new getDomains_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDomains();
      }
    }

    public void getStatus(AsyncMethodCallback<getStatus_call> resultHandler) throws TException {
      checkReady();
      getStatus_call method_call = new getStatus_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getStatus_call extends TAsyncMethodCall {
      public getStatus_call(AsyncMethodCallback<getStatus_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getStatus", TMessageType.CALL, 0));
        getStatus_args args = new getStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStatus();
      }
    }

    public void isFullyLoaded(AsyncMethodCallback<isFullyLoaded_call> resultHandler) throws TException {
      checkReady();
      isFullyLoaded_call method_call = new isFullyLoaded_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class isFullyLoaded_call extends TAsyncMethodCall {
      public isFullyLoaded_call(AsyncMethodCallback<isFullyLoaded_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("isFullyLoaded", TMessageType.CALL, 0));
        isFullyLoaded_args args = new isFullyLoaded_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isFullyLoaded();
      }
    }

    public void isUpdating(AsyncMethodCallback<isUpdating_call> resultHandler) throws TException {
      checkReady();
      isUpdating_call method_call = new isUpdating_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class isUpdating_call extends TAsyncMethodCall {
      public isUpdating_call(AsyncMethodCallback<isUpdating_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("isUpdating", TMessageType.CALL, 0));
        isUpdating_args args = new isUpdating_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isUpdating();
      }
    }

    public void updateAll(AsyncMethodCallback<updateAll_call> resultHandler) throws TException {
      checkReady();
      updateAll_call method_call = new updateAll_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class updateAll_call extends TAsyncMethodCall {
      public updateAll_call(AsyncMethodCallback<updateAll_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("updateAll", TMessageType.CALL, 0));
        updateAll_args args = new updateAll_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidConfigurationException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateAll();
      }
    }

    public void update(String domain, AsyncMethodCallback<update_call> resultHandler) throws TException {
      checkReady();
      update_call method_call = new update_call(domain, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class update_call extends TAsyncMethodCall {
      private String domain;
      public update_call(String domain, AsyncMethodCallback<update_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("update", TMessageType.CALL, 0));
        update_args args = new update_args();
        args.set_domain(domain);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("get", new get());
      processMap_.put("getString", new getString());
      processMap_.put("getInt", new getInt());
      processMap_.put("getLong", new getLong());
      processMap_.put("multiGet", new multiGet());
      processMap_.put("multiGetString", new multiGetString());
      processMap_.put("multiGetInt", new multiGetInt());
      processMap_.put("multiGetLong", new multiGetLong());
      processMap_.put("directMultiGet", new directMultiGet());
      processMap_.put("getDomainStatus", new getDomainStatus());
      processMap_.put("getDomains", new getDomains());
      processMap_.put("getStatus", new getStatus());
      processMap_.put("isFullyLoaded", new isFullyLoaded());
      processMap_.put("isUpdating", new isUpdating());
      processMap_.put("updateAll", new updateAll());
      processMap_.put("update", new update());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class get implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_args args = new get_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("get", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        get_result result = new get_result();
        try {
          result.success = iface_.get(args.domain, args.key);
        } catch (DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (HostsDownException hde) {
          result.hde = hde;
        } catch (DomainNotLoadedException dnle) {
          result.dnle = dnle;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get");
          oprot.writeMessageBegin(new TMessage("get", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getString implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getString_args args = new getString_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getString", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getString_result result = new getString_result();
        try {
          result.success = iface_.getString(args.domain, args.key);
        } catch (DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (HostsDownException hde) {
          result.hde = hde;
        } catch (DomainNotLoadedException dnle) {
          result.dnle = dnle;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getString", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getString");
          oprot.writeMessageBegin(new TMessage("getString", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getString", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getInt implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getInt_args args = new getInt_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getInt", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getInt_result result = new getInt_result();
        try {
          result.success = iface_.getInt(args.domain, args.key);
        } catch (DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (HostsDownException hde) {
          result.hde = hde;
        } catch (DomainNotLoadedException dnle) {
          result.dnle = dnle;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getInt", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getInt");
          oprot.writeMessageBegin(new TMessage("getInt", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getInt", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLong implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getLong_args args = new getLong_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getLong", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getLong_result result = new getLong_result();
        try {
          result.success = iface_.getLong(args.domain, args.key);
        } catch (DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (HostsDownException hde) {
          result.hde = hde;
        } catch (DomainNotLoadedException dnle) {
          result.dnle = dnle;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getLong", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLong");
          oprot.writeMessageBegin(new TMessage("getLong", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getLong", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class multiGet implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        multiGet_args args = new multiGet_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("multiGet", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        multiGet_result result = new multiGet_result();
        try {
          result.success = iface_.multiGet(args.domain, args.key);
        } catch (DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (HostsDownException hde) {
          result.hde = hde;
        } catch (DomainNotLoadedException dnle) {
          result.dnle = dnle;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing multiGet", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing multiGet");
          oprot.writeMessageBegin(new TMessage("multiGet", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("multiGet", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class multiGetString implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        multiGetString_args args = new multiGetString_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("multiGetString", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        multiGetString_result result = new multiGetString_result();
        try {
          result.success = iface_.multiGetString(args.domain, args.key);
        } catch (DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (HostsDownException hde) {
          result.hde = hde;
        } catch (DomainNotLoadedException dnle) {
          result.dnle = dnle;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing multiGetString", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing multiGetString");
          oprot.writeMessageBegin(new TMessage("multiGetString", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("multiGetString", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class multiGetInt implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        multiGetInt_args args = new multiGetInt_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("multiGetInt", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        multiGetInt_result result = new multiGetInt_result();
        try {
          result.success = iface_.multiGetInt(args.domain, args.key);
        } catch (DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (HostsDownException hde) {
          result.hde = hde;
        } catch (DomainNotLoadedException dnle) {
          result.dnle = dnle;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing multiGetInt", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing multiGetInt");
          oprot.writeMessageBegin(new TMessage("multiGetInt", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("multiGetInt", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class multiGetLong implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        multiGetLong_args args = new multiGetLong_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("multiGetLong", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        multiGetLong_result result = new multiGetLong_result();
        try {
          result.success = iface_.multiGetLong(args.domain, args.key);
        } catch (DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (HostsDownException hde) {
          result.hde = hde;
        } catch (DomainNotLoadedException dnle) {
          result.dnle = dnle;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing multiGetLong", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing multiGetLong");
          oprot.writeMessageBegin(new TMessage("multiGetLong", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("multiGetLong", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class directMultiGet implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        directMultiGet_args args = new directMultiGet_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("directMultiGet", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        directMultiGet_result result = new directMultiGet_result();
        try {
          result.success = iface_.directMultiGet(args.domain, args.key);
        } catch (DomainNotFoundException dnfe) {
          result.dnfe = dnfe;
        } catch (DomainNotLoadedException dnle) {
          result.dnle = dnle;
        } catch (WrongHostException whe) {
          result.whe = whe;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing directMultiGet", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing directMultiGet");
          oprot.writeMessageBegin(new TMessage("directMultiGet", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("directMultiGet", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getDomainStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getDomainStatus_args args = new getDomainStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getDomainStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getDomainStatus_result result = new getDomainStatus_result();
        result.success = iface_.getDomainStatus(args.domain);
        oprot.writeMessageBegin(new TMessage("getDomainStatus", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getDomains implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getDomains_args args = new getDomains_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getDomains", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getDomains_result result = new getDomains_result();
        result.success = iface_.getDomains();
        oprot.writeMessageBegin(new TMessage("getDomains", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getStatus_args args = new getStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getStatus_result result = new getStatus_result();
        result.success = iface_.getStatus();
        oprot.writeMessageBegin(new TMessage("getStatus", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isFullyLoaded implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isFullyLoaded_args args = new isFullyLoaded_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isFullyLoaded", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isFullyLoaded_result result = new isFullyLoaded_result();
        result.success = iface_.isFullyLoaded();
        result.set_success_isSet(true);
        oprot.writeMessageBegin(new TMessage("isFullyLoaded", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isUpdating implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isUpdating_args args = new isUpdating_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isUpdating", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isUpdating_result result = new isUpdating_result();
        result.success = iface_.isUpdating();
        result.set_success_isSet(true);
        oprot.writeMessageBegin(new TMessage("isUpdating", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateAll implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateAll_args args = new updateAll_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateAll_result result = new updateAll_result();
        try {
          iface_.updateAll();
        } catch (InvalidConfigurationException ice) {
          result.ice = ice;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing updateAll", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateAll");
          oprot.writeMessageBegin(new TMessage("updateAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateAll", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class update implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        update_args args = new update_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("update", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        update_result result = new update_result();
        result.success = iface_.update(args.domain);
        result.set_success_isSet(true);
        oprot.writeMessageBegin(new TMessage("update", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class get_args implements TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)2);

    private String domain;
    private byte[] key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
    }

    public get_args() {
    }

    public get_args(
      String domain,
      byte[] key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_args(get_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        this.key = new byte[other.key.length];
        System.arraycopy(other.key, 0, key, 0, other.key.length);
      }
    }

    public get_args deepCopy() {
      return new get_args(this);
    }

    @Deprecated
    public get_args clone() {
      return new get_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public byte[] get_key() {
      return this.key;
    }

    public void set_key(byte[] key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((byte[])value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_args)
        return this.equals((get_args)that);
      return false;
    }

    public boolean equals(get_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!java.util.Arrays.equals(this.key, that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_args typedOther = (get_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBinary(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
          int __key_size = Math.min(this.key.length, 128);
          for (int i = 0; i < __key_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.key[i]).length() > 1 ? Integer.toHexString(this.key[i]).substring(Integer.toHexString(this.key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.key[i]).toUpperCase());
          }
          if (this.key.length > 128) sb.append(" ...");
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class get_result implements TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField DNFE_FIELD_DESC = new TField("dnfe", TType.STRUCT, (short)1);
    private static final TField HDE_FIELD_DESC = new TField("hde", TType.STRUCT, (short)2);
    private static final TField DNLE_FIELD_DESC = new TField("dnle", TType.STRUCT, (short)3);

    private Value success;
    private DomainNotFoundException dnfe;
    private HostsDownException hde;
    private DomainNotLoadedException dnle;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Value.class)));
      tmpMap.put(_Fields.DNFE, new FieldMetaData("dnfe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new FieldMetaData("hde", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new FieldMetaData("dnle", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
    }

    public get_result() {
    }

    public get_result(
      Value success,
      DomainNotFoundException dnfe,
      HostsDownException hde,
      DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_result(get_result other) {
      if (other.is_set_success()) {
        this.success = new Value(other.success);
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new DomainNotLoadedException(other.dnle);
      }
    }

    public get_result deepCopy() {
      return new get_result(this);
    }

    @Deprecated
    public get_result clone() {
      return new get_result(this);
    }

    public Value get_success() {
      return this.success;
    }

    public void set_success(Value success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been asigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Value)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((DomainNotLoadedException)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_result)
        return this.equals((get_result)that);
      return false;
    }

    public boolean equals(get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_result typedOther = (get_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {        lastComparison = TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {        lastComparison = TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {        lastComparison = TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Value();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == TType.STRUCT) {
              this.dnfe = new DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == TType.STRUCT) {
              this.hde = new HostsDownException();
              this.hde.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == TType.STRUCT) {
              this.dnle = new DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getString_args implements TBase<getString_args, getString_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getString_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)2);

    private String domain;
    private String key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getString_args.class, metaDataMap);
    }

    public getString_args() {
    }

    public getString_args(
      String domain,
      String key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getString_args(getString_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        this.key = other.key;
      }
    }

    public getString_args deepCopy() {
      return new getString_args(this);
    }

    @Deprecated
    public getString_args clone() {
      return new getString_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public String get_key() {
      return this.key;
    }

    public void set_key(String key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((String)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getString_args)
        return this.equals((getString_args)that);
      return false;
    }

    public boolean equals(getString_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(getString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getString_args typedOther = (getString_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getString_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getString_result implements TBase<getString_result, getString_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getString_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField DNFE_FIELD_DESC = new TField("dnfe", TType.STRUCT, (short)1);
    private static final TField HDE_FIELD_DESC = new TField("hde", TType.STRUCT, (short)2);
    private static final TField DNLE_FIELD_DESC = new TField("dnle", TType.STRUCT, (short)3);

    private Value success;
    private DomainNotFoundException dnfe;
    private HostsDownException hde;
    private DomainNotLoadedException dnle;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Value.class)));
      tmpMap.put(_Fields.DNFE, new FieldMetaData("dnfe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new FieldMetaData("hde", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new FieldMetaData("dnle", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getString_result.class, metaDataMap);
    }

    public getString_result() {
    }

    public getString_result(
      Value success,
      DomainNotFoundException dnfe,
      HostsDownException hde,
      DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getString_result(getString_result other) {
      if (other.is_set_success()) {
        this.success = new Value(other.success);
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new DomainNotLoadedException(other.dnle);
      }
    }

    public getString_result deepCopy() {
      return new getString_result(this);
    }

    @Deprecated
    public getString_result clone() {
      return new getString_result(this);
    }

    public Value get_success() {
      return this.success;
    }

    public void set_success(Value success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been asigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Value)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((DomainNotLoadedException)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getString_result)
        return this.equals((getString_result)that);
      return false;
    }

    public boolean equals(getString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(getString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getString_result typedOther = (getString_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {        lastComparison = TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {        lastComparison = TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {        lastComparison = TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Value();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == TType.STRUCT) {
              this.dnfe = new DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == TType.STRUCT) {
              this.hde = new HostsDownException();
              this.hde.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == TType.STRUCT) {
              this.dnle = new DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getInt_args implements TBase<getInt_args, getInt_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getInt_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.I32, (short)2);

    private String domain;
    private int key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getInt_args.class, metaDataMap);
    }

    public getInt_args() {
    }

    public getInt_args(
      String domain,
      int key)
    {
      this();
      this.domain = domain;
      this.key = key;
      set_key_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInt_args(getInt_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      this.key = other.key;
    }

    public getInt_args deepCopy() {
      return new getInt_args(this);
    }

    @Deprecated
    public getInt_args clone() {
      return new getInt_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key() {
      return this.key;
    }

    public void set_key(int key) {
      this.key = key;
      set_key_isSet(true);
    }

    public void unset_key() {
      __isset_bit_vector.clear(__KEY_ISSET_ID);
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean is_set_key() {
      return __isset_bit_vector.get(__KEY_ISSET_ID);
    }

    public void set_key_isSet(boolean value) {
      __isset_bit_vector.set(__KEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return new Integer(get_key());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInt_args)
        return this.equals((getInt_args)that);
      return false;
    }

    public boolean equals(getInt_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true;
      boolean that_present_key = true;
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (this.key != that.key)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true;
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(getInt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInt_args typedOther = (getInt_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == TType.I32) {
              this.key = iprot.readI32();
              set_key_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeI32(this.key);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInt_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      sb.append(this.key);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getInt_result implements TBase<getInt_result, getInt_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getInt_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField DNFE_FIELD_DESC = new TField("dnfe", TType.STRUCT, (short)1);
    private static final TField HDE_FIELD_DESC = new TField("hde", TType.STRUCT, (short)2);
    private static final TField DNLE_FIELD_DESC = new TField("dnle", TType.STRUCT, (short)3);

    private Value success;
    private DomainNotFoundException dnfe;
    private HostsDownException hde;
    private DomainNotLoadedException dnle;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Value.class)));
      tmpMap.put(_Fields.DNFE, new FieldMetaData("dnfe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new FieldMetaData("hde", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new FieldMetaData("dnle", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getInt_result.class, metaDataMap);
    }

    public getInt_result() {
    }

    public getInt_result(
      Value success,
      DomainNotFoundException dnfe,
      HostsDownException hde,
      DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInt_result(getInt_result other) {
      if (other.is_set_success()) {
        this.success = new Value(other.success);
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new DomainNotLoadedException(other.dnle);
      }
    }

    public getInt_result deepCopy() {
      return new getInt_result(this);
    }

    @Deprecated
    public getInt_result clone() {
      return new getInt_result(this);
    }

    public Value get_success() {
      return this.success;
    }

    public void set_success(Value success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been asigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Value)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((DomainNotLoadedException)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInt_result)
        return this.equals((getInt_result)that);
      return false;
    }

    public boolean equals(getInt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(getInt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInt_result typedOther = (getInt_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {        lastComparison = TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {        lastComparison = TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {        lastComparison = TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Value();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == TType.STRUCT) {
              this.dnfe = new DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == TType.STRUCT) {
              this.hde = new HostsDownException();
              this.hde.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == TType.STRUCT) {
              this.dnle = new DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLong_args implements TBase<getLong_args, getLong_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getLong_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.I64, (short)2);

    private String domain;
    private long key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getLong_args.class, metaDataMap);
    }

    public getLong_args() {
    }

    public getLong_args(
      String domain,
      long key)
    {
      this();
      this.domain = domain;
      this.key = key;
      set_key_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLong_args(getLong_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      this.key = other.key;
    }

    public getLong_args deepCopy() {
      return new getLong_args(this);
    }

    @Deprecated
    public getLong_args clone() {
      return new getLong_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public long get_key() {
      return this.key;
    }

    public void set_key(long key) {
      this.key = key;
      set_key_isSet(true);
    }

    public void unset_key() {
      __isset_bit_vector.clear(__KEY_ISSET_ID);
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean is_set_key() {
      return __isset_bit_vector.get(__KEY_ISSET_ID);
    }

    public void set_key_isSet(boolean value) {
      __isset_bit_vector.set(__KEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((Long)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return new Long(get_key());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLong_args)
        return this.equals((getLong_args)that);
      return false;
    }

    public boolean equals(getLong_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true;
      boolean that_present_key = true;
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (this.key != that.key)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true;
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(getLong_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLong_args typedOther = (getLong_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == TType.I64) {
              this.key = iprot.readI64();
              set_key_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeI64(this.key);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLong_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      sb.append(this.key);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLong_result implements TBase<getLong_result, getLong_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getLong_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField DNFE_FIELD_DESC = new TField("dnfe", TType.STRUCT, (short)1);
    private static final TField HDE_FIELD_DESC = new TField("hde", TType.STRUCT, (short)2);
    private static final TField DNLE_FIELD_DESC = new TField("dnle", TType.STRUCT, (short)3);

    private Value success;
    private DomainNotFoundException dnfe;
    private HostsDownException hde;
    private DomainNotLoadedException dnle;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Value.class)));
      tmpMap.put(_Fields.DNFE, new FieldMetaData("dnfe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new FieldMetaData("hde", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new FieldMetaData("dnle", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getLong_result.class, metaDataMap);
    }

    public getLong_result() {
    }

    public getLong_result(
      Value success,
      DomainNotFoundException dnfe,
      HostsDownException hde,
      DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLong_result(getLong_result other) {
      if (other.is_set_success()) {
        this.success = new Value(other.success);
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new DomainNotLoadedException(other.dnle);
      }
    }

    public getLong_result deepCopy() {
      return new getLong_result(this);
    }

    @Deprecated
    public getLong_result clone() {
      return new getLong_result(this);
    }

    public Value get_success() {
      return this.success;
    }

    public void set_success(Value success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been asigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Value)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((DomainNotLoadedException)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLong_result)
        return this.equals((getLong_result)that);
      return false;
    }

    public boolean equals(getLong_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(getLong_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLong_result typedOther = (getLong_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {        lastComparison = TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {        lastComparison = TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {        lastComparison = TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Value();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == TType.STRUCT) {
              this.dnfe = new DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == TType.STRUCT) {
              this.hde = new HostsDownException();
              this.hde.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == TType.STRUCT) {
              this.dnle = new DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLong_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiGet_args implements TBase<multiGet_args, multiGet_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiGet_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.LIST, (short)2);

    private String domain;
    private List<byte[]> key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiGet_args.class, metaDataMap);
    }

    public multiGet_args() {
    }

    public multiGet_args(
      String domain,
      List<byte[]> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGet_args(multiGet_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<byte[]> __this__key = new ArrayList<byte[]>();
        for (byte[] other_element : other.key) {
          byte[] temp_binary_element = new byte[other_element.length];
          System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
          __this__key.add(temp_binary_element);
        }
        this.key = __this__key;
      }
    }

    public multiGet_args deepCopy() {
      return new multiGet_args(this);
    }

    @Deprecated
    public multiGet_args clone() {
      return new multiGet_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<byte[]> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(byte[] elem) {
      if (this.key == null) {
        this.key = new ArrayList<byte[]>();
      }
      this.key.add(elem);
    }

    public List<byte[]> get_key() {
      return this.key;
    }

    public void set_key(List<byte[]> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<byte[]>)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGet_args)
        return this.equals((multiGet_args)that);
      return false;
    }

    public boolean equals(multiGet_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(multiGet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGet_args typedOther = (multiGet_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == TType.LIST) {
              {
                TList _list13 = iprot.readListBegin();
                this.key = new ArrayList<byte[]>(_list13.size);
                for (int _i14 = 0; _i14 < _list13.size; ++_i14)
                {
                  byte[] _elem15;
                  _elem15 = iprot.readBinary();
                  this.key.add(_elem15);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.key.size()));
          for (byte[] _iter16 : this.key)
          {
            oprot.writeBinary(_iter16);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGet_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiGet_result implements TBase<multiGet_result, multiGet_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiGet_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField DNFE_FIELD_DESC = new TField("dnfe", TType.STRUCT, (short)1);
    private static final TField HDE_FIELD_DESC = new TField("hde", TType.STRUCT, (short)2);
    private static final TField DNLE_FIELD_DESC = new TField("dnle", TType.STRUCT, (short)3);

    private List<Value> success;
    private DomainNotFoundException dnfe;
    private HostsDownException hde;
    private DomainNotLoadedException dnle;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Value.class))));
      tmpMap.put(_Fields.DNFE, new FieldMetaData("dnfe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new FieldMetaData("hde", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new FieldMetaData("dnle", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiGet_result.class, metaDataMap);
    }

    public multiGet_result() {
    }

    public multiGet_result(
      List<Value> success,
      DomainNotFoundException dnfe,
      HostsDownException hde,
      DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGet_result(multiGet_result other) {
      if (other.is_set_success()) {
        List<Value> __this__success = new ArrayList<Value>();
        for (Value other_element : other.success) {
          __this__success.add(new Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new DomainNotLoadedException(other.dnle);
      }
    }

    public multiGet_result deepCopy() {
      return new multiGet_result(this);
    }

    @Deprecated
    public multiGet_result clone() {
      return new multiGet_result(this);
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<Value>();
      }
      this.success.add(elem);
    }

    public List<Value> get_success() {
      return this.success;
    }

    public void set_success(List<Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been asigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((DomainNotLoadedException)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGet_result)
        return this.equals((multiGet_result)that);
      return false;
    }

    public boolean equals(multiGet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(multiGet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGet_result typedOther = (multiGet_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {        lastComparison = TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {        lastComparison = TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {        lastComparison = TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list17 = iprot.readListBegin();
                this.success = new ArrayList<Value>(_list17.size);
                for (int _i18 = 0; _i18 < _list17.size; ++_i18)
                {
                  Value _elem19;
                  _elem19 = new Value();
                  _elem19.read(iprot);
                  this.success.add(_elem19);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == TType.STRUCT) {
              this.dnfe = new DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == TType.STRUCT) {
              this.hde = new HostsDownException();
              this.hde.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == TType.STRUCT) {
              this.dnle = new DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Value _iter20 : this.success)
          {
            _iter20.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiGetString_args implements TBase<multiGetString_args, multiGetString_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiGetString_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.LIST, (short)2);

    private String domain;
    private List<String> key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiGetString_args.class, metaDataMap);
    }

    public multiGetString_args() {
    }

    public multiGetString_args(
      String domain,
      List<String> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetString_args(multiGetString_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<String> __this__key = new ArrayList<String>();
        for (String other_element : other.key) {
          __this__key.add(other_element);
        }
        this.key = __this__key;
      }
    }

    public multiGetString_args deepCopy() {
      return new multiGetString_args(this);
    }

    @Deprecated
    public multiGetString_args clone() {
      return new multiGetString_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<String> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(String elem) {
      if (this.key == null) {
        this.key = new ArrayList<String>();
      }
      this.key.add(elem);
    }

    public List<String> get_key() {
      return this.key;
    }

    public void set_key(List<String> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<String>)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetString_args)
        return this.equals((multiGetString_args)that);
      return false;
    }

    public boolean equals(multiGetString_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(multiGetString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetString_args typedOther = (multiGetString_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == TType.LIST) {
              {
                TList _list21 = iprot.readListBegin();
                this.key = new ArrayList<String>(_list21.size);
                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                {
                  String _elem23;
                  _elem23 = iprot.readString();
                  this.key.add(_elem23);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.key.size()));
          for (String _iter24 : this.key)
          {
            oprot.writeString(_iter24);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetString_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiGetString_result implements TBase<multiGetString_result, multiGetString_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiGetString_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField DNFE_FIELD_DESC = new TField("dnfe", TType.STRUCT, (short)1);
    private static final TField HDE_FIELD_DESC = new TField("hde", TType.STRUCT, (short)2);
    private static final TField DNLE_FIELD_DESC = new TField("dnle", TType.STRUCT, (short)3);

    private List<Value> success;
    private DomainNotFoundException dnfe;
    private HostsDownException hde;
    private DomainNotLoadedException dnle;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Value.class))));
      tmpMap.put(_Fields.DNFE, new FieldMetaData("dnfe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new FieldMetaData("hde", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new FieldMetaData("dnle", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiGetString_result.class, metaDataMap);
    }

    public multiGetString_result() {
    }

    public multiGetString_result(
      List<Value> success,
      DomainNotFoundException dnfe,
      HostsDownException hde,
      DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetString_result(multiGetString_result other) {
      if (other.is_set_success()) {
        List<Value> __this__success = new ArrayList<Value>();
        for (Value other_element : other.success) {
          __this__success.add(new Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new DomainNotLoadedException(other.dnle);
      }
    }

    public multiGetString_result deepCopy() {
      return new multiGetString_result(this);
    }

    @Deprecated
    public multiGetString_result clone() {
      return new multiGetString_result(this);
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<Value>();
      }
      this.success.add(elem);
    }

    public List<Value> get_success() {
      return this.success;
    }

    public void set_success(List<Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been asigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((DomainNotLoadedException)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetString_result)
        return this.equals((multiGetString_result)that);
      return false;
    }

    public boolean equals(multiGetString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(multiGetString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetString_result typedOther = (multiGetString_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {        lastComparison = TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {        lastComparison = TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {        lastComparison = TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list25 = iprot.readListBegin();
                this.success = new ArrayList<Value>(_list25.size);
                for (int _i26 = 0; _i26 < _list25.size; ++_i26)
                {
                  Value _elem27;
                  _elem27 = new Value();
                  _elem27.read(iprot);
                  this.success.add(_elem27);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == TType.STRUCT) {
              this.dnfe = new DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == TType.STRUCT) {
              this.hde = new HostsDownException();
              this.hde.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == TType.STRUCT) {
              this.dnle = new DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Value _iter28 : this.success)
          {
            _iter28.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiGetInt_args implements TBase<multiGetInt_args, multiGetInt_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiGetInt_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.LIST, (short)2);

    private String domain;
    private List<Integer> key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiGetInt_args.class, metaDataMap);
    }

    public multiGetInt_args() {
    }

    public multiGetInt_args(
      String domain,
      List<Integer> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetInt_args(multiGetInt_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<Integer> __this__key = new ArrayList<Integer>();
        for (Integer other_element : other.key) {
          __this__key.add(other_element);
        }
        this.key = __this__key;
      }
    }

    public multiGetInt_args deepCopy() {
      return new multiGetInt_args(this);
    }

    @Deprecated
    public multiGetInt_args clone() {
      return new multiGetInt_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<Integer> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(int elem) {
      if (this.key == null) {
        this.key = new ArrayList<Integer>();
      }
      this.key.add(elem);
    }

    public List<Integer> get_key() {
      return this.key;
    }

    public void set_key(List<Integer> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<Integer>)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetInt_args)
        return this.equals((multiGetInt_args)that);
      return false;
    }

    public boolean equals(multiGetInt_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(multiGetInt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetInt_args typedOther = (multiGetInt_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == TType.LIST) {
              {
                TList _list29 = iprot.readListBegin();
                this.key = new ArrayList<Integer>(_list29.size);
                for (int _i30 = 0; _i30 < _list29.size; ++_i30)
                {
                  int _elem31;
                  _elem31 = iprot.readI32();
                  this.key.add(_elem31);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.key.size()));
          for (int _iter32 : this.key)
          {
            oprot.writeI32(_iter32);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetInt_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiGetInt_result implements TBase<multiGetInt_result, multiGetInt_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiGetInt_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField DNFE_FIELD_DESC = new TField("dnfe", TType.STRUCT, (short)1);
    private static final TField HDE_FIELD_DESC = new TField("hde", TType.STRUCT, (short)2);
    private static final TField DNLE_FIELD_DESC = new TField("dnle", TType.STRUCT, (short)3);

    private List<Value> success;
    private DomainNotFoundException dnfe;
    private HostsDownException hde;
    private DomainNotLoadedException dnle;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Value.class))));
      tmpMap.put(_Fields.DNFE, new FieldMetaData("dnfe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new FieldMetaData("hde", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new FieldMetaData("dnle", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiGetInt_result.class, metaDataMap);
    }

    public multiGetInt_result() {
    }

    public multiGetInt_result(
      List<Value> success,
      DomainNotFoundException dnfe,
      HostsDownException hde,
      DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetInt_result(multiGetInt_result other) {
      if (other.is_set_success()) {
        List<Value> __this__success = new ArrayList<Value>();
        for (Value other_element : other.success) {
          __this__success.add(new Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new DomainNotLoadedException(other.dnle);
      }
    }

    public multiGetInt_result deepCopy() {
      return new multiGetInt_result(this);
    }

    @Deprecated
    public multiGetInt_result clone() {
      return new multiGetInt_result(this);
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<Value>();
      }
      this.success.add(elem);
    }

    public List<Value> get_success() {
      return this.success;
    }

    public void set_success(List<Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been asigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((DomainNotLoadedException)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetInt_result)
        return this.equals((multiGetInt_result)that);
      return false;
    }

    public boolean equals(multiGetInt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(multiGetInt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetInt_result typedOther = (multiGetInt_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {        lastComparison = TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {        lastComparison = TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {        lastComparison = TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list33 = iprot.readListBegin();
                this.success = new ArrayList<Value>(_list33.size);
                for (int _i34 = 0; _i34 < _list33.size; ++_i34)
                {
                  Value _elem35;
                  _elem35 = new Value();
                  _elem35.read(iprot);
                  this.success.add(_elem35);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == TType.STRUCT) {
              this.dnfe = new DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == TType.STRUCT) {
              this.hde = new HostsDownException();
              this.hde.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == TType.STRUCT) {
              this.dnle = new DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Value _iter36 : this.success)
          {
            _iter36.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetInt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiGetLong_args implements TBase<multiGetLong_args, multiGetLong_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiGetLong_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.LIST, (short)2);

    private String domain;
    private List<Long> key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiGetLong_args.class, metaDataMap);
    }

    public multiGetLong_args() {
    }

    public multiGetLong_args(
      String domain,
      List<Long> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetLong_args(multiGetLong_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<Long> __this__key = new ArrayList<Long>();
        for (Long other_element : other.key) {
          __this__key.add(other_element);
        }
        this.key = __this__key;
      }
    }

    public multiGetLong_args deepCopy() {
      return new multiGetLong_args(this);
    }

    @Deprecated
    public multiGetLong_args clone() {
      return new multiGetLong_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<Long> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(long elem) {
      if (this.key == null) {
        this.key = new ArrayList<Long>();
      }
      this.key.add(elem);
    }

    public List<Long> get_key() {
      return this.key;
    }

    public void set_key(List<Long> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<Long>)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetLong_args)
        return this.equals((multiGetLong_args)that);
      return false;
    }

    public boolean equals(multiGetLong_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(multiGetLong_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetLong_args typedOther = (multiGetLong_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == TType.LIST) {
              {
                TList _list37 = iprot.readListBegin();
                this.key = new ArrayList<Long>(_list37.size);
                for (int _i38 = 0; _i38 < _list37.size; ++_i38)
                {
                  long _elem39;
                  _elem39 = iprot.readI64();
                  this.key.add(_elem39);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I64, this.key.size()));
          for (long _iter40 : this.key)
          {
            oprot.writeI64(_iter40);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetLong_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiGetLong_result implements TBase<multiGetLong_result, multiGetLong_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("multiGetLong_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField DNFE_FIELD_DESC = new TField("dnfe", TType.STRUCT, (short)1);
    private static final TField HDE_FIELD_DESC = new TField("hde", TType.STRUCT, (short)2);
    private static final TField DNLE_FIELD_DESC = new TField("dnle", TType.STRUCT, (short)3);

    private List<Value> success;
    private DomainNotFoundException dnfe;
    private HostsDownException hde;
    private DomainNotLoadedException dnle;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      HDE((short)2, "hde"),
      DNLE((short)3, "dnle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // HDE
            return HDE;
          case 3: // DNLE
            return DNLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Value.class))));
      tmpMap.put(_Fields.DNFE, new FieldMetaData("dnfe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.HDE, new FieldMetaData("hde", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new FieldMetaData("dnle", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(multiGetLong_result.class, metaDataMap);
    }

    public multiGetLong_result() {
    }

    public multiGetLong_result(
      List<Value> success,
      DomainNotFoundException dnfe,
      HostsDownException hde,
      DomainNotLoadedException dnle)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.hde = hde;
      this.dnle = dnle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetLong_result(multiGetLong_result other) {
      if (other.is_set_success()) {
        List<Value> __this__success = new ArrayList<Value>();
        for (Value other_element : other.success) {
          __this__success.add(new Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_hde()) {
        this.hde = new HostsDownException(other.hde);
      }
      if (other.is_set_dnle()) {
        this.dnle = new DomainNotLoadedException(other.dnle);
      }
    }

    public multiGetLong_result deepCopy() {
      return new multiGetLong_result(this);
    }

    @Deprecated
    public multiGetLong_result clone() {
      return new multiGetLong_result(this);
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<Value>();
      }
      this.success.add(elem);
    }

    public List<Value> get_success() {
      return this.success;
    }

    public void set_success(List<Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public HostsDownException get_hde() {
      return this.hde;
    }

    public void set_hde(HostsDownException hde) {
      this.hde = hde;
    }

    public void unset_hde() {
      this.hde = null;
    }

    /** Returns true if field hde is set (has been asigned a value) and false otherwise */
    public boolean is_set_hde() {
      return this.hde != null;
    }

    public void set_hde_isSet(boolean value) {
      if (!value) {
        this.hde = null;
      }
    }

    public DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((DomainNotFoundException)value);
        }
        break;

      case HDE:
        if (value == null) {
          unset_hde();
        } else {
          set_hde((HostsDownException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((DomainNotLoadedException)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case HDE:
        return get_hde();

      case DNLE:
        return get_dnle();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case HDE:
        return is_set_hde();
      case DNLE:
        return is_set_dnle();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetLong_result)
        return this.equals((multiGetLong_result)that);
      return false;
    }

    public boolean equals(multiGetLong_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_hde = true && this.is_set_hde();
      boolean that_present_hde = true && that.is_set_hde();
      if (this_present_hde || that_present_hde) {
        if (!(this_present_hde && that_present_hde))
          return false;
        if (!this.hde.equals(that.hde))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_hde = true && (is_set_hde());
      builder.append(present_hde);
      if (present_hde)
        builder.append(hde);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      return builder.toHashCode();
    }

    public int compareTo(multiGetLong_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetLong_result typedOther = (multiGetLong_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {        lastComparison = TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_hde()).compareTo(typedOther.is_set_hde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_hde()) {        lastComparison = TBaseHelper.compareTo(this.hde, typedOther.hde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {        lastComparison = TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list41 = iprot.readListBegin();
                this.success = new ArrayList<Value>(_list41.size);
                for (int _i42 = 0; _i42 < _list41.size; ++_i42)
                {
                  Value _elem43;
                  _elem43 = new Value();
                  _elem43.read(iprot);
                  this.success.add(_elem43);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == TType.STRUCT) {
              this.dnfe = new DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HDE
            if (field.type == TType.STRUCT) {
              this.hde = new HostsDownException();
              this.hde.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DNLE
            if (field.type == TType.STRUCT) {
              this.dnle = new DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Value _iter44 : this.success)
          {
            _iter44.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_hde()) {
        oprot.writeFieldBegin(HDE_FIELD_DESC);
        this.hde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetLong_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hde:");
      if (this.hde == null) {
        sb.append("null");
      } else {
        sb.append(this.hde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class directMultiGet_args implements TBase<directMultiGet_args, directMultiGet_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("directMultiGet_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.LIST, (short)2);

    private String domain;
    private List<byte[]> key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(directMultiGet_args.class, metaDataMap);
    }

    public directMultiGet_args() {
    }

    public directMultiGet_args(
      String domain,
      List<byte[]> key)
    {
      this();
      this.domain = domain;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public directMultiGet_args(directMultiGet_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
      if (other.is_set_key()) {
        List<byte[]> __this__key = new ArrayList<byte[]>();
        for (byte[] other_element : other.key) {
          byte[] temp_binary_element = new byte[other_element.length];
          System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
          __this__key.add(temp_binary_element);
        }
        this.key = __this__key;
      }
    }

    public directMultiGet_args deepCopy() {
      return new directMultiGet_args(this);
    }

    @Deprecated
    public directMultiGet_args clone() {
      return new directMultiGet_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int get_key_size() {
      return (this.key == null) ? 0 : this.key.size();
    }

    public java.util.Iterator<byte[]> get_key_iterator() {
      return (this.key == null) ? null : this.key.iterator();
    }

    public void add_to_key(byte[] elem) {
      if (this.key == null) {
        this.key = new ArrayList<byte[]>();
      }
      this.key.add(elem);
    }

    public List<byte[]> get_key() {
      return this.key;
    }

    public void set_key(List<byte[]> key) {
      this.key = key;
    }

    public void unset_key() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean is_set_key() {
      return this.key != null;
    }

    public void set_key_isSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unset_key();
        } else {
          set_key((List<byte[]>)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      case KEY:
        return get_key();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      case KEY:
        return is_set_key();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof directMultiGet_args)
        return this.equals((directMultiGet_args)that);
      return false;
    }

    public boolean equals(directMultiGet_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_key = true && this.is_set_key();
      boolean that_present_key = true && that.is_set_key();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      boolean present_key = true && (is_set_key());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      return builder.toHashCode();
    }

    public int compareTo(directMultiGet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      directMultiGet_args typedOther = (directMultiGet_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_key()).compareTo(typedOther.is_set_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_key()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // KEY
            if (field.type == TType.LIST) {
              {
                TList _list45 = iprot.readListBegin();
                this.key = new ArrayList<byte[]>(_list45.size);
                for (int _i46 = 0; _i46 < _list45.size; ++_i46)
                {
                  byte[] _elem47;
                  _elem47 = iprot.readBinary();
                  this.key.add(_elem47);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.key.size()));
          for (byte[] _iter48 : this.key)
          {
            oprot.writeBinary(_iter48);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("directMultiGet_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class directMultiGet_result implements TBase<directMultiGet_result, directMultiGet_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("directMultiGet_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField DNFE_FIELD_DESC = new TField("dnfe", TType.STRUCT, (short)1);
    private static final TField DNLE_FIELD_DESC = new TField("dnle", TType.STRUCT, (short)2);
    private static final TField WHE_FIELD_DESC = new TField("whe", TType.STRUCT, (short)3);

    private List<Value> success;
    private DomainNotFoundException dnfe;
    private DomainNotLoadedException dnle;
    private WrongHostException whe;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DNFE((short)1, "dnfe"),
      DNLE((short)2, "dnle"),
      WHE((short)3, "whe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DNFE
            return DNFE;
          case 2: // DNLE
            return DNLE;
          case 3: // WHE
            return WHE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Value.class))));
      tmpMap.put(_Fields.DNFE, new FieldMetaData("dnfe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.DNLE, new FieldMetaData("dnle", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.WHE, new FieldMetaData("whe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(directMultiGet_result.class, metaDataMap);
    }

    public directMultiGet_result() {
    }

    public directMultiGet_result(
      List<Value> success,
      DomainNotFoundException dnfe,
      DomainNotLoadedException dnle,
      WrongHostException whe)
    {
      this();
      this.success = success;
      this.dnfe = dnfe;
      this.dnle = dnle;
      this.whe = whe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public directMultiGet_result(directMultiGet_result other) {
      if (other.is_set_success()) {
        List<Value> __this__success = new ArrayList<Value>();
        for (Value other_element : other.success) {
          __this__success.add(new Value(other_element));
        }
        this.success = __this__success;
      }
      if (other.is_set_dnfe()) {
        this.dnfe = new DomainNotFoundException(other.dnfe);
      }
      if (other.is_set_dnle()) {
        this.dnle = new DomainNotLoadedException(other.dnle);
      }
      if (other.is_set_whe()) {
        this.whe = new WrongHostException(other.whe);
      }
    }

    public directMultiGet_result deepCopy() {
      return new directMultiGet_result(this);
    }

    @Deprecated
    public directMultiGet_result clone() {
      return new directMultiGet_result(this);
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Value> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(Value elem) {
      if (this.success == null) {
        this.success = new ArrayList<Value>();
      }
      this.success.add(elem);
    }

    public List<Value> get_success() {
      return this.success;
    }

    public void set_success(List<Value> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DomainNotFoundException get_dnfe() {
      return this.dnfe;
    }

    public void set_dnfe(DomainNotFoundException dnfe) {
      this.dnfe = dnfe;
    }

    public void unset_dnfe() {
      this.dnfe = null;
    }

    /** Returns true if field dnfe is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnfe() {
      return this.dnfe != null;
    }

    public void set_dnfe_isSet(boolean value) {
      if (!value) {
        this.dnfe = null;
      }
    }

    public DomainNotLoadedException get_dnle() {
      return this.dnle;
    }

    public void set_dnle(DomainNotLoadedException dnle) {
      this.dnle = dnle;
    }

    public void unset_dnle() {
      this.dnle = null;
    }

    /** Returns true if field dnle is set (has been asigned a value) and false otherwise */
    public boolean is_set_dnle() {
      return this.dnle != null;
    }

    public void set_dnle_isSet(boolean value) {
      if (!value) {
        this.dnle = null;
      }
    }

    public WrongHostException get_whe() {
      return this.whe;
    }

    public void set_whe(WrongHostException whe) {
      this.whe = whe;
    }

    public void unset_whe() {
      this.whe = null;
    }

    /** Returns true if field whe is set (has been asigned a value) and false otherwise */
    public boolean is_set_whe() {
      return this.whe != null;
    }

    public void set_whe_isSet(boolean value) {
      if (!value) {
        this.whe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<Value>)value);
        }
        break;

      case DNFE:
        if (value == null) {
          unset_dnfe();
        } else {
          set_dnfe((DomainNotFoundException)value);
        }
        break;

      case DNLE:
        if (value == null) {
          unset_dnle();
        } else {
          set_dnle((DomainNotLoadedException)value);
        }
        break;

      case WHE:
        if (value == null) {
          unset_whe();
        } else {
          set_whe((WrongHostException)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case DNFE:
        return get_dnfe();

      case DNLE:
        return get_dnle();

      case WHE:
        return get_whe();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      case DNFE:
        return is_set_dnfe();
      case DNLE:
        return is_set_dnle();
      case WHE:
        return is_set_whe();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof directMultiGet_result)
        return this.equals((directMultiGet_result)that);
      return false;
    }

    public boolean equals(directMultiGet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dnfe = true && this.is_set_dnfe();
      boolean that_present_dnfe = true && that.is_set_dnfe();
      if (this_present_dnfe || that_present_dnfe) {
        if (!(this_present_dnfe && that_present_dnfe))
          return false;
        if (!this.dnfe.equals(that.dnfe))
          return false;
      }

      boolean this_present_dnle = true && this.is_set_dnle();
      boolean that_present_dnle = true && that.is_set_dnle();
      if (this_present_dnle || that_present_dnle) {
        if (!(this_present_dnle && that_present_dnle))
          return false;
        if (!this.dnle.equals(that.dnle))
          return false;
      }

      boolean this_present_whe = true && this.is_set_whe();
      boolean that_present_whe = true && that.is_set_whe();
      if (this_present_whe || that_present_whe) {
        if (!(this_present_whe && that_present_whe))
          return false;
        if (!this.whe.equals(that.whe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_dnfe = true && (is_set_dnfe());
      builder.append(present_dnfe);
      if (present_dnfe)
        builder.append(dnfe);

      boolean present_dnle = true && (is_set_dnle());
      builder.append(present_dnle);
      if (present_dnle)
        builder.append(dnle);

      boolean present_whe = true && (is_set_whe());
      builder.append(present_whe);
      if (present_whe)
        builder.append(whe);

      return builder.toHashCode();
    }

    public int compareTo(directMultiGet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      directMultiGet_result typedOther = (directMultiGet_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnfe()).compareTo(typedOther.is_set_dnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnfe()) {        lastComparison = TBaseHelper.compareTo(this.dnfe, typedOther.dnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_dnle()).compareTo(typedOther.is_set_dnle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_dnle()) {        lastComparison = TBaseHelper.compareTo(this.dnle, typedOther.dnle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_whe()).compareTo(typedOther.is_set_whe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_whe()) {        lastComparison = TBaseHelper.compareTo(this.whe, typedOther.whe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list49 = iprot.readListBegin();
                this.success = new ArrayList<Value>(_list49.size);
                for (int _i50 = 0; _i50 < _list49.size; ++_i50)
                {
                  Value _elem51;
                  _elem51 = new Value();
                  _elem51.read(iprot);
                  this.success.add(_elem51);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // DNFE
            if (field.type == TType.STRUCT) {
              this.dnfe = new DomainNotFoundException();
              this.dnfe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // DNLE
            if (field.type == TType.STRUCT) {
              this.dnle = new DomainNotLoadedException();
              this.dnle.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // WHE
            if (field.type == TType.STRUCT) {
              this.whe = new WrongHostException();
              this.whe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Value _iter52 : this.success)
          {
            _iter52.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_dnfe()) {
        oprot.writeFieldBegin(DNFE_FIELD_DESC);
        this.dnfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_dnle()) {
        oprot.writeFieldBegin(DNLE_FIELD_DESC);
        this.dnle.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_whe()) {
        oprot.writeFieldBegin(WHE_FIELD_DESC);
        this.whe.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("directMultiGet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnfe:");
      if (this.dnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.dnfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dnle:");
      if (this.dnle == null) {
        sb.append("null");
      } else {
        sb.append(this.dnle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("whe:");
      if (this.whe == null) {
        sb.append("null");
      } else {
        sb.append(this.whe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDomainStatus_args implements TBase<getDomainStatus_args, getDomainStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getDomainStatus_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);

    private String domain;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getDomainStatus_args.class, metaDataMap);
    }

    public getDomainStatus_args() {
    }

    public getDomainStatus_args(
      String domain)
    {
      this();
      this.domain = domain;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomainStatus_args(getDomainStatus_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
    }

    public getDomainStatus_args deepCopy() {
      return new getDomainStatus_args(this);
    }

    @Deprecated
    public getDomainStatus_args clone() {
      return new getDomainStatus_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomainStatus_args)
        return this.equals((getDomainStatus_args)that);
      return false;
    }

    public boolean equals(getDomainStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      return builder.toHashCode();
    }

    public int compareTo(getDomainStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDomainStatus_args typedOther = (getDomainStatus_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomainStatus_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDomainStatus_result implements TBase<getDomainStatus_result, getDomainStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getDomainStatus_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private DomainStatus success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, DomainStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getDomainStatus_result.class, metaDataMap);
    }

    public getDomainStatus_result() {
    }

    public getDomainStatus_result(
      DomainStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomainStatus_result(getDomainStatus_result other) {
      if (other.is_set_success()) {
        this.success = new DomainStatus(other.success);
      }
    }

    public getDomainStatus_result deepCopy() {
      return new getDomainStatus_result(this);
    }

    @Deprecated
    public getDomainStatus_result clone() {
      return new getDomainStatus_result(this);
    }

    public DomainStatus get_success() {
      return this.success;
    }

    public void set_success(DomainStatus success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((DomainStatus)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomainStatus_result)
        return this.equals((getDomainStatus_result)that);
      return false;
    }

    public boolean equals(getDomainStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getDomainStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDomainStatus_result typedOther = (getDomainStatus_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new DomainStatus();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomainStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDomains_args implements TBase<getDomains_args, getDomains_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getDomains_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getDomains_args.class, metaDataMap);
    }

    public getDomains_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomains_args(getDomains_args other) {
    }

    public getDomains_args deepCopy() {
      return new getDomains_args(this);
    }

    @Deprecated
    public getDomains_args clone() {
      return new getDomains_args(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomains_args)
        return this.equals((getDomains_args)that);
      return false;
    }

    public boolean equals(getDomains_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(getDomains_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDomains_args typedOther = (getDomains_args)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomains_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDomains_result implements TBase<getDomains_result, getDomains_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getDomains_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private List<String> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getDomains_result.class, metaDataMap);
    }

    public getDomains_result() {
    }

    public getDomains_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomains_result(getDomains_result other) {
      if (other.is_set_success()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getDomains_result deepCopy() {
      return new getDomains_result(this);
    }

    @Deprecated
    public getDomains_result clone() {
      return new getDomains_result(this);
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> get_success() {
      return this.success;
    }

    public void set_success(List<String> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<String>)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomains_result)
        return this.equals((getDomains_result)that);
      return false;
    }

    public boolean equals(getDomains_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getDomains_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDomains_result typedOther = (getDomains_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list53 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list53.size);
                for (int _i54 = 0; _i54 < _list53.size; ++_i54)
                {
                  String _elem55;
                  _elem55 = iprot.readString();
                  this.success.add(_elem55);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter56 : this.success)
          {
            oprot.writeString(_iter56);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomains_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getStatus_args implements TBase<getStatus_args, getStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getStatus_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getStatus_args.class, metaDataMap);
    }

    public getStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_args(getStatus_args other) {
    }

    public getStatus_args deepCopy() {
      return new getStatus_args(this);
    }

    @Deprecated
    public getStatus_args clone() {
      return new getStatus_args(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatus_args)
        return this.equals((getStatus_args)that);
      return false;
    }

    public boolean equals(getStatus_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(getStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStatus_args typedOther = (getStatus_args)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getStatus_result implements TBase<getStatus_result, getStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getStatus_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private Status success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Status.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getStatus_result.class, metaDataMap);
    }

    public getStatus_result() {
    }

    public getStatus_result(
      Status success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_result(getStatus_result other) {
      if (other.is_set_success()) {
        this.success = new Status(other.success);
      }
    }

    public getStatus_result deepCopy() {
      return new getStatus_result(this);
    }

    @Deprecated
    public getStatus_result clone() {
      return new getStatus_result(this);
    }

    public Status get_success() {
      return this.success;
    }

    public void set_success(Status success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Status)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatus_result)
        return this.equals((getStatus_result)that);
      return false;
    }

    public boolean equals(getStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (is_set_success());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(getStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStatus_result typedOther = (getStatus_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Status();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isFullyLoaded_args implements TBase<isFullyLoaded_args, isFullyLoaded_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("isFullyLoaded_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(isFullyLoaded_args.class, metaDataMap);
    }

    public isFullyLoaded_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isFullyLoaded_args(isFullyLoaded_args other) {
    }

    public isFullyLoaded_args deepCopy() {
      return new isFullyLoaded_args(this);
    }

    @Deprecated
    public isFullyLoaded_args clone() {
      return new isFullyLoaded_args(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isFullyLoaded_args)
        return this.equals((isFullyLoaded_args)that);
      return false;
    }

    public boolean equals(isFullyLoaded_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(isFullyLoaded_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isFullyLoaded_args typedOther = (isFullyLoaded_args)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isFullyLoaded_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isFullyLoaded_result implements TBase<isFullyLoaded_result, isFullyLoaded_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("isFullyLoaded_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);

    private boolean success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(isFullyLoaded_result.class, metaDataMap);
    }

    public isFullyLoaded_result() {
    }

    public isFullyLoaded_result(
      boolean success)
    {
      this();
      this.success = success;
      set_success_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isFullyLoaded_result(isFullyLoaded_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public isFullyLoaded_result deepCopy() {
      return new isFullyLoaded_result(this);
    }

    @Deprecated
    public isFullyLoaded_result clone() {
      return new isFullyLoaded_result(this);
    }

    public boolean is_success() {
      return this.success;
    }

    public void set_success(boolean success) {
      this.success = success;
      set_success_isSet(true);
    }

    public void unset_success() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void set_success_isSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Boolean)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Boolean(is_success());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isFullyLoaded_result)
        return this.equals((isFullyLoaded_result)that);
      return false;
    }

    public boolean equals(isFullyLoaded_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(isFullyLoaded_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isFullyLoaded_result typedOther = (isFullyLoaded_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              set_success_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isFullyLoaded_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isUpdating_args implements TBase<isUpdating_args, isUpdating_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("isUpdating_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(isUpdating_args.class, metaDataMap);
    }

    public isUpdating_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isUpdating_args(isUpdating_args other) {
    }

    public isUpdating_args deepCopy() {
      return new isUpdating_args(this);
    }

    @Deprecated
    public isUpdating_args clone() {
      return new isUpdating_args(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isUpdating_args)
        return this.equals((isUpdating_args)that);
      return false;
    }

    public boolean equals(isUpdating_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(isUpdating_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isUpdating_args typedOther = (isUpdating_args)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isUpdating_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isUpdating_result implements TBase<isUpdating_result, isUpdating_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("isUpdating_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);

    private boolean success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(isUpdating_result.class, metaDataMap);
    }

    public isUpdating_result() {
    }

    public isUpdating_result(
      boolean success)
    {
      this();
      this.success = success;
      set_success_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isUpdating_result(isUpdating_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public isUpdating_result deepCopy() {
      return new isUpdating_result(this);
    }

    @Deprecated
    public isUpdating_result clone() {
      return new isUpdating_result(this);
    }

    public boolean is_success() {
      return this.success;
    }

    public void set_success(boolean success) {
      this.success = success;
      set_success_isSet(true);
    }

    public void unset_success() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void set_success_isSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Boolean)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Boolean(is_success());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isUpdating_result)
        return this.equals((isUpdating_result)that);
      return false;
    }

    public boolean equals(isUpdating_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(isUpdating_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isUpdating_result typedOther = (isUpdating_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              set_success_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isUpdating_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateAll_args implements TBase<updateAll_args, updateAll_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateAll_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateAll_args.class, metaDataMap);
    }

    public updateAll_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAll_args(updateAll_args other) {
    }

    public updateAll_args deepCopy() {
      return new updateAll_args(this);
    }

    @Deprecated
    public updateAll_args clone() {
      return new updateAll_args(this);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAll_args)
        return this.equals((updateAll_args)that);
      return false;
    }

    public boolean equals(updateAll_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      return builder.toHashCode();
    }

    public int compareTo(updateAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAll_args typedOther = (updateAll_args)other;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAll_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateAll_result implements TBase<updateAll_result, updateAll_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateAll_result");

    private static final TField ICE_FIELD_DESC = new TField("ice", TType.STRUCT, (short)1);

    private InvalidConfigurationException ice;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ICE((short)1, "ice");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ICE
            return ICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ICE, new FieldMetaData("ice", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateAll_result.class, metaDataMap);
    }

    public updateAll_result() {
    }

    public updateAll_result(
      InvalidConfigurationException ice)
    {
      this();
      this.ice = ice;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAll_result(updateAll_result other) {
      if (other.is_set_ice()) {
        this.ice = new InvalidConfigurationException(other.ice);
      }
    }

    public updateAll_result deepCopy() {
      return new updateAll_result(this);
    }

    @Deprecated
    public updateAll_result clone() {
      return new updateAll_result(this);
    }

    public InvalidConfigurationException get_ice() {
      return this.ice;
    }

    public void set_ice(InvalidConfigurationException ice) {
      this.ice = ice;
    }

    public void unset_ice() {
      this.ice = null;
    }

    /** Returns true if field ice is set (has been asigned a value) and false otherwise */
    public boolean is_set_ice() {
      return this.ice != null;
    }

    public void set_ice_isSet(boolean value) {
      if (!value) {
        this.ice = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ICE:
        if (value == null) {
          unset_ice();
        } else {
          set_ice((InvalidConfigurationException)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ICE:
        return get_ice();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case ICE:
        return is_set_ice();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAll_result)
        return this.equals((updateAll_result)that);
      return false;
    }

    public boolean equals(updateAll_result that) {
      if (that == null)
        return false;

      boolean this_present_ice = true && this.is_set_ice();
      boolean that_present_ice = true && that.is_set_ice();
      if (this_present_ice || that_present_ice) {
        if (!(this_present_ice && that_present_ice))
          return false;
        if (!this.ice.equals(that.ice))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ice = true && (is_set_ice());
      builder.append(present_ice);
      if (present_ice)
        builder.append(ice);

      return builder.toHashCode();
    }

    public int compareTo(updateAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAll_result typedOther = (updateAll_result)other;

      lastComparison = Boolean.valueOf(is_set_ice()).compareTo(typedOther.is_set_ice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ice()) {        lastComparison = TBaseHelper.compareTo(this.ice, typedOther.ice);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ICE
            if (field.type == TType.STRUCT) {
              this.ice = new InvalidConfigurationException();
              this.ice.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ice()) {
        oprot.writeFieldBegin(ICE_FIELD_DESC);
        this.ice.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAll_result(");
      boolean first = true;

      sb.append("ice:");
      if (this.ice == null) {
        sb.append("null");
      } else {
        sb.append(this.ice);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class update_args implements TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("update_args");

    private static final TField DOMAIN_FIELD_DESC = new TField("domain", TType.STRING, (short)1);

    private String domain;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOMAIN((short)1, "domain");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new FieldMetaData("domain", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
    }

    public update_args() {
    }

    public update_args(
      String domain)
    {
      this();
      this.domain = domain;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_args(update_args other) {
      if (other.is_set_domain()) {
        this.domain = other.domain;
      }
    }

    public update_args deepCopy() {
      return new update_args(this);
    }

    @Deprecated
    public update_args clone() {
      return new update_args(this);
    }

    public String get_domain() {
      return this.domain;
    }

    public void set_domain(String domain) {
      this.domain = domain;
    }

    public void unset_domain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been asigned a value) and false otherwise */
    public boolean is_set_domain() {
      return this.domain != null;
    }

    public void set_domain_isSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unset_domain();
        } else {
          set_domain((String)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return get_domain();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case DOMAIN:
        return is_set_domain();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_domain = true && this.is_set_domain();
      boolean that_present_domain = true && that.is_set_domain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_domain = true && (is_set_domain());
      builder.append(present_domain);
      if (present_domain)
        builder.append(domain);

      return builder.toHashCode();
    }

    public int compareTo(update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      update_args typedOther = (update_args)other;

      lastComparison = Boolean.valueOf(is_set_domain()).compareTo(typedOther.is_set_domain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_domain()) {        lastComparison = TBaseHelper.compareTo(this.domain, typedOther.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOMAIN
            if (field.type == TType.STRING) {
              this.domain = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(this.domain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class update_result implements TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("update_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);

    private boolean success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
    }

    public update_result() {
    }

    public update_result(
      boolean success)
    {
      this();
      this.success = success;
      set_success_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_result(update_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public update_result deepCopy() {
      return new update_result(this);
    }

    @Deprecated
    public update_result clone() {
      return new update_result(this);
    }

    public boolean is_success() {
      return this.success;
    }

    public void set_success(boolean success) {
      this.success = success;
      set_success_isSet(true);
    }

    public void unset_success() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void set_success_isSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Boolean)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Boolean(is_success());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    public int compareTo(update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      update_result typedOther = (update_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              set_success_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}

