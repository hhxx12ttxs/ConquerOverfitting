package bestelsnel.views;

import bestelsnel.Config;
import bestelsnel.PrintUtilities;
import bestelsnel.Session;
import bestelsnel.models.Model;
import bestelsnel.views.components.BSButton;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.ListIterator;
import javax.swing.*;

/**
 * The main view which contains and handles the chrome of the application.
 */
public class MainView extends View
{
	/**
	 * The actions which can be generated by the main view to be handle by the
	 * main controller.
	 */
	public enum ACTIONS
	{
		/**
		 * The action causing the application to exit.
		 */
		EXIT_ACTION,
		/**
		 * The action causing the application to go back to the previous view.
		 */
		PREVIOUS_ACTION,
		/**
		 * The action causing the application to go forward to the next view.
		 */
		NEXT_ACTION,
		/**
		 * The action causing the application to go to the home view.
		 */
		HOME_ACTION,
		/**
		 * The action causing the application to go to the articles view.
		 */
		ARTICLES_ACTION,
		/**
		 * The action causing the application to go to the orders view.
		 */
		ORDERS_ACTION,
		/**
		 * The action causing the application to go to the employees view.
		 */
		EMPLOYEES_ACTION,
		/**
		 * The action causing the application to go to the customers view.
		 */
		CUSTOMERS_ACTION,
		/**
		 * The action causing the application to display the about dialog
		 * (to set it to visible.)
		 */
		ABOUT_ACTION
	};
	
	private int historySize;
	private Session session;
	private JFrame window;
	private View activeView;
	private ArrayList<View> previousViews, nextViews;
	private JMenu fileMenu, editMenu, viewMenu, helpMenu;
	private JMenuItem exitItem, previousItem, nextItem, homeItem,
			articlesItem, ordersItem, employeesItem, customersItem,
			aboutItem, printItem;
	private BSButton previousButton, nextButton, printButton;
	private JPopupMenu.Separator menuSeperator;
	private JToolBar.Separator navigationSeparator, printSeparator;
	private CellRendererPane cellRendererPane;

	/**
	 * Construct the main view.
	 * @param session The session object indicating if the user has access
	 * to the program or not.
	 */
	public MainView(Session session)
	{
		super("BestelSneller", false);

		int iconIndex;
		String[] iconPaths;
		ArrayList<Image> iconsList;

		this.historySize = Integer.parseInt(
				Config.getInstance().getString("view.history.size"));

		this.session = session;
		this.window = new JFrame();

		this.window.setSize(800, 600);
		this.window.setMinimumSize(new Dimension(640, 480));

		// Prepare an array of icon paths
		iconPaths = new String[]
		{
			"/icons/app-16.png",
			"/icons/app-32.png",
			"/icons/app-48.png",
			"/icons/app-64.png",
			"/icons/app-96.png",
			"/icons/app-128.png"
		};

		// Load all icon files into an image list
		iconsList = new ArrayList<Image>();

		for (iconIndex = 0; iconIndex < iconPaths.length; iconIndex++)
		{
			iconsList.add(new ImageIcon(
					MainView.class.getResource(iconPaths[iconIndex])).getImage());
		}

		// Set the window title and images
		this.window.setTitle(this.title);
		this.window.setIconImages(iconsList);

		this.window.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		this.window.setLocationRelativeTo(null);

		// Cause the unified toolbar rendering to be enabled on Mac OS X
		this.window.getRootPane().putClientProperty(
				"apple.awt.brushMetalLook", Boolean.TRUE);

		this.window.addWindowListener(new WindowAdapter()
		{
			public void windowClosing(WindowEvent event)
			{
				if (activeView.leave())
				{
					setChanged();
					notifyObservers(MainView.ACTIONS.EXIT_ACTION);
				}
			}
		});

		this.window.add(this.panel);
		this.panel.setLayout(new BorderLayout());

		// This is required for printing
		this.cellRendererPane = new CellRendererPane();
		this.panel.add(this.cellRendererPane);

		this.linkMenuElements();
		this.linkToolBarElements();

		this.menuBar.integrate(null);
		this.toolBar.integrate(null);

		this.window.setJMenuBar(this.menuBar);
		this.window.add(this.toolBar, BorderLayout.NORTH);

		this.toolBar.setFloatable(false);

		this.previousViews = new ArrayList<View>();
		this.nextViews = new ArrayList<View>();

		this.window.setVisible(true);
	}

	protected void createMenuElements()
	{
		Toolkit defaultToolkit;
		defaultToolkit = Toolkit.getDefaultToolkit();

		// File
		this.fileMenu = new JMenu(
				LANGUAGE_STRINGS.getProperty("main.file"));

		this.printItem = new JMenuItem(LANGUAGE_STRINGS.getProperty("main.print"));

		this.menuSeperator = new JPopupMenu.Separator();

		this.exitItem = new JMenuItem(
				LANGUAGE_STRINGS.getProperty("main.exit"));

		this.printItem.addActionListener(this);
		this.exitItem.addActionListener(this);

		this.printItem.setAccelerator(KeyStroke.getKeyStroke(
				KeyEvent.VK_P, defaultToolkit.getMenuShortcutKeyMask()));

		// Edit
		this.editMenu = new JMenu(LANGUAGE_STRINGS.getProperty("main.edit"));

		// View
		this.viewMenu = new JMenu(
				LANGUAGE_STRINGS.getProperty("main.view"));

		this.previousItem = new JMenuItem(
				LANGUAGE_STRINGS.getProperty("main.previous"));
		this.nextItem = new JMenuItem(
				LANGUAGE_STRINGS.getProperty("main.next"));

		this.homeItem = new JMenuItem(
				LANGUAGE_STRINGS.getProperty("home.singular"));
		this.articlesItem = new JMenuItem(
				LANGUAGE_STRINGS.getProperty("article.plural"));
		this.ordersItem = new JMenuItem(
				LANGUAGE_STRINGS.getProperty("order.plural"));
		this.employeesItem = new JMenuItem(
				LANGUAGE_STRINGS.getProperty("employee.plural"));
		this.customersItem = new JMenuItem(
				LANGUAGE_STRINGS.getProperty("customer.plural"));

		this.previousItem.addActionListener(this);
		this.nextItem.addActionListener(this);
		this.homeItem.addActionListener(this);
		this.articlesItem.addActionListener(this);
		this.ordersItem.addActionListener(this);
		this.employeesItem.addActionListener(this);
		this.customersItem.addActionListener(this);

		this.previousItem.setAccelerator(KeyStroke.getKeyStroke(
				KeyEvent.VK_LEFT, defaultToolkit.getMenuShortcutKeyMask()));
		this.nextItem.setAccelerator(KeyStroke.getKeyStroke(
				KeyEvent.VK_RIGHT, defaultToolkit.getMenuShortcutKeyMask()));

		this.homeItem.setAccelerator(KeyStroke.getKeyStroke(
				KeyEvent.VK_H, (defaultToolkit.getMenuShortcutKeyMask() | ActionEvent.SHIFT_MASK)));
		this.articlesItem.setAccelerator(KeyStroke.getKeyStroke(
				KeyEvent.VK_A, (defaultToolkit.getMenuShortcutKeyMask() | ActionEvent.SHIFT_MASK)));
		this.ordersItem.setAccelerator(KeyStroke.getKeyStroke(
				KeyEvent.VK_O, (defaultToolkit.getMenuShortcutKeyMask() | ActionEvent.SHIFT_MASK)));
		this.employeesItem.setAccelerator(KeyStroke.getKeyStroke(
				KeyEvent.VK_E, (defaultToolkit.getMenuShortcutKeyMask() | ActionEvent.SHIFT_MASK)));
		this.customersItem.setAccelerator(KeyStroke.getKeyStroke(
				KeyEvent.VK_C, (defaultToolkit.getMenuShortcutKeyMask() | ActionEvent.SHIFT_MASK)));

		// Help
		this.helpMenu = new JMenu(
				LANGUAGE_STRINGS.getProperty("main.help"));

		this.aboutItem = new JMenuItem(
				LANGUAGE_STRINGS.getProperty("about.singular"));

		this.aboutItem.addActionListener(this);
	}

	protected void linkMenuElements()
	{
		// File
		this.fileMenu.add(this.printItem);
		this.fileMenu.add(this.menuSeperator);
		this.fileMenu.add(this.exitItem);
		this.menuBar.add(this.fileMenu);

		// Edit
		this.menuBar.add(this.editMenu);

		// Location
		this.viewMenu.add(this.previousItem);
		this.viewMenu.add(this.nextItem);

		this.viewMenu.addSeparator();

		this.viewMenu.add(this.homeItem);
		this.viewMenu.add(this.articlesItem);
		this.viewMenu.add(this.ordersItem);
		this.viewMenu.add(this.employeesItem);
		this.viewMenu.add(this.customersItem);

		this.menuBar.add(this.viewMenu);

		// Help
		this.helpMenu.add(this.aboutItem);
		this.menuBar.add(this.helpMenu);
	}

	protected void createToolBarElements()
	{
		this.previousButton = new BSButton(
				"/icons/toolbar-arrow-left-normal.png",
				"/icons/toolbar-arrow-left-pressed.png",
				"/icons/toolbar-arrow-left-disabled.png");
		this.nextButton = new BSButton(
				"/icons/toolbar-arrow-right-normal.png",
				"/icons/toolbar-arrow-right-pressed.png",
				"/icons/toolbar-arrow-right-disabled.png");

		this.printButton = new BSButton(
				"/icons/toolbar-print-normal.png",
				"/icons/toolbar-print-pressed.png",
				"/icons/toolbar-print-disabled.png");

		this.previousButton.setToolTipText(
				LANGUAGE_STRINGS.getProperty("main.previous"));
		this.nextButton.setToolTipText(
				LANGUAGE_STRINGS.getProperty("main.next"));
		this.printButton.setToolTipText(
				LANGUAGE_STRINGS.getProperty("main.print"));

		this.navigationSeparator = new JToolBar.Separator();
		this.printSeparator = new JToolBar.Separator();

		this.previousButton.addActionListener(this);
		this.nextButton.addActionListener(this);
		this.printButton.addActionListener(this);
	}

	protected void linkToolBarElements()
	{
		this.toolBar.add(this.previousButton);
		this.toolBar.add(this.nextButton);
		this.toolBar.add(this.navigationSeparator);
		this.toolBar.add(this.printButton);
		this.toolBar.add(this.printSeparator);

	}

	private void changeView(View view)
	{
		if (this.activeView != null)
		{
			this.panel.remove(this.activeView.panel);

			this.activeView.linkMenuElements();
			this.activeView.linkToolBarElements();
		}

		view.linkMenuElements();
		view.linkToolBarElements();

		this.window.setTitle(view.title + " - " + this.title); // Use String.format here

		this.activeView = view;
		this.activeView.update();

		this.panel.add(this.activeView.panel);

		this.menuBar.integrate(this.activeView.menuBar);
		this.toolBar.integrate(this.activeView.toolBar);

		this.menuBar.repaint();
		this.toolBar.repaint();

		this.update();

		this.panel.revalidate();
		this.panel.repaint();
	}

	private boolean isLeaveAllowed()
	{
		if (this.activeView != null)
		{
			return this.activeView.leave();
		}

		return true;
	}

	/**
	 * Changes the active view to another view.
	 * @param view The view which the active view is changed to.
	 */
	public void setActiveView(View view)
	{
		if (this.isLeaveAllowed())
		{
			if (this.activeView != null)
			{
				this.previousViews.add(this.activeView);

				// If we are out of bounds, remove an element
				if (this.previousViews.size() > this.historySize)
				{
					this.previousViews.remove(0);
				}
			}

			this.nextViews = new ArrayList<View>();

			this.changeView(view);
			this.updateHistoryInterface();
		}
	}

	/**
	 * Reverts the the previous view if there is any.
	 */
	public void gotoPreviousView()
	{
		if (this.isLeaveAllowed())
		{
			if (!this.previousViews.isEmpty())
			{
				this.nextViews.add(0, this.activeView);

				// If we are out of bounds, remove an element
				if (this.nextViews.size() > this.historySize)
				{
					this.nextViews.remove((this.nextViews.size() - 1));
				}

				this.changeView(this.previousViews.get(
						(this.previousViews.size() - 1)));
				this.previousViews.remove((this.previousViews.size() - 1));

				this.updateHistoryInterface();
			}
		}
	}

	/**
	 * Continues to the next view if there is any.
	 */
	public void gotoNextView()
	{
		if (this.isLeaveAllowed())
		{
			if (!this.nextViews.isEmpty())
			{
				this.previousViews.add(this.activeView);

				// If we are out of bounds, remove an element
				if (this.previousViews.size() > this.historySize)
				{
					this.previousViews.remove(0);
				}

				this.changeView(this.nextViews.get(0));
				this.nextViews.remove(0);

				this.updateHistoryInterface();
			}
		}
	}

	/**
	 * Clears the view history.
	 */
	public void clearPreviousViews()
	{
		this.previousViews = new ArrayList<View>();
		this.updateHistoryInterface();
	}

	/*
	 * Clears any views from the history that would become invalid if the 
	 * models in the given list were to be deleted.
	 */
	public void clearViews(ArrayList<Model> modelList)
	{
		ListIterator<View> viewIterator;
		View currentView;

		// First clear the previous views
		viewIterator = this.previousViews.listIterator();

		while (viewIterator.hasNext())
		{
			currentView = viewIterator.next();

			if ((currentView instanceof SingleView)
				&& (modelList.indexOf(((SingleView) currentView).getModel()) != -1))
			{
				// Remove the view
				viewIterator.remove();
			}
		}

		// Then clear the next views
		viewIterator = this.nextViews.listIterator();

		while (viewIterator.hasNext())
		{
			currentView = viewIterator.next();

			if ((currentView instanceof SingleView)
				&& (modelList.indexOf(((SingleView) currentView).getModel()) != -1))
			{
				// Remove the view
				viewIterator.remove();
			}
		}

		// Update the view interface to reflect any possible changes
		this.updateHistoryInterface();
	}

	/**
	 * Returns the active view or null if there is none yet.
	 * @return The active view.
	 */
	public View getActiveView()
	{
		return this.activeView;
	}

	/**
	 * Returns the window surrounding this view.
	 * @return The window surrounding this view.
	 */
	public JFrame getWindow()
	{
		return this.window;
	}

	public void actionPerformed(ActionEvent event)
	{
		Object argument;
		argument = null;

		if (event.getSource() == this.exitItem)
		{
			if (this.activeView.leave())
			{
				argument = MainView.ACTIONS.EXIT_ACTION;
			}
		}
		else if ((event.getSource() == this.previousItem)
				 || (event.getSource() == this.previousButton))
		{
			argument = MainView.ACTIONS.PREVIOUS_ACTION;
		}
		else if ((event.getSource() == this.nextItem)
				 || (event.getSource() == this.nextButton))
		{
			argument = MainView.ACTIONS.NEXT_ACTION;
		}
		else if (event.getSource() == this.homeItem)
		{
			argument = MainView.ACTIONS.HOME_ACTION;
		}
		else if (event.getSource() == this.articlesItem)
		{
			argument = MainView.ACTIONS.ARTICLES_ACTION;
		}
		else if (event.getSource() == this.ordersItem)
		{
			argument = MainView.ACTIONS.ORDERS_ACTION;
		}
		else if (event.getSource() == this.employeesItem)
		{
			argument = MainView.ACTIONS.EMPLOYEES_ACTION;
		}
		else if (event.getSource() == this.customersItem)
		{
			argument = MainView.ACTIONS.CUSTOMERS_ACTION;
		}
		else if (event.getSource() == this.aboutItem)
		{
			argument = MainView.ACTIONS.ABOUT_ACTION;
		}
		else if ((event.getSource() == this.printItem)
				 || (event.getSource() == this.printButton))
		{
			if (this.activeView != null && this.activeView.isPrintable())
			{
				PrintUtilities.printComponent(this.activeView.getPrintComponent(),
											  this.activeView.title,
											  this.cellRendererPane);
			}
		}

		if (argument != null)
		{
			this.setChanged();
			this.notifyObservers(argument);
		}
	}

	private void updateHistoryInterface()
	{
		// Enable or disable the previous and next buttons and menu items
		// to indicate to the user wether there are previous or next views
		this.previousItem.setEnabled(!this.previousViews.isEmpty());
		this.previousButton.setEnabled(!this.previousViews.isEmpty());

		this.nextItem.setEnabled(!this.nextViews.isEmpty());
		this.nextButton.setEnabled(!this.nextViews.isEmpty());
	}

	public void update()
	{
		this.printItem.setEnabled(((this.activeView != null)
								   ? this.activeView.isPrintable() : false));
		this.printButton.setEnabled(((this.activeView != null)
									 ? this.activeView.isPrintable() : false));

		if (this.session.getActive())
		{
			this.viewMenu.setEnabled(true);
			this.previousButton.setEnabled(true);
			this.nextButton.setEnabled(true);
		}
		else
		{
			this.viewMenu.setEnabled(false);
			this.previousButton.setEnabled(false);
			this.nextButton.setEnabled(false);
		}
	}
}

