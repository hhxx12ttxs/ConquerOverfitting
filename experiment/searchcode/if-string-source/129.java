package ru.emms.codemeter.metrics.calculators;

import com.intellij.openapi.diagnostic.Logger;
import com.intellij.psi.PsiComment;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import ru.emms.codemeter.metrics.MetricUtils;

import java.util.Collection;

/**
 * Created by IntelliJ IDEA.
 * User: dima.sam
 * Date: 06.08.2010
 * Time: 12:49:50
 * ?????????? ??????? "?????????? ????? ???? ??? ???????????? ? ?????? ?????"
 */
public class SourceInstructionsMetricCalculator
    implements MetricCalculator {

    private Logger log = Logger.getInstance(getClass().getName());
    private static final String NAME = "SI";

    /**
     * ?????????? ?????????? ????? ??? ???????????? ? ?????? ????? ?????? ??????? sources
     *
     * @param sources ????????? ??????????
     */
    @Override
    public Long calculate(Collection<PsiFile> sources)
        throws IllegalArgumentException {
        Long lineCount = 0L;
        //???? ?? ?????????? ??????
        for (PsiElement source : sources) {
            lineCount += calculateSourceInstraction(source);
        }
        log.debug("?????????? ????? ???? ??? ???????????? = " + lineCount);
        return lineCount;
    }

    /**
     * ????? ????? ??? ???????????? ? ?????? ????? ? ????????? ????????
     *
     * @param element ????????????? ??????? ?????????
     * @return ????? ????? ??? ???????????? ? ?????? ?????
     */
    private int calculateSourceInstraction(PsiElement element) {
        PsiElement modifiedElement = element.copy();
        deleteComments(modifiedElement);
        String modifiedSource = modifiedElement.getText();
        modifiedSource = removeEmptyLines(modifiedSource);
        return MetricUtils.linesCount(modifiedSource);
    }

    /**
     * ??????????? ???????? ???? ????????? ???????????? ?? ????????
     *
     * @param element ?????????????? ???????.
     */
    private void deleteComments(PsiElement element) {
        if (element instanceof PsiComment) {
            element.delete();
        } else {
            for (PsiElement child : element.getChildren()) {
                deleteComments(child);
            }
        }
    }

    /**
     * ???????? ?????? ?????
     *
     * @param source ???????? ??????
     * @return ???????? ??? ?????? ?????
     */
    private static String removeEmptyLines(String source) {
        return source.replaceAll("\n[\\s]*\n", "\n").trim();
    }

    public String toString() {
        return NAME;
    }
}

