/**                 ***COPYRIGHT STARTS HERE***
 *  BoutTime - the wrestling tournament administrator.
 *
 *  Copyright (C) 2009  Jeffrey K. Rutt
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *                  ***COPYRIGHT ENDS HERE***                                */

package bouttime.wizard.fileinput.text;

import bouttime.fileinput.TextFileInputConfig;
import java.awt.Component;
import org.netbeans.spi.wizard.WizardPage;

/**
 * This class implements a wizard page to enter the field separator/delimiter
 * in the input text file.
 */
public class FieldSeparatorSelector extends WizardPage {

    /** Creates new form FieldSeparatorSelector */
    public FieldSeparatorSelector(TextFileInputConfig config) {
        initComponents();
        initValues(config);
    }

    public static final String getDescription() {
        return "Enter field separator";
    }

    /**
     * Validate the contents of the input.
     * The user must provide a field separator character.
     * @param component
     * @param o
     * @return Help message or null (if contents are valid).
     */
    @Override
    protected String validateContents (Component component, Object o) {
        if (fieldSeparator.getText().isEmpty()) {
            return "You must provide a field separator character";
        } else {
            return null;
        }
    }

    /**
     * Initialize the values of the graphical components.
     * @param config FileInputConfig object containing the current configuration.
     */
    private void initValues(TextFileInputConfig config) {
        String s = config.getFieldSeparator();
        if (s != null) {
            fieldSeparator.setText(s);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        header1Label = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        separatorLabel = new javax.swing.JLabel();
        fieldSeparator = new javax.swing.JTextField();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(bouttime.mainview.BoutTimeApp.class).getContext().getResourceMap(FieldSeparatorSelector.class);
        header1Label.setText(resourceMap.getString("header1Label.text")); // NOI18N
        header1Label.setName("header1Label"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        separatorLabel.setText(resourceMap.getString("separatorLabel.text")); // NOI18N
        separatorLabel.setName("separatorLabel"); // NOI18N

        fieldSeparator.setText(resourceMap.getString("fieldSeparator.text")); // NOI18N
        fieldSeparator.setName("fieldSeparator"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(header1Label)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(separatorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(header1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(separatorLabel)
                    .addComponent(fieldSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(170, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldSeparator;
    private javax.swing.JLabel header1Label;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel separatorLabel;
    // End of variables declaration//GEN-END:variables

}

