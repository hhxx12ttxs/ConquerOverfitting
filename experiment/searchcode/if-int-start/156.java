/* =================================================================
Copyright (C) 2009 ADV/web-engineering All rights reserved.

This file is part of Mozart.

Mozart is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Mozart is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see <http://www.gnu.org/licenses/>.

Mozart
http://www.mozartcms.ru
================================================================= */
// $Id: Calendar.java 1106 2009-06-03 07:32:17Z vic $

package ru.adv.util.calendar;

import ru.adv.util.InvalidPatternException;

import java.text.DecimalFormat;
import java.util.*;

/**
 *
 * ????? ???????????? ??? ??????????? ????????????? ????????? ??????????
 * ??? ????????? ??? ? ?????? ????????? ?? ????????? ???????.
 * ???????? ???????? ???????? ??????????? - ????????? ?????? ?????????.
 * ?????????? ??????? ????????? ??????????? ??????????? ????.
 * ?????????? ??????? ???????? ?????????, ? ?????????? (????????)
 * ?????????? ? ????????.
 * ??????? ???????? ???????????? ??? ???????? ????????? ?? N ?????????? (???????????? ????)
 * ?? ????????? ??????????? ??????????? ????.<p>
 * ????? ???????????? ??? ????????????? ? ???????? ???????? ?????????? ??????? ??????????.
 * ?????? ??????? ?????? ?????????????? ?????? onXXX() ??? ????????? ????????? ????????????????<p>
 * ?????? ?????????????:
 * <pre>
 * import java.util.Date;
 * import ru.adv.util.calendar.*;
 *
 * public class ConcreteCalendar extends Calendar {
 *
 * 	ConcreteCalendar(String pattern) throws InvalidPatternException {
 * 		super(pattern);
 * 	}
 *
 *  	public static void main(String[] args) {
 * 		try {
 *  			ConcreteCalendar c = new ConcreteCalendar("* * 1");
 *  			c.setSibling(0, 0);
 *  			c.process();
 * 		}
 * 		catch (Exception e) {
 * 			System.err.println(e);
 * 		}
 *  	}
 *
 *  	public void onDay(Date d) {
 *  		System.out.println("Yet another day " + d);
 *  	}
 *
 * }
 * </pre>
 * @see ru.adv.util.InvalidPatternException
 * @see ru.adv.util.calendar.BadUsageException
 */
public abstract class Calendar {
	protected DecimalFormat _twoDigitsFormatter;

	private boolean _firstMonday;
	private Integer _start = null; // ???????????? ???????? ? ??????? ?? ???????? ?????????
	private Integer _end = null;   // ???????????? ???????? ? ??????? ?? ???????? ?????????
	private int _prev, _next; // prev & next siblings : default = 0
	private int _current; // number of current interval
	private Date _currentDate = new Date(); // current date

	private ArrayList _dayList = new ArrayList();
	private ArrayList _monthList = new ArrayList();
	private ArrayList _wdayList = new ArrayList();
    private ArrayList _intervals;
//	private Interval[] _intervals;

	public Calendar() throws InvalidPatternException {
		this("dont use default constructor");
	}

	/**
	 * ??????? ?????????.
	 * @param pattern ????????? ?????? ?????????
	 * ?????? ???? <pre> "(*|dd[,dd ..]) (*|mm[,mm ..]) (*|ww[,ww ..])"</pre>
	 * ??? dd - ???? ??????, mm - ????? ??????, ww - ???? ??????
	 * ?????? ????????? ?????? ?????????? ????????? (?? ????).<br>
	 * ??????: "1 1,7 *" - ????????????? ?????? 1 ??? ? 1 ???? ??????? ????
	 * (???????? ???????? ??? ??? ?????? ????) <br>
	 * ??????: "* * 1" - ????????????? ?????? "?????? ???????????"
	 * (???????? ???????? ??? ??? ?????? ??????? ? ????????????)<br>
	 * ??????????: ????? ??? ?????? [1-7] 7-???????????
	 * @throws ru.adv.util.InvalidPatternException ? ?????? ????????????? ????????? ????????
	 */
	public Calendar(String pattern) throws InvalidPatternException {
		parse(pattern);
	}

	/**
	 * ?????????????, ??? ?????? ????? ?????? ???????? ???????????, ????? ???????????.
	 * @param firstMonday <b>true</b> - ?????? ?????????? ? ????????????
	 */
	public void setFirstMonday(boolean firstMonday) {
		_firstMonday = firstMonday;
	}

	/**
	 * ????????????? ??????????? ?? <i>???????????????</i> ?????????.
	 * ????????? ????? ????????? ?????? ?????? ?????????, ?? ??????????
	 * ???????????? ??? -start+end+1.
	 * ?????? ??????? ?? ????????? ??????????? ??????????? ????
	 * ??????????? ?? ????????? ???.<br>
	 * ????????: interval="01 01 *", start=-2, end=3,
	 * ????????? ????????? ? ??????? ?????????? ????? ????????:
	 * 01.01.1999, 01.01.2000, 01.01.2001^, 01.01.2002, 01.01.2003, 01.01.2004
	 * 01.01.2001^ - ??????? ????? ? ????? ????????? ??????? ????????
	 * @param start ???????????? ???????? ? ??????? ?? ???????? ?????????
	 * @param end ???????????? ???????? ? ??????? ?? ???????? ?????????
	 * @throws ru.adv.util.calendar.BadUsageException ???? start ?????? end
	 * @see #setLimit(Integer,Integer)
	 */
	public void setLimit(int start, int end) throws BadUsageException {
		setLimit(new Integer(start), new Integer(end));
	}

	/**
	 * ?????????????/??????? ??????????? ?? <i>???????????????</i> ?????????.
	 * ????????? ????? ????????? ?????? ?????? ?????????, ?? ??????????
	 * ???????????? ??? -start+end+1.
	 * ?????? ??????? ?? ????????? ??????????? ??????????? ????
	 * ??????????? ?? ????????? ???.<br>
	 * @param start ???????????? ???????? ? ??????? ?? ???????? ?????????,
	 *        ???? null, ?? ??????????? ???
	 * @param end ???????????? ???????? ? ??????? ?? ???????? ?????????,
	 *        ???? null, ?? ??????????? ???
	 * @throws ru.adv.util.calendar.BadUsageException ???? start ?????? end
	 * @see #setLimit(Integer,Integer)
	 */
	public void setLimit(Integer start, Integer end) throws BadUsageException {
		if (start != null && end != null) {
			// ???????? ????? start ??? ?????? end
			if (start.compareTo(end) > 0) { // start > end
				throw new BadUsageException("Invalid limits: " + start + " " + end);
			}
		}
		_start = start;
		_end = end;
		_intervals = null;
	}

	/**
	 * ?????????, ??? position >= start
	 * @return false, ?????? ??? ????????????? ???????????
	 */
	private boolean inStartLimit(int position) {
		if (_start == null) {
			return true;
		}
		else if (position >= _start.intValue()) {
			return true;
		}
		return false;
	}

	/**
	 * ?????????, ??? position <= end
	 * @return false, ?????? ??? ????????????? ???????????
	 */
	private boolean inEndLimit(int position) {
		if (_end == null) {
			return true;
		}
		else if (position <= _end.intValue()) {
			return true;
		}
		return false;
	}

	/**
	 * ????????? ??? position ????????? ? ???????????? start|end limit
	 */
	private boolean inLimit(int position) {
		return inStartLimit(position) && inEndLimit(position);
	}

	/**
	 * ?????????? ????? ?? ?????????? ???????????? <b>setLimit()</b> ????? ???????????? ????? <b>process</b>.
	 * ??????????????? <i>????????</i> ????????? ?? ?????????? ?????????.<p>
	 * ?????????? <i>????????</i> ?????????? ????????????? ?? <i>????????</i>
	 * ??????: prev=3, next=2,
	 *	????? process ???????? ????????? -3,-2,-1,0^,1,2
	 *	???? setCurrent(-1): -4,-3,-2,-1^,0,1
	 *	???? setCurrent(-1) ? setLimit(-2,2) : -2,-1^,0,1
	 * @param prev ?????????? ?????????? ??????????
	 * @param next ?????????? ??????????? ??????????
	 * @throws ru.adv.util.calendar.BadUsageException ???? prev ??? next ?????? ????
	 * @see ru.adv.util.calendar.Calendar#setLimit(int, int)
	 */
	public void setSibling(int prev, int next) throws BadUsageException {
		if (prev < 0 || next < 0) {
			throw new BadUsageException("Invalid sibling: " + prev + " " + next);
		}
		_prev = prev;
		_next = next;
		_intervals = null;
	}

	/**
	 * ????????????? ??????? ????????. ??????? ???????????? ???????? ??? ???????? ?????????,
	 * ?? N ?????????? (???????????? ????)
	 * ?? ????????? ??????????? ??????????? ????.<p>
	 * ????????? ? ?????? (?? ????????? ??????????) start/end ?? <b>setLimit()</b>,
	 * ????????, current=-1
	 * <pre>
	 *      -2         -1^          0           1           2
	 *  01.01.1999, 01.01.2000, 01.01.2001, 01.01.2002, 01.01.2003
	 * </pre>
	 * @param current ???????? ???????? ?????????
	 * @throws ru.adv.util.calendar.BadUsageException ???? ??????? ???????? ?? ???????? ? ?????,
	 * ????????????? ??????? <b>setLimit()</b>
	 * @see ru.adv.util.calendar.Calendar#setLimit(int, int)
	 */
	public void setCurrent(int current) throws BadUsageException {
		if (!inLimit(current))
			throw new BadUsageException("Invalid current position: " + current);
		_current = current;
		_intervals = null;
	}

	/**
	 * ????????????? ???? ??? ???????? ?????????.
	 * @param currentDate
	 */
	public void setCurrentDate(Date currentDate) {
		_currentDate = currentDate;
		_intervals = null;
	}

	/**
	 * ????????????? ??????? ????????, ?????????? ??????????? ????.
	 */
	public void setCurrent() throws BadUsageException {
		setCurrent(0);
	}

	public List getIntervals() {
		if (_intervals == null) {
			prepareIntervals();
		}
		return Collections.unmodifiableList(_intervals);
	}

	/**
	 * ?????????? ??????? <b>process()</b>, ???? ???? ???????? ??????? ???????? ?????????.
	 * @param start ???? ?????? ?????????
	 * @param end ???? ????????? ?????????
	 * @param pos ??????? ? ?????? ?????????? ???????????? ???????? ?????????
	 * @see ru.adv.util.calendar.Calendar#process()
	 */
	public abstract void onCurrentInterval(Date start, Date end, int pos);

	/**
	 * ?????????? ??????? <b>process()</b>, ???? ???? ???????? ??????? ?????????, ????????? ?? ????????.
	 * @param start ???? ?????? ?????????
	 * @param end ???? ????????? ?????????
	 * @param pos ??????? ? ?????? ?????????? ???????????? ???????? ?????????
	 * @see ru.adv.util.calendar.Calendar#process()
	 */
	public abstract void onSiblingInterval(Date start, Date end, int pos);

	/**
	 * ?????????? ??????? <b>process()</b>, ????? ??????? ?????? ?????????, ??? ???? ???? ???? ?????? ????.
	 * @param date ???? ?????? ???? ??? ?????????
	 * @see ru.adv.util.calendar.Calendar#process()
	 */
	public abstract void onYear(Date date);

	/**
	 * ?????????? ??????? <b>process()</b>, ????? ??????? <b>onYear(Date)</b>, ??? ???? ???? ???? ?????? ??????.
	 * @param date ???? ?????? ??????
	 * @see ru.adv.util.calendar.Calendar#process()
	 */
	public abstract void onMonth(Date date);

	/**
	 * ?????????? ??????? <b>process()</b>, ????? ??????? <b>onMonth(Date)</b>,
	 * ??? ???? ???? ???? ?????? ???? ??????.
	 *
	 * @param date ???? ?????? ??????
	 * @param numweek ?????????? ????? ?????? ? ????
	 * @see ru.adv.util.calendar.Calendar#process()
	 * @see ru.adv.util.calendar.Calendar#setFirstMonday(boolean)
	 */
	public abstract void onWeek(Date date, int numweek);

	/**
	 * ?????????? ??????? <b>process()</b>, ???? ???? ?? ?????? ? ??????????????? ???????? ??? ?????.
	 * @param date ????
	 * @see ru.adv.util.calendar.Calendar#process()
	 */
	public abstract void onEmptyDay(Date date);

	/**
	 * ?????????? ??????? <b>process()</b>, ??? ???? ???? ???????? ? ????????.
	 * @param date ????
	 * @see ru.adv.util.calendar.Calendar#process()
	 */
	public abstract void onDay(Date date);

	/**
	 * ????? ??????????????? ???????? <i>??????????????</i> ????????? ?? ???? ?
	 * ????????? ???? ?? ????????. ?? ????? ?????? ???????? ?????? <i>?? ???????</i>:<p>
	 * <b><ol>
	 * <li>onSiblingInterval(Date, pos) | onCurrentInterval(Date, pos)<br>
	 * <li>onYear(Date)<br>
	 * <li>onMonth(Date)<br>
	 * <li>onWeek(Date,numweek)<br>
	 * <li>onDay(Date) | onEmptyDay()
	 * </ol></b>
	 * @see ru.adv.util.calendar.Calendar#onSiblingInterval(Date,
	        * Date, int)
	 * @see ru.adv.util.calendar.Calendar#onCurrentInterval(Date,
	        * Date, int)
	 * @see ru.adv.util.calendar.Calendar#onYear(Date)
	 * @see ru.adv.util.calendar.Calendar#onMonth(Date)
	 * @see ru.adv.util.calendar.Calendar#onWeek(Date, int)
	 * @see ru.adv.util.calendar.Calendar#onDay(Date)
	 * @see ru.adv.util.calendar.Calendar#onEmptyDay(Date)
	 */
	public void process() {
		prepareIntervals(); // ??????? ?????? intervals[]
		int delta = getFirstInterval();
		for (int i = 0; i < _intervals.size(); i++) {
			processInterval((Interval)_intervals.get(i), i + delta);
		}
	}

	/**
	 * ????????? ???????? ?? ???? ?????? ??? ??????? ???????? ?????????.
	 */
	private boolean matchDay(int day) {
		for (int i = 0; i < _dayList.size(); i++) {
			Integer value = (Integer) _dayList.get(i);
			if (value.intValue() == -1 || value.intValue() == day)
				return true;
		}
		return false;
	}

	/**
	 * ????????? ???????? ?? ????? ????? ??? ??????? ???????? ?????????.
	 */
	private boolean matchMonth(int month) {
		for (int i = 0; i < _monthList.size(); i++) {
			Integer value = (Integer) _monthList.get(i);
			if (value.intValue() == -1 || value.intValue() - 1 == month)
				return true;
		}
		return false;
	}

	/**
	 * ????????? ???????? ?? ???? ?????? ??? ??????? ???????? ?????????.
	 */
	private boolean matchWDay(int wday) {
		for (int i = 0; i < _wdayList.size(); i++) {
			Integer value = (Integer) _wdayList.get(i);
			if (value.intValue() == -1 || value.intValue() == wday)
				return true;
		}
		return false;
	}

	/**
	 * ?????????????? ?????? ??????????.
	 */
	private void prepareIntervals() {
		if (_intervals != null)
			return;

		int numberOfIntervals = getLastInterval() - getFirstInterval() + 1;
		_intervals = new ArrayList(numberOfIntervals);

		Date from = _currentDate;

		// ?????? ???? ????????? ? ????????? 0
		// ?????? ? start ????????
		int numStart = getFirstInterval();
		int step = 1;
		int numCurrent = 0;
		Interval startInterval = null;
		if (numStart < 0) step = -1;

		startInterval = calculateInterval(from);
		if (step != 0) {
			while (numCurrent != numStart) {
				numCurrent += step;
				if (step < 0)
					from = addDays(startInterval.getStart(), step);
				else
					from = addDays(startInterval.getEnd(), step);
				startInterval = calculateInterval(from);
			}
		}

		_intervals.clear();
		_intervals.add(startInterval);

		for (int i = 1; i < numberOfIntervals; i++) {
			_intervals.add(calculateInterval(addDays(((Interval)_intervals.get(i - 1)).getEnd(), 1)));
		}

	}

	/**
	 * ????????? ?????? ???????? ? ??????????? ?? start & prev
	 */
	private int getFirstInterval() {
		int first = _current - _prev;
		if (_start == null) {
			return first;
		}
		else {
			if (inStartLimit(first)) {
				return first;
			}
			else {
				return _start.intValue();
			}
		}
	}

	/**
	 * ????????? ????????? ???????? ? ??????????? ?? start & prev
	 */
	private int getLastInterval() {
		int last = _current + _next;
		if (_end == null) {
			return last;
		}
		else {
			if (inEndLimit(last)) {
				return last;
			}
			else {
				return _end.intValue();
			}
		}
	}

	/**
	 * ????????? ???? ?????? ? ????? ?????????.
	 */
	private Interval calculateInterval(Date fromDate) {
		java.util.Calendar cal = java.util.Calendar.getInstance();

		cal.setFirstDayOfWeek(_firstMonday ? 2 : 1);
		cal.setTime(fromDate);

		Date startCurrent;
		Date endCurrent;

		while (true) {
			if (matchDay(cal.get(java.util.Calendar.DAY_OF_MONTH)) &&
			        matchMonth(cal.get(java.util.Calendar.MONTH)) &&
			        matchWDay(cal.get(java.util.Calendar.DAY_OF_WEEK))) {

				startCurrent = cal.getTime();
				break;
			}
			cal.add(java.util.Calendar.DATE, -1);
		}

		cal.setFirstDayOfWeek(_firstMonday ? 2 : 1);
		cal.setTime(fromDate);

		while (true) {
			if (!cal.getTime().equals(startCurrent) &&
			        matchDay(cal.get(java.util.Calendar.DAY_OF_MONTH)) &&
			        matchMonth(cal.get(java.util.Calendar.MONTH)) &&
			        matchWDay(cal.get(java.util.Calendar.DAY_OF_WEEK))) {

				endCurrent = addDays(cal.getTime(), -1);
				break;
			}
			cal.add(java.util.Calendar.DATE, 1);
		}

		return new Interval(startCurrent, endCurrent);
	}

	/**
	 * ???????????? ???????? ????????.
	 * @param interval
	 * @param pos ????? ?????????
	 */
	private void processInterval(Interval interval, int pos) {
		java.util.Calendar cal = java.util.Calendar.getInstance();

		cal.setFirstDayOfWeek(_firstMonday ? 2 : 1);
		cal.setTime(interval.getStart());

		if (pos == _current)
			onCurrentInterval(interval.getStart(), interval.getEnd(), pos);
		else
			onSiblingInterval(interval.getStart(), interval.getEnd(), pos);

		int lastYear = -10000;

		while (cal.getTime().compareTo(interval.getEnd()) <= 0) {
			Date date = cal.getTime();

			if (cal.get(java.util.Calendar.YEAR) != lastYear) {
				onYear(date);
				lastYear = cal.get(java.util.Calendar.YEAR);
			}

			processMonth(bom(date, interval.getStart()), eom(date, interval.getEnd()));

			cal.add(java.util.Calendar.MONTH, 1);
			cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
		}
	}

	/**
	 * ???????????? ???????? ?????.
	 */
	private void processMonth(Date startDate, Date endDate) {
		int lastWeek = -1;

		java.util.Calendar cal = java.util.Calendar.getInstance();

		cal.setFirstDayOfWeek(_firstMonday ? 2 : 1);
		cal.setTime(startDate);

		onMonth(cal.getTime());

		while (cal.get(java.util.Calendar.DAY_OF_WEEK) != cal.getFirstDayOfWeek()) {
			cal.add(java.util.Calendar.DAY_OF_WEEK, -1);
		}

		java.util.Calendar endcal = java.util.Calendar.getInstance();
		int eow = _firstMonday ? 2 : 1;
		endcal.setTime(endDate);
		endcal.setFirstDayOfWeek(eow);

		eow = eow == 1 ? 7 : (eow == 2 ? 1 : 7);
		while (endcal.get(java.util.Calendar.DAY_OF_WEEK) != eow) {
			endcal.add(java.util.Calendar.DAY_OF_WEEK, 1);
		}

		endcal.add(java.util.Calendar.DATE, 1);

		while (endcal.after(cal)) {
			Date date = cal.getTime();

			if (lastWeek == -1 || cal.get(java.util.Calendar.DAY_OF_WEEK) == cal.getFirstDayOfWeek() &&
			        cal.get(java.util.Calendar.WEEK_OF_YEAR) != lastWeek) {
				onWeek(date, cal.get(java.util.Calendar.WEEK_OF_YEAR));
				lastWeek = cal.get(java.util.Calendar.WEEK_OF_YEAR);
			}

			if (cal.getTime().compareTo(startDate) == -1 ||
			        cal.getTime().compareTo(endDate) == 1) {
				onEmptyDay(date);
			}
			else {
				onDay(date);
			}
			cal.add(java.util.Calendar.DATE, 1);
		}
	}

	/**
	 * ????????? ???????.
	 */
	private void parse(String pattern) throws InvalidPatternException {
		StringTokenizer st = new StringTokenizer(pattern);

		int no = 0;

		for (; st.hasMoreTokens() && no < 3; no++) {

			String token = st.nextToken();

			StringTokenizer st2 = new StringTokenizer(token, ",");
			while (st2.hasMoreTokens()) {

				String token2 = st2.nextToken();

				Integer i;

				if (token2.equals("*"))
					i = new Integer(-1);
				else
					try {
						i = new Integer(token2);
					}
					catch (NumberFormatException e) {
						throw new InvalidPatternException(InvalidPatternException.CALENDAR_INVALID_TOKEN, "Invalid token: " + token, pattern);
					}

				switch (no) {
				case 0:
					{
						if (i.intValue() != -1 && (i.intValue() < 1 || i.intValue() > 31))
							throw new InvalidPatternException(InvalidPatternException.CALENDAR_INVALID_DAY, "Invalid day value: " + i, pattern);
						_dayList.add(i);
						break;
					}
				case 1:
					{
						if (i.intValue() != -1 && (i.intValue() < 1 || i.intValue() > 12))
							throw new InvalidPatternException(InvalidPatternException.CALENDAR_INVALID_MONTH, "Invalid month value: " + i, pattern);
						_monthList.add(i);
						break;
					}
				case 2:
					{
						if (i.intValue() != -1 && (i.intValue() < 1 || i.intValue() > 7))
							throw new InvalidPatternException(InvalidPatternException.CALENDAR_INVALID_WEEKDAY, "Invalid week day value: " + i, pattern);
						if (i.intValue() >= 1 && i.intValue() < 7)
							i = new Integer(i.intValue() + 1);
						else if (i.intValue() == 7)
							i = new Integer(1);
						_wdayList.add(i);
						break;
					}
				}
			}
		}
		if (no < 3)
			throw new InvalidPatternException(InvalidPatternException.CALENDAR_INVALID_SYNTAX, "Invalid syntax", pattern);
	}

	/* Date manipulation utilities */

	private Date addDays(Date date, int days) {
		java.util.Calendar cal = java.util.Calendar.getInstance();
		cal.setTime(date);
		cal.add(java.util.Calendar.DATE, days);
		return cal.getTime();
	}

	private Date bom(Date date, Date startDate) {
		java.util.Calendar cal = java.util.Calendar.getInstance();
		cal.setTime(date);

		java.util.Calendar cal2 = java.util.Calendar.getInstance();
		cal2.setTime(startDate);

		if (cal.get(java.util.Calendar.MONTH) == cal2.get(java.util.Calendar.MONTH)
		        && cal.get(java.util.Calendar.YEAR) == cal2.get(java.util.Calendar.YEAR)) {
			cal.set(java.util.Calendar.DATE, cal2.get(java.util.Calendar.DATE));
		}
		else {
			cal.set(java.util.Calendar.DATE, 1);
		}

		return cal.getTime();
	}

	private Date eom(Date date, Date endDate) {
		java.util.Calendar cal = java.util.Calendar.getInstance();
		cal.setTime(date);

		java.util.Calendar cal2 = java.util.Calendar.getInstance();
		cal2.setTime(endDate);

		if (cal.get(java.util.Calendar.MONTH) == cal2.get(java.util.Calendar.MONTH)
		        && cal.get(java.util.Calendar.YEAR) == cal2.get(java.util.Calendar.YEAR)) {
			cal.set(java.util.Calendar.DATE, cal2.get(java.util.Calendar.DATE));
		}
		else {
			cal.set(java.util.Calendar.DATE, cal.getActualMaximum(java.util.Calendar.DATE));
		}

		return cal.getTime();
	}

	protected String twoDigits(int i) {
		if (_twoDigitsFormatter == null) {
			_twoDigitsFormatter = new DecimalFormat("00");
		}
		return _twoDigitsFormatter.format(i);
	}

}

